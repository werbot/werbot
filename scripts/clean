#!/usr/bin/env bash

#set -e

ROOT_PATH="$(git rev-parse --show-toplevel)"
source ${ROOT_PATH}/scripts/_helper

arr_process=("__debug_bin" "vite")
for process_name in "${arr_process[@]}"; do
  pids=$(pgrep -f "$process_name")
  for pid in $pids; do
    exe_path=$(ps -p $pid -o args=)
    if [[ -n $exe_path && $exe_path == *"$ROOT_PATH"* ]]; then
      print_header "Killed process ${pid}"
      kill -9 $pid
      print_answer "SUCCESS" green
    fi
  done
done

for entry in "${ROOT_PATH}/cmd/"*/; do
  file_name="${entry}__debug_bin*"
  if compgen -G "$file_name" >/dev/null; then
    name=$(basename "${entry}")
    print_header "Deleting bin file for ${name}"
    rm -rf ${file_name}
    print_answer "SUCCESS" green
  fi
done

arr_folders=("${ROOT_PATH}/web/dist" "${ROOT_PATH}/bin/*" "${ROOT_PATH}/dist")
for folder in "${arr_folders[@]}"; do
  if [ -e "$folder" ]; then
    print_header "Deleting ${folder}"
    rm -rf "$folder"
    print_answer "SUCCESS" green
  fi
done

if [[ "$1" == 'docker' ]]; then
  print_header "Leaning garbage and inactive containers"
  docker system prune --all --volumes --force >/dev/null 2>&1
  docker image prune --filter "dangling=true" --force >/dev/null 2>&1
  print_answer "SUCCESS" green
fi

pids=$(pgrep -f "postgres.*9")
if [ -n "$pids" ]; then
  for process in $pids; do
    print_header "Killing $process process"
    if sudo kill "$process" >/dev/null; then # add sudo if need
      print_answer "SUCCESS" green
    else
      print_answer "ERROR" red
    fi
  done
fi

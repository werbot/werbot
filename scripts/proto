#!/usr/bin/env bash

set -e

ROOT_PATH="$(git rev-parse --show-toplevel)"
source ${ROOT_PATH}/scripts/_helper

protogen() {
  local PROTO_PATH=""
  local WEB_PATH=""
  if [ -z "$3" ]; then
    PROTO_PATH=${ROOT_PATH}/internal/grpc/${1}/proto
    #WEB_PATH=${ROOT_PATH}/web/src/proto/${1}
    WEB_PATH=${ROOT_PATH}/web/src/proto
  else
    PROTO_PATH=${ROOT_PATH}/add-on/${3}/internal/grpc/${1}/proto
    #WEB_PATH=${ROOT_PATH}/add-on/${3}/web/proto/${1}
    WEB_PATH=${ROOT_PATH}/add-on/${3}/web/proto
  fi

  FOLDER_LEN=$(find "$PROTO_PATH" -mindepth 1 -type d | wc -l)
  PROTO_PATH=$PROTO_PATH/${2}

  proto_files=$(find "${PROTO_PATH}" -type f -name "*.proto")
  if [ -z "$proto_files" ]; then
    echo "ERROR"
  else
    if [ "$FOLDER_LEN" -gt 1 ]; then
      WEB_PATH=$WEB_PATH/${1}
      mkdir -p "$WEB_PATH"
    fi

    for file in $proto_files; do
      proto_file=$(basename "$file" .proto)

      protoc --proto_path=$ROOT_PATH \
        --proto_path=$PROTO_PATH \
        --go_out=paths=source_relative:$PROTO_PATH \
        --go-grpc_out=paths=source_relative:$PROTO_PATH \
        --plugin=protoc-gen-ts=${ROOT_PATH}/web/node_modules/.bin/protoc-gen-ts \
        --ts_out=$WEB_PATH \
        --ts_opt=use_proto_field_name,ts_nocheck,long_type_string,force_optimize_code_size,force_client_none \
        ${proto_file}.proto

      # Update or add tags
      protoc-go-inject-tag -input="$PROTO_PATH/${proto_file}.pb.go" -remove_tag_comment

      # Fix ts files
      sed -i -e 's/\/internal\/grpc\/\([a-z]\+\)\/proto//g' $WEB_PATH/${proto_file}.ts
      sed -i '/\/\/ @generated by protobuf-ts/d' $WEB_PATH/${proto_file}.ts

      # Clean up extra version information the proto compiler adds to
      # the files.
      sed -i -e '1h;2,$H;$!d;g' -re 's|// versions.+// source:|// source:|' $PROTO_PATH/*.pb.go

      if [ "$FOLDER_LEN" -gt 1 ]; then
        rsync -a "$WEB_PATH/google/" "$WEB_PATH/../google/"
        rm -rf "$WEB_PATH/google"
        sed -i -e 's/.\/google\/protobuf/..\/google\/protobuf/g' $WEB_PATH/${proto_file}.ts
      fi
    done
  fi
}

generate_protos() {
  local path="$1"
  local prefix="$2"
  local addon="$3"

  for entry in "${path}"/*/; do
    name=$(basename "${entry}")
    if [[ -z "$addon" ]]; then
      print_header "Proto ${COLOR_YELLOW}${prefix}${COLOR_RESET}:${COLOR_BLUE}${name}${COLOR_RESET}"
      OTPUT=$(protogen "$prefix" "$name")
    else
      print_header "Proto {$addon}::${COLOR_YELLOW}${prefix}${COLOR_RESET}:${COLOR_BLUE}${name}${COLOR_RESET}"
      OTPUT=$(protogen "$prefix" "$name" "$addon")
    fi

    if [[ "$OTPUT" == "ERROR" ]]; then
      print_answer "ERROR" red
    else
      print_answer "SUCCESS" green
    fi
  done
}

addons=(ee saas)

if [[ $# -gt 0 ]]; then
  target_path="${ROOT_PATH}/internal/grpc/$1/proto"
  if [ -d "$target_path" ]; then
    generate_protos "$target_path" "$1"
  else
    for addon in "${addons[@]}"; do
      target_path="${ROOT_PATH}/add-on/$addon/internal/grpc/$1/proto"
      if [ -d "$target_path" ]; then
        generate_protos "$target_path" "$1" "$addon"
      fi
    done
  fi
else
  target_path="${ROOT_PATH}/internal/grpc"
  for entry in ${target_path}/*/; do
    name=$(basename "${entry}")
    generate_protos "${target_path}/$name/proto" "$name"
  done

  for addon in "${addons[@]}"; do
    target_path="${ROOT_PATH}/add-on/${addon}"
    if [ -d "$target_path" ]; then
      for entry in ${target_path}/internal/grpc/*/; do
        name=$(basename "${entry}")
        if [[ $name != "*" ]]; then
          generate_protos "${target_path}/internal/grpc/$name/proto" "$name" $addon
        fi
      done
    fi
  done
fi

#!/usr/bin/env bash

set -e

ROOT_PATH="$(git rev-parse --show-toplevel)"
source ${ROOT_PATH}/scripts/_helper

case "$1" in
tag)
  NEW_VERSION=$(
    read -p "Enter new release version (current version ${VERSION}): " enter
    echo ${enter}
  )

  if [ ${NEW_VERSION} ]; then
    print_header "Add new version to git"
    #sed -i -e "s/\(Licensed Work:\s*Werbot\s\)v[0-9][0-9.]*/\\1v${NEW_VERSION}/" $(ROOT_PATH)/LICENSE 2>&1
    sed -i -e "s/\(Change Date:\s*\)[-0-9]\+/\\1$(date +'%Y-%m-%d' -d '4 years')/" $(ROOT_PATH)/LICENSE 2>&1
    git add . 2>&1
    git commit -a -m "ðŸ”§ build: Create release" 2>&1
    git tag v${NEW_VERSION} 2>&1
    git push origin main 2>&1
    git push --tags origin main 2>&1
    print_answer "SUCCESS" green
  fi
  ;;

docker)
  print_header "Create docker update"
  mkdir -p ${ROOT_PATH}/scripts/install/cfg/haproxy
  cp -a ${ROOT_PATH}/docker/haproxy/*.txt ${ROOT_PATH}/scripts/install/cfg/haproxy/
  cp -a ${ROOT_PATH}/docker/haproxy/config.cfg ${ROOT_PATH}/scripts/install/cfg/haproxy/
  cp -a ${ROOT_PATH}/docker/docker-compose.yaml ${ROOT_PATH}/scripts/install/cfg/
  print_answer "SUCCESS" green
  ;;

*)
  echo "Parameters not passed"
  echo
  echo "$0 <command>"
  echo
  echo "command:"
  print_help tag "Add new version to git"
  ;;
esac

#!/usr/bin/env bash

ROOT_PATH="$(git rev-parse --show-toplevel)"
source ${ROOT_PATH}/scripts/_helper

CORE_DIR="${ROOT_PATH}/docker/core"
TMP_DIR="${ROOT_PATH}/.vscode/tmp"

mkdir -p "${CORE_DIR}"

case "$1" in
aes)
  print_header "Generate AES key"
  if OTPUT=$(hexdump -vn16 -e'4/4 "%08X" 1 "\n"' /dev/urandom); then
    print_answer "SUCCESS" green
    echo "${OTPUT}"
  else
    print_answer "ERROR" red
  fi
  ;;

ssh)
  print_header "Generate SSH key"
  rm -rf "${CORE_DIR}/server.key"*
  ssh-keygen -t rsa -b 4096 -f "${CORE_DIR}/server_key" -N '' -C 'werbot@core' >/dev/null 2>&1
  rm -rf "${CORE_DIR}/server_key.pub"
  mv "${CORE_DIR}/server_key" "${CORE_DIR}/server.key"
  print_answer "SUCCESS" green
  ;;

jwt)
  print_header "Generate JWT keys"
  openssl genrsa -out "${CORE_DIR}/jwt_private.key" 2048
  openssl rsa -in "${CORE_DIR}/jwt_private.key" -pubout -outform PEM -out "${CORE_DIR}/jwt_public.key" >/dev/null 2>&1
  print_answer "SUCCESS" green
  ;;

grpc)
  print_header "Generate GRPC keys"
  mkdir -p "${TMP_DIR}"
  cat <<EOF >"${TMP_DIR}/.temp-openssl-config"
[ req ]
prompt                 = no
req_extensions         = req_ext
distinguished_name     = req_distinguished_name

[ req_distinguished_name ]
countryName            = US
stateOrProvinceName    = Delaware
localityName           = Middletown
organizationName       = Werbot, Inc.
organizationalUnitName = werbot
commonName             = werbot.com

[ req_ext ]
subjectAltName         = @alt_names

[ alt_names ]
DNS.1                  = werbot.com
EOF
  openssl genrsa -out "${TMP_DIR}/private_key.pem" 2048
  openssl req -nodes -new -x509 -days 1825 -sha256 -config "${TMP_DIR}/.temp-openssl-config" \
    -extensions 'req_ext' \
    -key "${CORE_DIR}/grpc_private.key" \
    -out "${CORE_DIR}/grpc_certificate.key"
  rm -rf "${TMP_DIR}"
  print_answer "SUCCESS" green
  ;;

postgres)
  print_header "Generate PostgresQL keys"
  openssl req -nodes -new -x509 -days 1825 -text \
    -subj "/CN=localhost" \
    -out "${CORE_DIR}/postgres_server.crt" \
    -keyout "${CORE_DIR}/postgres_server.key" >/dev/null 2>&1
  sudo chown 70 "${CORE_DIR}/postgres_server.key"
  sudo chmod 600 "${CORE_DIR}/postgres_server.key"
  print_answer "SUCCESS" green
  ;;

license)
  print_header "Generate License keys"
	openssl genpkey -algorithm ed25519 -out "${CORE_DIR}/license_private.key"
	openssl pkey -in "${CORE_DIR}/license_private.key" -pubout -out "${CORE_DIR}/license_public.key"
  print_answer "SUCCESS" green
  ;;

*)
  echo "Parameters not passed"
  echo
  echo "$0 <command>"
  echo
  echo "command:"
  print_help aes "Generate AES key"
  print_help ssh "Generate SSH key"
  print_help jwt "Generate JWT keys"
  print_help grpc "Generate GRPC keys"
  print_help postgres "Generate PostgresQL keys"
  print_help license "Generate License keys"
  ;;
esac

#!/usr/bin/env bash

ROOT_PATH="$(git rev-parse --show-toplevel)"
source ${ROOT_PATH}/scripts/_helper

CORE_DIR="${ROOT_PATH}/docker/core"
TMP_DIR="${ROOT_PATH}/.vscode/tmp"

mkdir -p "${CORE_DIR}"

case "$1" in
aes)
  echo $(hexdump -vn16 -e'4/4 "%08X" 1 "\n"' /dev/urandom)
  ;;

ssh)
  print_header "Generate SSH key"
  rm -rf "${CORE_DIR}/server.key"*
  ssh-keygen -t rsa -b 4096 -f "${CORE_DIR}/server_key" -N '' -C 'werbot@core' >/dev/null 2>&1
  rm -rf "${CORE_DIR}/server_key.pub"
  mv "${CORE_DIR}/server_key" "${CORE_DIR}/server.key"
  print_answer "SUCCESS" green
  ;;

jwt)
  print_header "Generate JWT keys"
  openssl genrsa -out "${CORE_DIR}/jwt_private.key" 2048
  openssl rsa -in "${CORE_DIR}/jwt_private.key" -pubout -outform PEM -out "${CORE_DIR}/jwt_public.key" >/dev/null 2>&1
  print_answer "SUCCESS" green
  ;;

grpc)
  print_header "Generate GRPC keys"
  openssl genrsa -out "${CORE_DIR}/grpc_private.key" 2048
  openssl req -nodes -new -x509 -days 1825 -sha256 \
    -subj "/C=US/ST=Delaware/L=Middletown/O=Werbot, Inc./OU=werbot/CN=werbot.com" \
    -addext "subjectAltName=DNS:werbot.com" \
    -key "${CORE_DIR}/grpc_private.key" \
    -out "${CORE_DIR}/grpc_certificate.key"
  rm -rf "${TMP_DIR}"
  print_answer "SUCCESS" green
  ;;

postgres)
  print_header "Generate PostgresQL keys"
  openssl genrsa -out "${CORE_DIR}/postgres_private.key" 2048
  openssl req -nodes -new -x509 -days 1825 -sha256 \
    -subj "/C=US/ST=Delaware/L=Middletown/O=Werbot, Inc./OU=werbot/CN=werbot.com" \
    -addext "subjectAltName=DNS:werbot.com" \
    -key "${CORE_DIR}/postgres_private.key" \
    -out "${CORE_DIR}/postgres_certificate.key"
  sudo chown 70 "${CORE_DIR}/postgres_private.key"
  sudo chmod 600 "${CORE_DIR}/postgres_private.key"
  print_answer "SUCCESS" green
  ;;

license)
  print_header "Generate License keys"
	openssl genpkey -algorithm ed25519 -out "${CORE_DIR}/license_private.key"
	openssl pkey -in "${CORE_DIR}/license_private.key" -pubout -out "${CORE_DIR}/license_public.key"
  # TODO add generate license key - license.key
  cat <<EOF >"${CORE_DIR}/license.key"
-----BEGIN LICENSE KEY-----
9i9YqvMXfzVApxFES84T+DmanfAGird5GD9f9xILe7ctBXwOZUNc6WTJjKZihp0V
NAxWHinPrYBpdiR7ZeNnC3siY3VzIjoid2VyYm90IiwidHlwIjoiZW50ZXJwcmlz
ZSIsImlhdCI6IjIwMjItMDItMTZUMjA6NTI6MzUuNzgxNDU1Nzg5WiIsImV4cCI6
IjIwMjItMDMtMTZUMjA6NTI6MzUuNzgxNDU1Nzg5WiIsImRhdCI6eyJzZXJ2ZXJz
IjoyMCwiY29tcGFuaWVzIjoxMCwidXNlcnMiOjEwMCwibW9kdWxlcyI6WyJzdWNj
ZXNzIiwiZXJyb3IiLCJ3YXJuaW5nIl19fQ==
-----END LICENSE KEY-----
EOF
  print_answer "SUCCESS" green
  ;;

*)
  echo "Parameters not passed"
  echo
  echo "$0 <command>"
  echo
  echo "command:"
  print_help aes "Generate AES key"
  print_help ssh "Generate SSH key"
  print_help jwt "Generate JWT keys"
  print_help grpc "Generate GRPC keys"
  print_help postgres "Generate PostgresQL keys"
  print_help license "Generate License keys"
  ;;
esac

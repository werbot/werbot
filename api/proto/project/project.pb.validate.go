// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: project.proto

package project

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _project_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListProjects with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListProjects) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjects with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListProjectsMultiError, or
// nil if none found.
func (m *ListProjects) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjects) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProjectsMultiError(errors)
	}

	return nil
}

// ListProjectsMultiError is an error wrapping multiple validation errors
// returned by ListProjects.ValidateAll() if the designated constraints aren't met.
type ListProjectsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsMultiError) AllErrors() []error { return m }

// ListProjectsValidationError is the validation error returned by
// ListProjects.Validate if the designated constraints aren't met.
type ListProjectsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsValidationError) ErrorName() string { return "ListProjectsValidationError" }

// Error satisfies the builtin error interface
func (e ListProjectsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjects.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsValidationError{}

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}

	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on AddProject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddProject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProject with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddProjectMultiError, or
// nil if none found.
func (m *AddProject) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProjectMultiError(errors)
	}

	return nil
}

// AddProjectMultiError is an error wrapping multiple validation errors
// returned by AddProject.ValidateAll() if the designated constraints aren't met.
type AddProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMultiError) AllErrors() []error { return m }

// AddProjectValidationError is the validation error returned by
// AddProject.Validate if the designated constraints aren't met.
type AddProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectValidationError) ErrorName() string { return "AddProjectValidationError" }

// Error satisfies the builtin error interface
func (e AddProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectValidationError{}

// Validate checks the field values on UpdateProject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateProject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateProjectMultiError, or
// nil if none found.
func (m *UpdateProject) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectMultiError(errors)
	}

	return nil
}

// UpdateProjectMultiError is an error wrapping multiple validation errors
// returned by UpdateProject.ValidateAll() if the designated constraints
// aren't met.
type UpdateProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectMultiError) AllErrors() []error { return m }

// UpdateProjectValidationError is the validation error returned by
// UpdateProject.Validate if the designated constraints aren't met.
type UpdateProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectValidationError) ErrorName() string { return "UpdateProjectValidationError" }

// Error satisfies the builtin error interface
func (e UpdateProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectValidationError{}

// Validate checks the field values on DeleteProject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteProject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteProjectMultiError, or
// nil if none found.
func (m *DeleteProject) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectMultiError(errors)
	}

	return nil
}

// DeleteProjectMultiError is an error wrapping multiple validation errors
// returned by DeleteProject.ValidateAll() if the designated constraints
// aren't met.
type DeleteProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectMultiError) AllErrors() []error { return m }

// DeleteProjectValidationError is the validation error returned by
// DeleteProject.Validate if the designated constraints aren't met.
type DeleteProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectValidationError) ErrorName() string { return "DeleteProjectValidationError" }

// Error satisfies the builtin error interface
func (e DeleteProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectValidationError{}

// Validate checks the field values on Key with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Key) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Key with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KeyMultiError, or nil if none found.
func (m *Key) ValidateAll() error {
	return m.validate(true)
}

func (m *Key) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KeyMultiError(errors)
	}

	return nil
}

// KeyMultiError is an error wrapping multiple validation errors returned by
// Key.ValidateAll() if the designated constraints aren't met.
type KeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyMultiError) AllErrors() []error { return m }

// KeyValidationError is the validation error returned by Key.Validate if the
// designated constraints aren't met.
type KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValidationError) ErrorName() string { return "KeyValidationError" }

// Error satisfies the builtin error interface
func (e KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValidationError{}

// Validate checks the field values on AddKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddKey with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddKeyMultiError, or nil if none found.
func (m *AddKey) ValidateAll() error {
	return m.validate(true)
}

func (m *AddKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddKeyMultiError(errors)
	}

	return nil
}

// AddKeyMultiError is an error wrapping multiple validation errors returned by
// AddKey.ValidateAll() if the designated constraints aren't met.
type AddKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddKeyMultiError) AllErrors() []error { return m }

// AddKeyValidationError is the validation error returned by AddKey.Validate if
// the designated constraints aren't met.
type AddKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKeyValidationError) ErrorName() string { return "AddKeyValidationError" }

// Error satisfies the builtin error interface
func (e AddKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKeyValidationError{}

// Validate checks the field values on UpdateKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateKeyMultiError, or nil
// if none found.
func (m *UpdateKey) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateKeyMultiError(errors)
	}

	return nil
}

// UpdateKeyMultiError is an error wrapping multiple validation errors returned
// by UpdateKey.ValidateAll() if the designated constraints aren't met.
type UpdateKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKeyMultiError) AllErrors() []error { return m }

// UpdateKeyValidationError is the validation error returned by
// UpdateKey.Validate if the designated constraints aren't met.
type UpdateKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKeyValidationError) ErrorName() string { return "UpdateKeyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKeyValidationError{}

// Validate checks the field values on DeleteKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteKeyMultiError, or nil
// if none found.
func (m *DeleteKey) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteKeyMultiError(errors)
	}

	return nil
}

// DeleteKeyMultiError is an error wrapping multiple validation errors returned
// by DeleteKey.ValidateAll() if the designated constraints aren't met.
type DeleteKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeyMultiError) AllErrors() []error { return m }

// DeleteKeyValidationError is the validation error returned by
// DeleteKey.Validate if the designated constraints aren't met.
type DeleteKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeyValidationError) ErrorName() string { return "DeleteKeyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeyValidationError{}

// Validate checks the field values on ListProjects_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjects_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjects_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjects_RequestMultiError, or nil if none found.
func (m *ListProjects_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjects_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListProjects_RequestMultiError(errors)
	}

	return nil
}

// ListProjects_RequestMultiError is an error wrapping multiple validation
// errors returned by ListProjects_Request.ValidateAll() if the designated
// constraints aren't met.
type ListProjects_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjects_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjects_RequestMultiError) AllErrors() []error { return m }

// ListProjects_RequestValidationError is the validation error returned by
// ListProjects_Request.Validate if the designated constraints aren't met.
type ListProjects_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjects_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjects_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjects_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjects_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjects_RequestValidationError) ErrorName() string {
	return "ListProjects_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjects_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjects_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjects_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjects_RequestValidationError{}

// Validate checks the field values on ListProjects_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjects_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjects_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjects_ResponseMultiError, or nil if none found.
func (m *ListProjects_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjects_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjects_ResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjects_ResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjects_ResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjects_ResponseMultiError(errors)
	}

	return nil
}

// ListProjects_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjects_Response.ValidateAll() if the designated
// constraints aren't met.
type ListProjects_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjects_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjects_ResponseMultiError) AllErrors() []error { return m }

// ListProjects_ResponseValidationError is the validation error returned by
// ListProjects_Response.Validate if the designated constraints aren't met.
type ListProjects_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjects_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjects_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjects_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjects_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjects_ResponseValidationError) ErrorName() string {
	return "ListProjects_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjects_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjects_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjects_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjects_ResponseValidationError{}

// Validate checks the field values on Project_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Project_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Project_RequestMultiError, or nil if none found.
func (m *Project_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Project_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerId() != "" {

		if err := m._validateUuid(m.GetOwnerId()); err != nil {
			err = Project_RequestValidationError{
				field:  "OwnerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetProjectId() != "" {

		if err := m._validateUuid(m.GetProjectId()); err != nil {
			err = Project_RequestValidationError{
				field:  "ProjectId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return Project_RequestMultiError(errors)
	}

	return nil
}

func (m *Project_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Project_RequestMultiError is an error wrapping multiple validation errors
// returned by Project_Request.ValidateAll() if the designated constraints
// aren't met.
type Project_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Project_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Project_RequestMultiError) AllErrors() []error { return m }

// Project_RequestValidationError is the validation error returned by
// Project_Request.Validate if the designated constraints aren't met.
type Project_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Project_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Project_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Project_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Project_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Project_RequestValidationError) ErrorName() string { return "Project_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Project_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Project_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Project_RequestValidationError{}

// Validate checks the field values on Project_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Project_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Project_ResponseMultiError, or nil if none found.
func (m *Project_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Project_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for OwnerId

	// no validation rules for Title

	// no validation rules for Login

	// no validation rules for MembersCount

	// no validation rules for ServersCount

	if all {
		switch v := interface{}(m.GetLastUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Project_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Project_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Project_ResponseValidationError{
				field:  "LastUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Project_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Project_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Project_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Project_ResponseMultiError(errors)
	}

	return nil
}

// Project_ResponseMultiError is an error wrapping multiple validation errors
// returned by Project_Response.ValidateAll() if the designated constraints
// aren't met.
type Project_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Project_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Project_ResponseMultiError) AllErrors() []error { return m }

// Project_ResponseValidationError is the validation error returned by
// Project_Response.Validate if the designated constraints aren't met.
type Project_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Project_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Project_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Project_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Project_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Project_ResponseValidationError) ErrorName() string { return "Project_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Project_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Project_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Project_ResponseValidationError{}

// Validate checks the field values on AddProject_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProject_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProject_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProject_RequestMultiError, or nil if none found.
func (m *AddProject_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProject_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerId() != "" {

		if err := m._validateUuid(m.GetOwnerId()); err != nil {
			err = AddProject_RequestValidationError{
				field:  "OwnerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetLogin()); l < 3 || l > 20 {
		err := AddProject_RequestValidationError{
			field:  "Login",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddProject_Request_Login_Pattern.MatchString(m.GetLogin()) {
		err := AddProject_RequestValidationError{
			field:  "Login",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := AddProject_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProject_RequestMultiError(errors)
	}

	return nil
}

func (m *AddProject_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddProject_RequestMultiError is an error wrapping multiple validation errors
// returned by AddProject_Request.ValidateAll() if the designated constraints
// aren't met.
type AddProject_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProject_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProject_RequestMultiError) AllErrors() []error { return m }

// AddProject_RequestValidationError is the validation error returned by
// AddProject_Request.Validate if the designated constraints aren't met.
type AddProject_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProject_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProject_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProject_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProject_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProject_RequestValidationError) ErrorName() string {
	return "AddProject_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProject_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProject_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProject_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProject_RequestValidationError{}

var _AddProject_Request_Login_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on AddProject_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProject_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProject_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProject_ResponseMultiError, or nil if none found.
func (m *AddProject_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProject_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return AddProject_ResponseMultiError(errors)
	}

	return nil
}

// AddProject_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddProject_Response.ValidateAll() if the designated
// constraints aren't met.
type AddProject_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProject_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProject_ResponseMultiError) AllErrors() []error { return m }

// AddProject_ResponseValidationError is the validation error returned by
// AddProject_Response.Validate if the designated constraints aren't met.
type AddProject_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProject_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProject_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProject_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProject_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProject_ResponseValidationError) ErrorName() string {
	return "AddProject_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProject_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProject_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProject_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProject_ResponseValidationError{}

// Validate checks the field values on UpdateProject_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProject_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProject_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProject_RequestMultiError, or nil if none found.
func (m *UpdateProject_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProject_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateProject_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOwnerId() != "" {

		if err := m._validateUuid(m.GetOwnerId()); err != nil {
			err = UpdateProject_RequestValidationError{
				field:  "OwnerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := UpdateProject_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateProject_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateProject_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateProject_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProject_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateProject_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProject_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProject_RequestMultiError) AllErrors() []error { return m }

// UpdateProject_RequestValidationError is the validation error returned by
// UpdateProject_Request.Validate if the designated constraints aren't met.
type UpdateProject_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProject_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProject_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProject_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProject_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProject_RequestValidationError) ErrorName() string {
	return "UpdateProject_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProject_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProject_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProject_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProject_RequestValidationError{}

// Validate checks the field values on UpdateProject_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProject_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProject_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProject_ResponseMultiError, or nil if none found.
func (m *UpdateProject_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProject_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProject_ResponseMultiError(errors)
	}

	return nil
}

// UpdateProject_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProject_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateProject_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProject_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProject_ResponseMultiError) AllErrors() []error { return m }

// UpdateProject_ResponseValidationError is the validation error returned by
// UpdateProject_Response.Validate if the designated constraints aren't met.
type UpdateProject_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProject_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProject_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProject_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProject_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProject_ResponseValidationError) ErrorName() string {
	return "UpdateProject_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProject_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProject_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProject_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProject_ResponseValidationError{}

// Validate checks the field values on DeleteProject_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProject_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProject_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProject_RequestMultiError, or nil if none found.
func (m *DeleteProject_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProject_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerId() != "" {

		if err := m._validateUuid(m.GetOwnerId()); err != nil {
			err = DeleteProject_RequestValidationError{
				field:  "OwnerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteProject_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProject_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteProject_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteProject_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProject_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteProject_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProject_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProject_RequestMultiError) AllErrors() []error { return m }

// DeleteProject_RequestValidationError is the validation error returned by
// DeleteProject_Request.Validate if the designated constraints aren't met.
type DeleteProject_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProject_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProject_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProject_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProject_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProject_RequestValidationError) ErrorName() string {
	return "DeleteProject_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProject_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProject_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProject_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProject_RequestValidationError{}

// Validate checks the field values on DeleteProject_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProject_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProject_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProject_ResponseMultiError, or nil if none found.
func (m *DeleteProject_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProject_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProject_ResponseMultiError(errors)
	}

	return nil
}

// DeleteProject_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProject_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteProject_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProject_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProject_ResponseMultiError) AllErrors() []error { return m }

// DeleteProject_ResponseValidationError is the validation error returned by
// DeleteProject_Response.Validate if the designated constraints aren't met.
type DeleteProject_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProject_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProject_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProject_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProject_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProject_ResponseValidationError) ErrorName() string {
	return "DeleteProject_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProject_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProject_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProject_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProject_ResponseValidationError{}

// Validate checks the field values on Key_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Key_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Key_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Key_RequestMultiError, or
// nil if none found.
func (m *Key_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Key_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = Key_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Key_RequestMultiError(errors)
	}

	return nil
}

func (m *Key_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Key_RequestMultiError is an error wrapping multiple validation errors
// returned by Key_Request.ValidateAll() if the designated constraints aren't met.
type Key_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Key_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Key_RequestMultiError) AllErrors() []error { return m }

// Key_RequestValidationError is the validation error returned by
// Key_Request.Validate if the designated constraints aren't met.
type Key_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Key_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Key_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Key_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Key_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Key_RequestValidationError) ErrorName() string { return "Key_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Key_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Key_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Key_RequestValidationError{}

// Validate checks the field values on Key_Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Key_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Key_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Key_ResponseMultiError, or
// nil if none found.
func (m *Key_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Key_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for ApiOnline

	if all {
		switch v := interface{}(m.GetLastUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Key_ResponseValidationError{
				field:  "LastUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Key_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Key_ResponseMultiError(errors)
	}

	return nil
}

// Key_ResponseMultiError is an error wrapping multiple validation errors
// returned by Key_Response.ValidateAll() if the designated constraints aren't met.
type Key_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Key_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Key_ResponseMultiError) AllErrors() []error { return m }

// Key_ResponseValidationError is the validation error returned by
// Key_Response.Validate if the designated constraints aren't met.
type Key_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Key_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Key_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Key_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Key_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Key_ResponseValidationError) ErrorName() string { return "Key_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Key_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Key_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Key_ResponseValidationError{}

// Validate checks the field values on AddKey_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddKey_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddKey_RequestMultiError,
// or nil if none found.
func (m *AddKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddKey_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddKey_RequestMultiError(errors)
	}

	return nil
}

func (m *AddKey_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddKey_RequestMultiError is an error wrapping multiple validation errors
// returned by AddKey_Request.ValidateAll() if the designated constraints
// aren't met.
type AddKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddKey_RequestMultiError) AllErrors() []error { return m }

// AddKey_RequestValidationError is the validation error returned by
// AddKey_Request.Validate if the designated constraints aren't met.
type AddKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKey_RequestValidationError) ErrorName() string { return "AddKey_RequestValidationError" }

// Error satisfies the builtin error interface
func (e AddKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKey_RequestValidationError{}

// Validate checks the field values on AddKey_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddKey_ResponseMultiError, or nil if none found.
func (m *AddKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddKey_ResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddKey_ResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddKey_ResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddKey_ResponseMultiError(errors)
	}

	return nil
}

// AddKey_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddKey_Response.ValidateAll() if the designated constraints
// aren't met.
type AddKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddKey_ResponseMultiError) AllErrors() []error { return m }

// AddKey_ResponseValidationError is the validation error returned by
// AddKey_Response.Validate if the designated constraints aren't met.
type AddKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKey_ResponseValidationError) ErrorName() string { return "AddKey_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKey_ResponseValidationError{}

// Validate checks the field values on UpdateKey_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateKey_RequestMultiError, or nil if none found.
func (m *UpdateKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateKey_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetApiKey()); err != nil {
		err = UpdateKey_RequestValidationError{
			field:  "ApiKey",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateKey_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateKey_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateKey_RequestMultiError is an error wrapping multiple validation errors
// returned by UpdateKey_Request.ValidateAll() if the designated constraints
// aren't met.
type UpdateKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKey_RequestMultiError) AllErrors() []error { return m }

// UpdateKey_RequestValidationError is the validation error returned by
// UpdateKey_Request.Validate if the designated constraints aren't met.
type UpdateKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKey_RequestValidationError) ErrorName() string {
	return "UpdateKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKey_RequestValidationError{}

// Validate checks the field values on UpdateKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateKey_ResponseMultiError, or nil if none found.
func (m *UpdateKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateKey_ResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateKey_ResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKey_ResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateKey_ResponseMultiError(errors)
	}

	return nil
}

// UpdateKey_ResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateKey_Response.ValidateAll() if the designated constraints
// aren't met.
type UpdateKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKey_ResponseMultiError) AllErrors() []error { return m }

// UpdateKey_ResponseValidationError is the validation error returned by
// UpdateKey_Response.Validate if the designated constraints aren't met.
type UpdateKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKey_ResponseValidationError) ErrorName() string {
	return "UpdateKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKey_ResponseValidationError{}

// Validate checks the field values on DeleteKey_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKey_RequestMultiError, or nil if none found.
func (m *DeleteKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteKey_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetApiKey()); err != nil {
		err = DeleteKey_RequestValidationError{
			field:  "ApiKey",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteKey_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteKey_Request) _validateUuid(uuid string) error {
	if matched := _project_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteKey_RequestMultiError is an error wrapping multiple validation errors
// returned by DeleteKey_Request.ValidateAll() if the designated constraints
// aren't met.
type DeleteKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKey_RequestMultiError) AllErrors() []error { return m }

// DeleteKey_RequestValidationError is the validation error returned by
// DeleteKey_Request.Validate if the designated constraints aren't met.
type DeleteKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKey_RequestValidationError) ErrorName() string {
	return "DeleteKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKey_RequestValidationError{}

// Validate checks the field values on DeleteKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKey_ResponseMultiError, or nil if none found.
func (m *DeleteKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteKey_ResponseMultiError(errors)
	}

	return nil
}

// DeleteKey_ResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteKey_Response.ValidateAll() if the designated constraints
// aren't met.
type DeleteKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKey_ResponseMultiError) AllErrors() []error { return m }

// DeleteKey_ResponseValidationError is the validation error returned by
// DeleteKey_Response.Validate if the designated constraints aren't met.
type DeleteKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKey_ResponseValidationError) ErrorName() string {
	return "DeleteKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKey_ResponseValidationError{}

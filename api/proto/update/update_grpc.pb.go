// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: update.proto

package update

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateHandlersClient is the client API for UpdateHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateHandlersClient interface {
	Update(ctx context.Context, in *Update_Request, opts ...grpc.CallOption) (*Update_Response, error)
}

type updateHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateHandlersClient(cc grpc.ClientConnInterface) UpdateHandlersClient {
	return &updateHandlersClient{cc}
}

func (c *updateHandlersClient) Update(ctx context.Context, in *Update_Request, opts ...grpc.CallOption) (*Update_Response, error) {
	out := new(Update_Response)
	err := c.cc.Invoke(ctx, "/update.UpdateHandlers/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateHandlersServer is the server API for UpdateHandlers service.
// All implementations must embed UnimplementedUpdateHandlersServer
// for forward compatibility
type UpdateHandlersServer interface {
	Update(context.Context, *Update_Request) (*Update_Response, error)
	mustEmbedUnimplementedUpdateHandlersServer()
}

// UnimplementedUpdateHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateHandlersServer struct {
}

func (UnimplementedUpdateHandlersServer) Update(context.Context, *Update_Request) (*Update_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUpdateHandlersServer) mustEmbedUnimplementedUpdateHandlersServer() {}

// UnsafeUpdateHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateHandlersServer will
// result in compilation errors.
type UnsafeUpdateHandlersServer interface {
	mustEmbedUnimplementedUpdateHandlersServer()
}

func RegisterUpdateHandlersServer(s grpc.ServiceRegistrar, srv UpdateHandlersServer) {
	s.RegisterService(&UpdateHandlers_ServiceDesc, srv)
}

func _UpdateHandlers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Update_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateHandlersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/update.UpdateHandlers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateHandlersServer).Update(ctx, req.(*Update_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateHandlers_ServiceDesc is the grpc.ServiceDesc for UpdateHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "update.UpdateHandlers",
	HandlerType: (*UpdateHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _UpdateHandlers_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "update.proto",
}

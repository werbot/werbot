// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: update.proto

package update

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Update with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Update) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Update with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UpdateMultiError, or nil if none found.
func (m *Update) ValidateAll() error {
	return m.validate(true)
}

func (m *Update) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMultiError(errors)
	}

	return nil
}

// UpdateMultiError is an error wrapping multiple validation errors returned by
// Update.ValidateAll() if the designated constraints aren't met.
type UpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMultiError) AllErrors() []error { return m }

// UpdateValidationError is the validation error returned by Update.Validate if
// the designated constraints aren't met.
type UpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateValidationError) ErrorName() string { return "UpdateValidationError" }

// Error satisfies the builtin error interface
func (e UpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateValidationError{}

// Validate checks the field values on Update_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Update_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Update_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Update_RequestMultiError,
// or nil if none found.
func (m *Update_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Update_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Update_RequestMultiError(errors)
	}

	return nil
}

// Update_RequestMultiError is an error wrapping multiple validation errors
// returned by Update_Request.ValidateAll() if the designated constraints
// aren't met.
type Update_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Update_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Update_RequestMultiError) AllErrors() []error { return m }

// Update_RequestValidationError is the validation error returned by
// Update_Request.Validate if the designated constraints aren't met.
type Update_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Update_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Update_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Update_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Update_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Update_RequestValidationError) ErrorName() string { return "Update_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Update_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdate_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Update_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Update_RequestValidationError{}

// Validate checks the field values on Update_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Update_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Update_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Update_ResponseMultiError, or nil if none found.
func (m *Update_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Update_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetComponents()))
		i := 0
		for key := range m.GetComponents() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetComponents()[key]
			_ = val

			// no validation rules for Components[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Update_ResponseValidationError{
							field:  fmt.Sprintf("Components[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Update_ResponseValidationError{
							field:  fmt.Sprintf("Components[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Update_ResponseValidationError{
						field:  fmt.Sprintf("Components[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Update_ResponseMultiError(errors)
	}

	return nil
}

// Update_ResponseMultiError is an error wrapping multiple validation errors
// returned by Update_Response.ValidateAll() if the designated constraints
// aren't met.
type Update_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Update_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Update_ResponseMultiError) AllErrors() []error { return m }

// Update_ResponseValidationError is the validation error returned by
// Update_Response.Validate if the designated constraints aren't met.
type Update_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Update_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Update_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Update_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Update_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Update_ResponseValidationError) ErrorName() string { return "Update_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Update_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdate_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Update_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Update_ResponseValidationError{}

// Validate checks the field values on Update_Response_Component with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Update_Response_Component) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Update_Response_Component with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Update_Response_ComponentMultiError, or nil if none found.
func (m *Update_Response_Component) ValidateAll() error {
	return m.validate(true)
}

func (m *Update_Response_Component) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionAfter

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetIssuedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Update_Response_ComponentValidationError{
					field:  "IssuedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Update_Response_ComponentValidationError{
					field:  "IssuedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Update_Response_ComponentValidationError{
				field:  "IssuedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Update_Response_ComponentMultiError(errors)
	}

	return nil
}

// Update_Response_ComponentMultiError is an error wrapping multiple validation
// errors returned by Update_Response_Component.ValidateAll() if the
// designated constraints aren't met.
type Update_Response_ComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Update_Response_ComponentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Update_Response_ComponentMultiError) AllErrors() []error { return m }

// Update_Response_ComponentValidationError is the validation error returned by
// Update_Response_Component.Validate if the designated constraints aren't met.
type Update_Response_ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Update_Response_ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Update_Response_ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Update_Response_ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Update_Response_ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Update_Response_ComponentValidationError) ErrorName() string {
	return "Update_Response_ComponentValidationError"
}

// Error satisfies the builtin error interface
func (e Update_Response_ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdate_Response_Component.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Update_Response_ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Update_Response_ComponentValidationError{}

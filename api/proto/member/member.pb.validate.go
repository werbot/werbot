// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: member.proto

package member

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	user "github.com/werbot/werbot/api/proto/user"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = user.RoleUser(0)
)

// define the regex for a UUID once up-front
var _member_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Activity_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Activity_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Activity_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Activity_RequestMultiError, or nil if none found.
func (m *Activity_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Activity_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = Activity_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = Activity_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return Activity_RequestMultiError(errors)
	}

	return nil
}

func (m *Activity_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Activity_RequestMultiError is an error wrapping multiple validation errors
// returned by Activity_Request.ValidateAll() if the designated constraints
// aren't met.
type Activity_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Activity_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Activity_RequestMultiError) AllErrors() []error { return m }

// Activity_RequestValidationError is the validation error returned by
// Activity_Request.Validate if the designated constraints aren't met.
type Activity_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Activity_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Activity_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Activity_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Activity_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Activity_RequestValidationError) ErrorName() string { return "Activity_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Activity_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivity_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Activity_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Activity_RequestValidationError{}

// Validate checks the field values on ListProjectMembers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembersMultiError, or nil if none found.
func (m *ListProjectMembers) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProjectMembersMultiError(errors)
	}

	return nil
}

// ListProjectMembersMultiError is an error wrapping multiple validation errors
// returned by ListProjectMembers.ValidateAll() if the designated constraints
// aren't met.
type ListProjectMembersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersMultiError) AllErrors() []error { return m }

// ListProjectMembersValidationError is the validation error returned by
// ListProjectMembers.Validate if the designated constraints aren't met.
type ListProjectMembersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersValidationError) ErrorName() string {
	return "ListProjectMembersValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersValidationError{}

// Validate checks the field values on ProjectMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectMemberMultiError, or
// nil if none found.
func (m *ProjectMember) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectMemberMultiError(errors)
	}

	return nil
}

// ProjectMemberMultiError is an error wrapping multiple validation errors
// returned by ProjectMember.ValidateAll() if the designated constraints
// aren't met.
type ProjectMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMemberMultiError) AllErrors() []error { return m }

// ProjectMemberValidationError is the validation error returned by
// ProjectMember.Validate if the designated constraints aren't met.
type ProjectMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMemberValidationError) ErrorName() string { return "ProjectMemberValidationError" }

// Error satisfies the builtin error interface
func (e ProjectMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMemberValidationError{}

// Validate checks the field values on AddProjectMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberMultiError, or nil if none found.
func (m *AddProjectMember) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProjectMemberMultiError(errors)
	}

	return nil
}

// AddProjectMemberMultiError is an error wrapping multiple validation errors
// returned by AddProjectMember.ValidateAll() if the designated constraints
// aren't met.
type AddProjectMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberMultiError) AllErrors() []error { return m }

// AddProjectMemberValidationError is the validation error returned by
// AddProjectMember.Validate if the designated constraints aren't met.
type AddProjectMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberValidationError) ErrorName() string { return "AddProjectMemberValidationError" }

// Error satisfies the builtin error interface
func (e AddProjectMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberValidationError{}

// Validate checks the field values on UpdateProjectMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectMemberMultiError, or nil if none found.
func (m *UpdateProjectMember) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectMemberMultiError(errors)
	}

	return nil
}

// UpdateProjectMemberMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectMember.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectMemberMultiError) AllErrors() []error { return m }

// UpdateProjectMemberValidationError is the validation error returned by
// UpdateProjectMember.Validate if the designated constraints aren't met.
type UpdateProjectMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMemberValidationError) ErrorName() string {
	return "UpdateProjectMemberValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMemberValidationError{}

// Validate checks the field values on DeleteProjectMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectMemberMultiError, or nil if none found.
func (m *DeleteProjectMember) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectMemberMultiError(errors)
	}

	return nil
}

// DeleteProjectMemberMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectMember.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectMemberMultiError) AllErrors() []error { return m }

// DeleteProjectMemberValidationError is the validation error returned by
// DeleteProjectMember.Validate if the designated constraints aren't met.
type DeleteProjectMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectMemberValidationError) ErrorName() string {
	return "DeleteProjectMemberValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectMemberValidationError{}

// Validate checks the field values on UpdateProjectMemberStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectMemberStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectMemberStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectMemberStatusMultiError, or nil if none found.
func (m *UpdateProjectMemberStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectMemberStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectMemberStatusMultiError(errors)
	}

	return nil
}

// UpdateProjectMemberStatusMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectMemberStatus.ValidateAll() if the
// designated constraints aren't met.
type UpdateProjectMemberStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectMemberStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectMemberStatusMultiError) AllErrors() []error { return m }

// UpdateProjectMemberStatusValidationError is the validation error returned by
// UpdateProjectMemberStatus.Validate if the designated constraints aren't met.
type UpdateProjectMemberStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMemberStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMemberStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMemberStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMemberStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMemberStatusValidationError) ErrorName() string {
	return "UpdateProjectMemberStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMemberStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMemberStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMemberStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMemberStatusValidationError{}

// Validate checks the field values on MemberByID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberByID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberByID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberByIDMultiError, or
// nil if none found.
func (m *MemberByID) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberByID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MemberByIDMultiError(errors)
	}

	return nil
}

// MemberByIDMultiError is an error wrapping multiple validation errors
// returned by MemberByID.ValidateAll() if the designated constraints aren't met.
type MemberByIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberByIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberByIDMultiError) AllErrors() []error { return m }

// MemberByIDValidationError is the validation error returned by
// MemberByID.Validate if the designated constraints aren't met.
type MemberByIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberByIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberByIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberByIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberByIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberByIDValidationError) ErrorName() string { return "MemberByIDValidationError" }

// Error satisfies the builtin error interface
func (e MemberByIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberByID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberByIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberByIDValidationError{}

// Validate checks the field values on UsersWithoutProject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UsersWithoutProject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersWithoutProject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UsersWithoutProjectMultiError, or nil if none found.
func (m *UsersWithoutProject) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersWithoutProject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UsersWithoutProjectMultiError(errors)
	}

	return nil
}

// UsersWithoutProjectMultiError is an error wrapping multiple validation
// errors returned by UsersWithoutProject.ValidateAll() if the designated
// constraints aren't met.
type UsersWithoutProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersWithoutProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersWithoutProjectMultiError) AllErrors() []error { return m }

// UsersWithoutProjectValidationError is the validation error returned by
// UsersWithoutProject.Validate if the designated constraints aren't met.
type UsersWithoutProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersWithoutProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersWithoutProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersWithoutProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersWithoutProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersWithoutProjectValidationError) ErrorName() string {
	return "UsersWithoutProjectValidationError"
}

// Error satisfies the builtin error interface
func (e UsersWithoutProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersWithoutProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersWithoutProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersWithoutProjectValidationError{}

// Validate checks the field values on ListProjectMembersInvite with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembersInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersInvite with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembersInviteMultiError, or nil if none found.
func (m *ListProjectMembersInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProjectMembersInviteMultiError(errors)
	}

	return nil
}

// ListProjectMembersInviteMultiError is an error wrapping multiple validation
// errors returned by ListProjectMembersInvite.ValidateAll() if the designated
// constraints aren't met.
type ListProjectMembersInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersInviteMultiError) AllErrors() []error { return m }

// ListProjectMembersInviteValidationError is the validation error returned by
// ListProjectMembersInvite.Validate if the designated constraints aren't met.
type ListProjectMembersInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersInviteValidationError) ErrorName() string {
	return "ListProjectMembersInviteValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersInviteValidationError{}

// Validate checks the field values on AddProjectMemberInvite with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberInvite with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberInviteMultiError, or nil if none found.
func (m *AddProjectMemberInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProjectMemberInviteMultiError(errors)
	}

	return nil
}

// AddProjectMemberInviteMultiError is an error wrapping multiple validation
// errors returned by AddProjectMemberInvite.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMemberInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberInviteMultiError) AllErrors() []error { return m }

// AddProjectMemberInviteValidationError is the validation error returned by
// AddProjectMemberInvite.Validate if the designated constraints aren't met.
type AddProjectMemberInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberInviteValidationError) ErrorName() string {
	return "AddProjectMemberInviteValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberInviteValidationError{}

// Validate checks the field values on DeleteProjectMemberInvite with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectMemberInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectMemberInvite with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectMemberInviteMultiError, or nil if none found.
func (m *DeleteProjectMemberInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectMemberInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectMemberInviteMultiError(errors)
	}

	return nil
}

// DeleteProjectMemberInviteMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectMemberInvite.ValidateAll() if the
// designated constraints aren't met.
type DeleteProjectMemberInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectMemberInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectMemberInviteMultiError) AllErrors() []error { return m }

// DeleteProjectMemberInviteValidationError is the validation error returned by
// DeleteProjectMemberInvite.Validate if the designated constraints aren't met.
type DeleteProjectMemberInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectMemberInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectMemberInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectMemberInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectMemberInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectMemberInviteValidationError) ErrorName() string {
	return "DeleteProjectMemberInviteValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectMemberInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectMemberInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectMemberInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectMemberInviteValidationError{}

// Validate checks the field values on ProjectMemberInviteActivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectMemberInviteActivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMemberInviteActivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectMemberInviteActivateMultiError, or nil if none found.
func (m *ProjectMemberInviteActivate) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMemberInviteActivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectMemberInviteActivateMultiError(errors)
	}

	return nil
}

// ProjectMemberInviteActivateMultiError is an error wrapping multiple
// validation errors returned by ProjectMemberInviteActivate.ValidateAll() if
// the designated constraints aren't met.
type ProjectMemberInviteActivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMemberInviteActivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMemberInviteActivateMultiError) AllErrors() []error { return m }

// ProjectMemberInviteActivateValidationError is the validation error returned
// by ProjectMemberInviteActivate.Validate if the designated constraints
// aren't met.
type ProjectMemberInviteActivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMemberInviteActivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMemberInviteActivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMemberInviteActivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMemberInviteActivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMemberInviteActivateValidationError) ErrorName() string {
	return "ProjectMemberInviteActivateValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMemberInviteActivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMemberInviteActivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMemberInviteActivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMemberInviteActivateValidationError{}

// Validate checks the field values on ListServerMembers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListServerMembers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServerMembers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServerMembersMultiError, or nil if none found.
func (m *ListServerMembers) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServerMembers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListServerMembersMultiError(errors)
	}

	return nil
}

// ListServerMembersMultiError is an error wrapping multiple validation errors
// returned by ListServerMembers.ValidateAll() if the designated constraints
// aren't met.
type ListServerMembersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServerMembersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServerMembersMultiError) AllErrors() []error { return m }

// ListServerMembersValidationError is the validation error returned by
// ListServerMembers.Validate if the designated constraints aren't met.
type ListServerMembersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServerMembersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServerMembersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServerMembersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServerMembersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServerMembersValidationError) ErrorName() string {
	return "ListServerMembersValidationError"
}

// Error satisfies the builtin error interface
func (e ListServerMembersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServerMembers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServerMembersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServerMembersValidationError{}

// Validate checks the field values on ServerMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerMemberMultiError, or
// nil if none found.
func (m *ServerMember) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerMemberMultiError(errors)
	}

	return nil
}

// ServerMemberMultiError is an error wrapping multiple validation errors
// returned by ServerMember.ValidateAll() if the designated constraints aren't met.
type ServerMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMemberMultiError) AllErrors() []error { return m }

// ServerMemberValidationError is the validation error returned by
// ServerMember.Validate if the designated constraints aren't met.
type ServerMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMemberValidationError) ErrorName() string { return "ServerMemberValidationError" }

// Error satisfies the builtin error interface
func (e ServerMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMemberValidationError{}

// Validate checks the field values on AddServerMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServerMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerMemberMultiError, or nil if none found.
func (m *AddServerMember) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerMemberMultiError(errors)
	}

	return nil
}

// AddServerMemberMultiError is an error wrapping multiple validation errors
// returned by AddServerMember.ValidateAll() if the designated constraints
// aren't met.
type AddServerMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerMemberMultiError) AllErrors() []error { return m }

// AddServerMemberValidationError is the validation error returned by
// AddServerMember.Validate if the designated constraints aren't met.
type AddServerMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerMemberValidationError) ErrorName() string { return "AddServerMemberValidationError" }

// Error satisfies the builtin error interface
func (e AddServerMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerMemberValidationError{}

// Validate checks the field values on UpdateServerMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerMemberMultiError, or nil if none found.
func (m *UpdateServerMember) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerMemberMultiError(errors)
	}

	return nil
}

// UpdateServerMemberMultiError is an error wrapping multiple validation errors
// returned by UpdateServerMember.ValidateAll() if the designated constraints
// aren't met.
type UpdateServerMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMemberMultiError) AllErrors() []error { return m }

// UpdateServerMemberValidationError is the validation error returned by
// UpdateServerMember.Validate if the designated constraints aren't met.
type UpdateServerMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerMemberValidationError) ErrorName() string {
	return "UpdateServerMemberValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerMemberValidationError{}

// Validate checks the field values on DeleteServerMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerMemberMultiError, or nil if none found.
func (m *DeleteServerMember) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerMemberMultiError(errors)
	}

	return nil
}

// DeleteServerMemberMultiError is an error wrapping multiple validation errors
// returned by DeleteServerMember.ValidateAll() if the designated constraints
// aren't met.
type DeleteServerMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerMemberMultiError) AllErrors() []error { return m }

// DeleteServerMemberValidationError is the validation error returned by
// DeleteServerMember.Validate if the designated constraints aren't met.
type DeleteServerMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerMemberValidationError) ErrorName() string {
	return "DeleteServerMemberValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerMemberValidationError{}

// Validate checks the field values on UpdateServerMemberStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerMemberStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerMemberStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerMemberStatusMultiError, or nil if none found.
func (m *UpdateServerMemberStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerMemberStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerMemberStatusMultiError(errors)
	}

	return nil
}

// UpdateServerMemberStatusMultiError is an error wrapping multiple validation
// errors returned by UpdateServerMemberStatus.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerMemberStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMemberStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMemberStatusMultiError) AllErrors() []error { return m }

// UpdateServerMemberStatusValidationError is the validation error returned by
// UpdateServerMemberStatus.Validate if the designated constraints aren't met.
type UpdateServerMemberStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerMemberStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerMemberStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerMemberStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerMemberStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerMemberStatusValidationError) ErrorName() string {
	return "UpdateServerMemberStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerMemberStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerMemberStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerMemberStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerMemberStatusValidationError{}

// Validate checks the field values on MembersWithoutServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembersWithoutServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembersWithoutServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembersWithoutServerMultiError, or nil if none found.
func (m *MembersWithoutServer) ValidateAll() error {
	return m.validate(true)
}

func (m *MembersWithoutServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MembersWithoutServerMultiError(errors)
	}

	return nil
}

// MembersWithoutServerMultiError is an error wrapping multiple validation
// errors returned by MembersWithoutServer.ValidateAll() if the designated
// constraints aren't met.
type MembersWithoutServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembersWithoutServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembersWithoutServerMultiError) AllErrors() []error { return m }

// MembersWithoutServerValidationError is the validation error returned by
// MembersWithoutServer.Validate if the designated constraints aren't met.
type MembersWithoutServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembersWithoutServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembersWithoutServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembersWithoutServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembersWithoutServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembersWithoutServerValidationError) ErrorName() string {
	return "MembersWithoutServerValidationError"
}

// Error satisfies the builtin error interface
func (e MembersWithoutServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembersWithoutServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembersWithoutServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembersWithoutServerValidationError{}

// Validate checks the field values on UsersByName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsersByName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersByName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsersByNameMultiError, or
// nil if none found.
func (m *UsersByName) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersByName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UsersByNameMultiError(errors)
	}

	return nil
}

// UsersByNameMultiError is an error wrapping multiple validation errors
// returned by UsersByName.ValidateAll() if the designated constraints aren't met.
type UsersByNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersByNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersByNameMultiError) AllErrors() []error { return m }

// UsersByNameValidationError is the validation error returned by
// UsersByName.Validate if the designated constraints aren't met.
type UsersByNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersByNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersByNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersByNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersByNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersByNameValidationError) ErrorName() string { return "UsersByNameValidationError" }

// Error satisfies the builtin error interface
func (e UsersByNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersByName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersByNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersByNameValidationError{}

// Validate checks the field values on ListProjectMembers_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembers_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembers_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembers_RequestMultiError, or nil if none found.
func (m *ListProjectMembers_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembers_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListProjectMembers_RequestMultiError(errors)
	}

	return nil
}

// ListProjectMembers_RequestMultiError is an error wrapping multiple
// validation errors returned by ListProjectMembers_Request.ValidateAll() if
// the designated constraints aren't met.
type ListProjectMembers_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembers_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembers_RequestMultiError) AllErrors() []error { return m }

// ListProjectMembers_RequestValidationError is the validation error returned
// by ListProjectMembers_Request.Validate if the designated constraints aren't met.
type ListProjectMembers_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembers_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembers_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembers_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembers_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembers_RequestValidationError) ErrorName() string {
	return "ListProjectMembers_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembers_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembers_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembers_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembers_RequestValidationError{}

// Validate checks the field values on ListProjectMembers_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembers_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembers_ResponseMultiError, or nil if none found.
func (m *ListProjectMembers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectMembers_ResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectMembers_ResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMembers_ResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectMembers_ResponseMultiError(errors)
	}

	return nil
}

// ListProjectMembers_ResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectMembers_Response.ValidateAll() if
// the designated constraints aren't met.
type ListProjectMembers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembers_ResponseMultiError) AllErrors() []error { return m }

// ListProjectMembers_ResponseValidationError is the validation error returned
// by ListProjectMembers_Response.Validate if the designated constraints
// aren't met.
type ListProjectMembers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembers_ResponseValidationError) ErrorName() string {
	return "ListProjectMembers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembers_ResponseValidationError{}

// Validate checks the field values on ProjectMember_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMember_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectMember_RequestMultiError, or nil if none found.
func (m *ProjectMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = ProjectMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ProjectMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MemberId

	if len(errors) > 0 {
		return ProjectMember_RequestMultiError(errors)
	}

	return nil
}

func (m *ProjectMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProjectMember_RequestMultiError is an error wrapping multiple validation
// errors returned by ProjectMember_Request.ValidateAll() if the designated
// constraints aren't met.
type ProjectMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMember_RequestMultiError) AllErrors() []error { return m }

// ProjectMember_RequestValidationError is the validation error returned by
// ProjectMember_Request.Validate if the designated constraints aren't met.
type ProjectMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMember_RequestValidationError) ErrorName() string {
	return "ProjectMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMember_RequestValidationError{}

// Validate checks the field values on ProjectMember_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMember_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectMember_ResponseMultiError, or nil if none found.
func (m *ProjectMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for OwnerName

	// no validation rules for ProjectId

	// no validation rules for ProjectName

	// no validation rules for MemberId

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for Role

	// no validation rules for Active

	// no validation rules for Online

	// no validation rules for ServersCount

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectMember_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectMember_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectMember_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectMember_ResponseMultiError(errors)
	}

	return nil
}

// ProjectMember_ResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectMember_Response.ValidateAll() if the designated
// constraints aren't met.
type ProjectMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMember_ResponseMultiError) AllErrors() []error { return m }

// ProjectMember_ResponseValidationError is the validation error returned by
// ProjectMember_Response.Validate if the designated constraints aren't met.
type ProjectMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMember_ResponseValidationError) ErrorName() string {
	return "ProjectMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMember_ResponseValidationError{}

// Validate checks the field values on AddProjectMember_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMember_RequestMultiError, or nil if none found.
func (m *AddProjectMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = AddProjectMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddProjectMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = AddProjectMember_RequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Active

	if len(errors) > 0 {
		return AddProjectMember_RequestMultiError(errors)
	}

	return nil
}

func (m *AddProjectMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddProjectMember_RequestMultiError is an error wrapping multiple validation
// errors returned by AddProjectMember_Request.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMember_RequestMultiError) AllErrors() []error { return m }

// AddProjectMember_RequestValidationError is the validation error returned by
// AddProjectMember_Request.Validate if the designated constraints aren't met.
type AddProjectMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMember_RequestValidationError) ErrorName() string {
	return "AddProjectMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMember_RequestValidationError{}

// Validate checks the field values on AddProjectMember_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMember_ResponseMultiError, or nil if none found.
func (m *AddProjectMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if len(errors) > 0 {
		return AddProjectMember_ResponseMultiError(errors)
	}

	return nil
}

// AddProjectMember_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddProjectMember_Response.ValidateAll() if the
// designated constraints aren't met.
type AddProjectMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMember_ResponseMultiError) AllErrors() []error { return m }

// AddProjectMember_ResponseValidationError is the validation error returned by
// AddProjectMember_Response.Validate if the designated constraints aren't met.
type AddProjectMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMember_ResponseValidationError) ErrorName() string {
	return "AddProjectMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMember_ResponseValidationError{}

// Validate checks the field values on UpdateProjectMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectMember_RequestMultiError, or nil if none found.
func (m *UpdateProjectMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = UpdateProjectMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateProjectMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMemberId()); err != nil {
		err = UpdateProjectMember_RequestValidationError{
			field:  "MemberId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Active

	if len(errors) > 0 {
		return UpdateProjectMember_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateProjectMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateProjectMember_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectMember_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectMember_RequestMultiError) AllErrors() []error { return m }

// UpdateProjectMember_RequestValidationError is the validation error returned
// by UpdateProjectMember_Request.Validate if the designated constraints
// aren't met.
type UpdateProjectMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMember_RequestValidationError) ErrorName() string {
	return "UpdateProjectMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMember_RequestValidationError{}

// Validate checks the field values on UpdateProjectMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectMember_ResponseMultiError, or nil if none found.
func (m *UpdateProjectMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectMember_ResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectMember_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectMember_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectMember_ResponseMultiError) AllErrors() []error { return m }

// UpdateProjectMember_ResponseValidationError is the validation error returned
// by UpdateProjectMember_Response.Validate if the designated constraints
// aren't met.
type UpdateProjectMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMember_ResponseValidationError) ErrorName() string {
	return "UpdateProjectMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMember_ResponseValidationError{}

// Validate checks the field values on DeleteProjectMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectMember_RequestMultiError, or nil if none found.
func (m *DeleteProjectMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = DeleteProjectMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteProjectMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMemberId()); err != nil {
		err = DeleteProjectMember_RequestValidationError{
			field:  "MemberId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProjectMember_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteProjectMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteProjectMember_RequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectMember_Request.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectMember_RequestMultiError) AllErrors() []error { return m }

// DeleteProjectMember_RequestValidationError is the validation error returned
// by DeleteProjectMember_Request.Validate if the designated constraints
// aren't met.
type DeleteProjectMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectMember_RequestValidationError) ErrorName() string {
	return "DeleteProjectMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectMember_RequestValidationError{}

// Validate checks the field values on DeleteProjectMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectMember_ResponseMultiError, or nil if none found.
func (m *DeleteProjectMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectMember_ResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectMember_ResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectMember_Response.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectMember_ResponseMultiError) AllErrors() []error { return m }

// DeleteProjectMember_ResponseValidationError is the validation error returned
// by DeleteProjectMember_Response.Validate if the designated constraints
// aren't met.
type DeleteProjectMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectMember_ResponseValidationError) ErrorName() string {
	return "DeleteProjectMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectMember_ResponseValidationError{}

// Validate checks the field values on UpdateProjectMemberStatus_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateProjectMemberStatus_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectMemberStatus_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProjectMemberStatus_RequestMultiError, or nil if none found.
func (m *UpdateProjectMemberStatus_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectMemberStatus_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = UpdateProjectMemberStatus_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateProjectMemberStatus_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMemberId()); err != nil {
		err = UpdateProjectMemberStatus_RequestValidationError{
			field:  "MemberId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateProjectMemberStatus_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateProjectMemberStatus_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateProjectMemberStatus_RequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProjectMemberStatus_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectMemberStatus_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectMemberStatus_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectMemberStatus_RequestMultiError) AllErrors() []error { return m }

// UpdateProjectMemberStatus_RequestValidationError is the validation error
// returned by UpdateProjectMemberStatus_Request.Validate if the designated
// constraints aren't met.
type UpdateProjectMemberStatus_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMemberStatus_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMemberStatus_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMemberStatus_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMemberStatus_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMemberStatus_RequestValidationError) ErrorName() string {
	return "UpdateProjectMemberStatus_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMemberStatus_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMemberStatus_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMemberStatus_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMemberStatus_RequestValidationError{}

// Validate checks the field values on UpdateProjectMemberStatus_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateProjectMemberStatus_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectMemberStatus_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProjectMemberStatus_ResponseMultiError, or nil if none found.
func (m *UpdateProjectMemberStatus_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectMemberStatus_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectMemberStatus_ResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectMemberStatus_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProjectMemberStatus_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectMemberStatus_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectMemberStatus_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectMemberStatus_ResponseMultiError) AllErrors() []error { return m }

// UpdateProjectMemberStatus_ResponseValidationError is the validation error
// returned by UpdateProjectMemberStatus_Response.Validate if the designated
// constraints aren't met.
type UpdateProjectMemberStatus_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMemberStatus_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMemberStatus_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMemberStatus_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMemberStatus_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMemberStatus_ResponseValidationError) ErrorName() string {
	return "UpdateProjectMemberStatus_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMemberStatus_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMemberStatus_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMemberStatus_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMemberStatus_ResponseValidationError{}

// Validate checks the field values on MemberByID_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberByID_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberByID_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberByID_RequestMultiError, or nil if none found.
func (m *MemberByID_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberByID_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return MemberByID_RequestMultiError(errors)
	}

	return nil
}

// MemberByID_RequestMultiError is an error wrapping multiple validation errors
// returned by MemberByID_Request.ValidateAll() if the designated constraints
// aren't met.
type MemberByID_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberByID_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberByID_RequestMultiError) AllErrors() []error { return m }

// MemberByID_RequestValidationError is the validation error returned by
// MemberByID_Request.Validate if the designated constraints aren't met.
type MemberByID_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberByID_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberByID_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberByID_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberByID_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberByID_RequestValidationError) ErrorName() string {
	return "MemberByID_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberByID_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberByID_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberByID_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberByID_RequestValidationError{}

// Validate checks the field values on MemberByID_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberByID_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberByID_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberByID_ResponseMultiError, or nil if none found.
func (m *MemberByID_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberByID_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberByID_ResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberByID_ResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberByID_ResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberByID_ResponseMultiError(errors)
	}

	return nil
}

// MemberByID_ResponseMultiError is an error wrapping multiple validation
// errors returned by MemberByID_Response.ValidateAll() if the designated
// constraints aren't met.
type MemberByID_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberByID_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberByID_ResponseMultiError) AllErrors() []error { return m }

// MemberByID_ResponseValidationError is the validation error returned by
// MemberByID_Response.Validate if the designated constraints aren't met.
type MemberByID_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberByID_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberByID_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberByID_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberByID_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberByID_ResponseValidationError) ErrorName() string {
	return "MemberByID_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberByID_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberByID_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberByID_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberByID_ResponseValidationError{}

// Validate checks the field values on UsersWithoutProject_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UsersWithoutProject_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersWithoutProject_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UsersWithoutProject_RequestMultiError, or nil if none found.
func (m *UsersWithoutProject_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersWithoutProject_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for ProjectId

	// no validation rules for Name

	if len(errors) > 0 {
		return UsersWithoutProject_RequestMultiError(errors)
	}

	return nil
}

// UsersWithoutProject_RequestMultiError is an error wrapping multiple
// validation errors returned by UsersWithoutProject_Request.ValidateAll() if
// the designated constraints aren't met.
type UsersWithoutProject_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersWithoutProject_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersWithoutProject_RequestMultiError) AllErrors() []error { return m }

// UsersWithoutProject_RequestValidationError is the validation error returned
// by UsersWithoutProject_Request.Validate if the designated constraints
// aren't met.
type UsersWithoutProject_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersWithoutProject_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersWithoutProject_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersWithoutProject_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersWithoutProject_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersWithoutProject_RequestValidationError) ErrorName() string {
	return "UsersWithoutProject_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UsersWithoutProject_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersWithoutProject_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersWithoutProject_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersWithoutProject_RequestValidationError{}

// Validate checks the field values on UsersWithoutProject_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UsersWithoutProject_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersWithoutProject_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UsersWithoutProject_ResponseMultiError, or nil if none found.
func (m *UsersWithoutProject_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersWithoutProject_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersWithoutProject_ResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersWithoutProject_ResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersWithoutProject_ResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UsersWithoutProject_ResponseMultiError(errors)
	}

	return nil
}

// UsersWithoutProject_ResponseMultiError is an error wrapping multiple
// validation errors returned by UsersWithoutProject_Response.ValidateAll() if
// the designated constraints aren't met.
type UsersWithoutProject_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersWithoutProject_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersWithoutProject_ResponseMultiError) AllErrors() []error { return m }

// UsersWithoutProject_ResponseValidationError is the validation error returned
// by UsersWithoutProject_Response.Validate if the designated constraints
// aren't met.
type UsersWithoutProject_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersWithoutProject_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersWithoutProject_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersWithoutProject_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersWithoutProject_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersWithoutProject_ResponseValidationError) ErrorName() string {
	return "UsersWithoutProject_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UsersWithoutProject_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersWithoutProject_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersWithoutProject_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersWithoutProject_ResponseValidationError{}

// Validate checks the field values on UsersWithoutProject_Response_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UsersWithoutProject_Response_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersWithoutProject_Response_User
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UsersWithoutProject_Response_UserMultiError, or nil if none found.
func (m *UsersWithoutProject_Response_User) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersWithoutProject_Response_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return UsersWithoutProject_Response_UserMultiError(errors)
	}

	return nil
}

// UsersWithoutProject_Response_UserMultiError is an error wrapping multiple
// validation errors returned by
// UsersWithoutProject_Response_User.ValidateAll() if the designated
// constraints aren't met.
type UsersWithoutProject_Response_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersWithoutProject_Response_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersWithoutProject_Response_UserMultiError) AllErrors() []error { return m }

// UsersWithoutProject_Response_UserValidationError is the validation error
// returned by UsersWithoutProject_Response_User.Validate if the designated
// constraints aren't met.
type UsersWithoutProject_Response_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersWithoutProject_Response_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersWithoutProject_Response_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersWithoutProject_Response_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersWithoutProject_Response_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersWithoutProject_Response_UserValidationError) ErrorName() string {
	return "UsersWithoutProject_Response_UserValidationError"
}

// Error satisfies the builtin error interface
func (e UsersWithoutProject_Response_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersWithoutProject_Response_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersWithoutProject_Response_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersWithoutProject_Response_UserValidationError{}

// Validate checks the field values on ListProjectMembersInvite_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectMembersInvite_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersInvite_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectMembersInvite_RequestMultiError, or nil if none found.
func (m *ListProjectMembersInvite_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersInvite_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = ListProjectMembersInvite_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ListProjectMembersInvite_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProjectMembersInvite_RequestMultiError(errors)
	}

	return nil
}

func (m *ListProjectMembersInvite_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListProjectMembersInvite_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectMembersInvite_Request.ValidateAll() if the designated
// constraints aren't met.
type ListProjectMembersInvite_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersInvite_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersInvite_RequestMultiError) AllErrors() []error { return m }

// ListProjectMembersInvite_RequestValidationError is the validation error
// returned by ListProjectMembersInvite_Request.Validate if the designated
// constraints aren't met.
type ListProjectMembersInvite_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersInvite_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersInvite_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersInvite_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersInvite_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersInvite_RequestValidationError) ErrorName() string {
	return "ListProjectMembersInvite_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersInvite_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersInvite_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersInvite_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersInvite_RequestValidationError{}

// Validate checks the field values on ListProjectMembersInvite_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectMembersInvite_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersInvite_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectMembersInvite_ResponseMultiError, or nil if none found.
func (m *ListProjectMembersInvite_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersInvite_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectMembersInvite_ResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectMembersInvite_ResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMembersInvite_ResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectMembersInvite_ResponseMultiError(errors)
	}

	return nil
}

// ListProjectMembersInvite_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectMembersInvite_Response.ValidateAll() if the designated
// constraints aren't met.
type ListProjectMembersInvite_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersInvite_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersInvite_ResponseMultiError) AllErrors() []error { return m }

// ListProjectMembersInvite_ResponseValidationError is the validation error
// returned by ListProjectMembersInvite_Response.Validate if the designated
// constraints aren't met.
type ListProjectMembersInvite_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersInvite_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersInvite_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersInvite_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersInvite_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersInvite_ResponseValidationError) ErrorName() string {
	return "ListProjectMembersInvite_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersInvite_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersInvite_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersInvite_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersInvite_ResponseValidationError{}

// Validate checks the field values on ListProjectMembersInvite_Invites with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectMembersInvite_Invites) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersInvite_Invites with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectMembersInvite_InvitesMultiError, or nil if none found.
func (m *ListProjectMembersInvite_Invites) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersInvite_Invites) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProjectMembersInvite_InvitesValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProjectMembersInvite_InvitesValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectMembersInvite_InvitesValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListProjectMembersInvite_InvitesMultiError(errors)
	}

	return nil
}

// ListProjectMembersInvite_InvitesMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectMembersInvite_Invites.ValidateAll() if the designated
// constraints aren't met.
type ListProjectMembersInvite_InvitesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersInvite_InvitesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersInvite_InvitesMultiError) AllErrors() []error { return m }

// ListProjectMembersInvite_InvitesValidationError is the validation error
// returned by ListProjectMembersInvite_Invites.Validate if the designated
// constraints aren't met.
type ListProjectMembersInvite_InvitesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersInvite_InvitesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersInvite_InvitesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersInvite_InvitesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersInvite_InvitesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersInvite_InvitesValidationError) ErrorName() string {
	return "ListProjectMembersInvite_InvitesValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersInvite_InvitesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersInvite_Invites.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersInvite_InvitesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersInvite_InvitesValidationError{}

// Validate checks the field values on AddProjectMemberInvite_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberInvite_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberInvite_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddProjectMemberInvite_RequestMultiError, or nil if none found.
func (m *AddProjectMemberInvite_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberInvite_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = AddProjectMemberInvite_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddProjectMemberInvite_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 3 || l > 20 {
		err := AddProjectMemberInvite_RequestValidationError{
			field:  "UserName",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddProjectMemberInvite_Request_UserName_Pattern.MatchString(m.GetUserName()) {
		err := AddProjectMemberInvite_RequestValidationError{
			field:  "UserName",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUserSurname()); l < 3 || l > 20 {
		err := AddProjectMemberInvite_RequestValidationError{
			field:  "UserSurname",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddProjectMemberInvite_Request_UserSurname_Pattern.MatchString(m.GetUserSurname()) {
		err := AddProjectMemberInvite_RequestValidationError{
			field:  "UserSurname",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddProjectMemberInvite_RequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProjectMemberInvite_RequestMultiError(errors)
	}

	return nil
}

func (m *AddProjectMemberInvite_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddProjectMemberInvite_Request) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *AddProjectMemberInvite_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddProjectMemberInvite_RequestMultiError is an error wrapping multiple
// validation errors returned by AddProjectMemberInvite_Request.ValidateAll()
// if the designated constraints aren't met.
type AddProjectMemberInvite_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberInvite_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberInvite_RequestMultiError) AllErrors() []error { return m }

// AddProjectMemberInvite_RequestValidationError is the validation error
// returned by AddProjectMemberInvite_Request.Validate if the designated
// constraints aren't met.
type AddProjectMemberInvite_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberInvite_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberInvite_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberInvite_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberInvite_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberInvite_RequestValidationError) ErrorName() string {
	return "AddProjectMemberInvite_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberInvite_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberInvite_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberInvite_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberInvite_RequestValidationError{}

var _AddProjectMemberInvite_Request_UserName_Pattern = regexp.MustCompile("^[a-z0-9]+$")

var _AddProjectMemberInvite_Request_UserSurname_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on AddProjectMemberInvite_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberInvite_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberInvite_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddProjectMemberInvite_ResponseMultiError, or nil if none found.
func (m *AddProjectMemberInvite_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberInvite_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Invite

	if len(errors) > 0 {
		return AddProjectMemberInvite_ResponseMultiError(errors)
	}

	return nil
}

// AddProjectMemberInvite_ResponseMultiError is an error wrapping multiple
// validation errors returned by AddProjectMemberInvite_Response.ValidateAll()
// if the designated constraints aren't met.
type AddProjectMemberInvite_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberInvite_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberInvite_ResponseMultiError) AllErrors() []error { return m }

// AddProjectMemberInvite_ResponseValidationError is the validation error
// returned by AddProjectMemberInvite_Response.Validate if the designated
// constraints aren't met.
type AddProjectMemberInvite_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberInvite_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberInvite_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberInvite_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberInvite_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberInvite_ResponseValidationError) ErrorName() string {
	return "AddProjectMemberInvite_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberInvite_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberInvite_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberInvite_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberInvite_ResponseValidationError{}

// Validate checks the field values on DeleteProjectMemberInvite_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteProjectMemberInvite_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectMemberInvite_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProjectMemberInvite_RequestMultiError, or nil if none found.
func (m *DeleteProjectMemberInvite_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectMemberInvite_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = DeleteProjectMemberInvite_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteProjectMemberInvite_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetInviteId()); err != nil {
		err = DeleteProjectMemberInvite_RequestValidationError{
			field:  "InviteId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProjectMemberInvite_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteProjectMemberInvite_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteProjectMemberInvite_RequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProjectMemberInvite_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectMemberInvite_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectMemberInvite_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectMemberInvite_RequestMultiError) AllErrors() []error { return m }

// DeleteProjectMemberInvite_RequestValidationError is the validation error
// returned by DeleteProjectMemberInvite_Request.Validate if the designated
// constraints aren't met.
type DeleteProjectMemberInvite_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectMemberInvite_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectMemberInvite_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectMemberInvite_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectMemberInvite_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectMemberInvite_RequestValidationError) ErrorName() string {
	return "DeleteProjectMemberInvite_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectMemberInvite_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectMemberInvite_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectMemberInvite_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectMemberInvite_RequestValidationError{}

// Validate checks the field values on DeleteProjectMemberInvite_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteProjectMemberInvite_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectMemberInvite_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProjectMemberInvite_ResponseMultiError, or nil if none found.
func (m *DeleteProjectMemberInvite_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectMemberInvite_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectMemberInvite_ResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectMemberInvite_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProjectMemberInvite_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectMemberInvite_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectMemberInvite_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectMemberInvite_ResponseMultiError) AllErrors() []error { return m }

// DeleteProjectMemberInvite_ResponseValidationError is the validation error
// returned by DeleteProjectMemberInvite_Response.Validate if the designated
// constraints aren't met.
type DeleteProjectMemberInvite_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectMemberInvite_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectMemberInvite_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectMemberInvite_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectMemberInvite_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectMemberInvite_ResponseValidationError) ErrorName() string {
	return "DeleteProjectMemberInvite_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectMemberInvite_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectMemberInvite_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectMemberInvite_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectMemberInvite_ResponseValidationError{}

// Validate checks the field values on ProjectMemberInviteActivate_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProjectMemberInviteActivate_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMemberInviteActivate_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProjectMemberInviteActivate_RequestMultiError, or nil if none found.
func (m *ProjectMemberInviteActivate_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMemberInviteActivate_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetInvite()); err != nil {
		err = ProjectMemberInviteActivate_RequestValidationError{
			field:  "Invite",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ProjectMemberInviteActivate_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ProjectMemberInviteActivate_RequestMultiError(errors)
	}

	return nil
}

func (m *ProjectMemberInviteActivate_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProjectMemberInviteActivate_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ProjectMemberInviteActivate_Request.ValidateAll() if the designated
// constraints aren't met.
type ProjectMemberInviteActivate_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMemberInviteActivate_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMemberInviteActivate_RequestMultiError) AllErrors() []error { return m }

// ProjectMemberInviteActivate_RequestValidationError is the validation error
// returned by ProjectMemberInviteActivate_Request.Validate if the designated
// constraints aren't met.
type ProjectMemberInviteActivate_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMemberInviteActivate_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMemberInviteActivate_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMemberInviteActivate_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMemberInviteActivate_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMemberInviteActivate_RequestValidationError) ErrorName() string {
	return "ProjectMemberInviteActivate_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMemberInviteActivate_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMemberInviteActivate_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMemberInviteActivate_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMemberInviteActivate_RequestValidationError{}

// Validate checks the field values on ProjectMemberInviteActivate_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ProjectMemberInviteActivate_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMemberInviteActivate_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProjectMemberInviteActivate_ResponseMultiError, or nil if none found.
func (m *ProjectMemberInviteActivate_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMemberInviteActivate_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Email

	if len(errors) > 0 {
		return ProjectMemberInviteActivate_ResponseMultiError(errors)
	}

	return nil
}

// ProjectMemberInviteActivate_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// ProjectMemberInviteActivate_Response.ValidateAll() if the designated
// constraints aren't met.
type ProjectMemberInviteActivate_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMemberInviteActivate_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMemberInviteActivate_ResponseMultiError) AllErrors() []error { return m }

// ProjectMemberInviteActivate_ResponseValidationError is the validation error
// returned by ProjectMemberInviteActivate_Response.Validate if the designated
// constraints aren't met.
type ProjectMemberInviteActivate_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMemberInviteActivate_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMemberInviteActivate_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMemberInviteActivate_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMemberInviteActivate_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMemberInviteActivate_ResponseValidationError) ErrorName() string {
	return "ProjectMemberInviteActivate_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMemberInviteActivate_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMemberInviteActivate_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMemberInviteActivate_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMemberInviteActivate_ResponseValidationError{}

// Validate checks the field values on ListServerMembers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServerMembers_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServerMembers_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServerMembers_RequestMultiError, or nil if none found.
func (m *ListServerMembers_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServerMembers_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = ListServerMembers_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ListServerMembers_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ListServerMembers_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListServerMembers_RequestMultiError(errors)
	}

	return nil
}

func (m *ListServerMembers_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListServerMembers_RequestMultiError is an error wrapping multiple validation
// errors returned by ListServerMembers_Request.ValidateAll() if the
// designated constraints aren't met.
type ListServerMembers_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServerMembers_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServerMembers_RequestMultiError) AllErrors() []error { return m }

// ListServerMembers_RequestValidationError is the validation error returned by
// ListServerMembers_Request.Validate if the designated constraints aren't met.
type ListServerMembers_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServerMembers_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServerMembers_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServerMembers_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServerMembers_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServerMembers_RequestValidationError) ErrorName() string {
	return "ListServerMembers_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServerMembers_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServerMembers_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServerMembers_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServerMembers_RequestValidationError{}

// Validate checks the field values on ListServerMembers_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServerMembers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServerMembers_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServerMembers_ResponseMultiError, or nil if none found.
func (m *ListServerMembers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServerMembers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServerMembers_ResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServerMembers_ResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServerMembers_ResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServerMembers_ResponseMultiError(errors)
	}

	return nil
}

// ListServerMembers_ResponseMultiError is an error wrapping multiple
// validation errors returned by ListServerMembers_Response.ValidateAll() if
// the designated constraints aren't met.
type ListServerMembers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServerMembers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServerMembers_ResponseMultiError) AllErrors() []error { return m }

// ListServerMembers_ResponseValidationError is the validation error returned
// by ListServerMembers_Response.Validate if the designated constraints aren't met.
type ListServerMembers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServerMembers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServerMembers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServerMembers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServerMembers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServerMembers_ResponseValidationError) ErrorName() string {
	return "ListServerMembers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServerMembers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServerMembers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServerMembers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServerMembers_ResponseValidationError{}

// Validate checks the field values on ServerMember_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMember_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerMember_RequestMultiError, or nil if none found.
func (m *ServerMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = ServerMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerMember_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MemberId

	if len(errors) > 0 {
		return ServerMember_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerMember_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerMember_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMember_RequestMultiError) AllErrors() []error { return m }

// ServerMember_RequestValidationError is the validation error returned by
// ServerMember_Request.Validate if the designated constraints aren't met.
type ServerMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMember_RequestValidationError) ErrorName() string {
	return "ServerMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMember_RequestValidationError{}

// Validate checks the field values on ServerMember_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMember_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerMember_ResponseMultiError, or nil if none found.
func (m *ServerMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for Active

	// no validation rules for Online

	if all {
		switch v := interface{}(m.GetLastActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerMember_ResponseValidationError{
					field:  "LastActivity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerMember_ResponseValidationError{
					field:  "LastActivity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerMember_ResponseValidationError{
				field:  "LastActivity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerMember_ResponseMultiError(errors)
	}

	return nil
}

// ServerMember_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerMember_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMember_ResponseMultiError) AllErrors() []error { return m }

// ServerMember_ResponseValidationError is the validation error returned by
// ServerMember_Response.Validate if the designated constraints aren't met.
type ServerMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMember_ResponseValidationError) ErrorName() string {
	return "ServerMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMember_ResponseValidationError{}

// Validate checks the field values on AddServerMember_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerMember_RequestMultiError, or nil if none found.
func (m *AddServerMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = AddServerMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddServerMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = AddServerMember_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MemberId

	// no validation rules for Active

	if len(errors) > 0 {
		return AddServerMember_RequestMultiError(errors)
	}

	return nil
}

func (m *AddServerMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddServerMember_RequestMultiError is an error wrapping multiple validation
// errors returned by AddServerMember_Request.ValidateAll() if the designated
// constraints aren't met.
type AddServerMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerMember_RequestMultiError) AllErrors() []error { return m }

// AddServerMember_RequestValidationError is the validation error returned by
// AddServerMember_Request.Validate if the designated constraints aren't met.
type AddServerMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerMember_RequestValidationError) ErrorName() string {
	return "AddServerMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerMember_RequestValidationError{}

// Validate checks the field values on AddServerMember_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerMember_ResponseMultiError, or nil if none found.
func (m *AddServerMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if len(errors) > 0 {
		return AddServerMember_ResponseMultiError(errors)
	}

	return nil
}

// AddServerMember_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddServerMember_Response.ValidateAll() if the designated
// constraints aren't met.
type AddServerMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerMember_ResponseMultiError) AllErrors() []error { return m }

// AddServerMember_ResponseValidationError is the validation error returned by
// AddServerMember_Response.Validate if the designated constraints aren't met.
type AddServerMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerMember_ResponseValidationError) ErrorName() string {
	return "AddServerMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerMember_ResponseValidationError{}

// Validate checks the field values on UpdateServerMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerMember_RequestMultiError, or nil if none found.
func (m *UpdateServerMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = UpdateServerMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServerMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerMember_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMemberId()); err != nil {
		err = UpdateServerMember_RequestValidationError{
			field:  "MemberId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Active

	if len(errors) > 0 {
		return UpdateServerMember_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerMember_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerMember_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMember_RequestMultiError) AllErrors() []error { return m }

// UpdateServerMember_RequestValidationError is the validation error returned
// by UpdateServerMember_Request.Validate if the designated constraints aren't met.
type UpdateServerMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerMember_RequestValidationError) ErrorName() string {
	return "UpdateServerMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerMember_RequestValidationError{}

// Validate checks the field values on UpdateServerMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerMember_ResponseMultiError, or nil if none found.
func (m *UpdateServerMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerMember_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerMember_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerMember_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMember_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerMember_ResponseValidationError is the validation error returned
// by UpdateServerMember_Response.Validate if the designated constraints
// aren't met.
type UpdateServerMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerMember_ResponseValidationError) ErrorName() string {
	return "UpdateServerMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerMember_ResponseValidationError{}

// Validate checks the field values on DeleteServerMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerMember_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerMember_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerMember_RequestMultiError, or nil if none found.
func (m *DeleteServerMember_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerMember_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = DeleteServerMember_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteServerMember_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = DeleteServerMember_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMemberId()); err != nil {
		err = DeleteServerMember_RequestValidationError{
			field:  "MemberId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServerMember_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteServerMember_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteServerMember_RequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServerMember_Request.ValidateAll() if
// the designated constraints aren't met.
type DeleteServerMember_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerMember_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerMember_RequestMultiError) AllErrors() []error { return m }

// DeleteServerMember_RequestValidationError is the validation error returned
// by DeleteServerMember_Request.Validate if the designated constraints aren't met.
type DeleteServerMember_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerMember_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerMember_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerMember_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerMember_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerMember_RequestValidationError) ErrorName() string {
	return "DeleteServerMember_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerMember_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerMember_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerMember_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerMember_RequestValidationError{}

// Validate checks the field values on DeleteServerMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerMember_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerMember_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerMember_ResponseMultiError, or nil if none found.
func (m *DeleteServerMember_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerMember_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerMember_ResponseMultiError(errors)
	}

	return nil
}

// DeleteServerMember_ResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteServerMember_Response.ValidateAll() if
// the designated constraints aren't met.
type DeleteServerMember_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerMember_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerMember_ResponseMultiError) AllErrors() []error { return m }

// DeleteServerMember_ResponseValidationError is the validation error returned
// by DeleteServerMember_Response.Validate if the designated constraints
// aren't met.
type DeleteServerMember_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerMember_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerMember_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerMember_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerMember_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerMember_ResponseValidationError) ErrorName() string {
	return "DeleteServerMember_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerMember_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerMember_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerMember_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerMember_ResponseValidationError{}

// Validate checks the field values on UpdateServerMemberStatus_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerMemberStatus_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerMemberStatus_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServerMemberStatus_RequestMultiError, or nil if none found.
func (m *UpdateServerMemberStatus_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerMemberStatus_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = UpdateServerMemberStatus_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServerMemberStatus_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMemberId()); err != nil {
		err = UpdateServerMemberStatus_RequestValidationError{
			field:  "MemberId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerMemberStatus_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateServerMemberStatus_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerMemberStatus_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerMemberStatus_RequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerMemberStatus_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerMemberStatus_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMemberStatus_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMemberStatus_RequestMultiError) AllErrors() []error { return m }

// UpdateServerMemberStatus_RequestValidationError is the validation error
// returned by UpdateServerMemberStatus_Request.Validate if the designated
// constraints aren't met.
type UpdateServerMemberStatus_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerMemberStatus_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerMemberStatus_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerMemberStatus_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerMemberStatus_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerMemberStatus_RequestValidationError) ErrorName() string {
	return "UpdateServerMemberStatus_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerMemberStatus_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerMemberStatus_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerMemberStatus_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerMemberStatus_RequestValidationError{}

// Validate checks the field values on UpdateServerMemberStatus_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerMemberStatus_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerMemberStatus_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateServerMemberStatus_ResponseMultiError, or nil if none found.
func (m *UpdateServerMemberStatus_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerMemberStatus_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerMemberStatus_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerMemberStatus_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerMemberStatus_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerMemberStatus_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMemberStatus_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMemberStatus_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerMemberStatus_ResponseValidationError is the validation error
// returned by UpdateServerMemberStatus_Response.Validate if the designated
// constraints aren't met.
type UpdateServerMemberStatus_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerMemberStatus_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerMemberStatus_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerMemberStatus_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerMemberStatus_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerMemberStatus_ResponseValidationError) ErrorName() string {
	return "UpdateServerMemberStatus_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerMemberStatus_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerMemberStatus_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerMemberStatus_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerMemberStatus_ResponseValidationError{}

// Validate checks the field values on MembersWithoutServer_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembersWithoutServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembersWithoutServer_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembersWithoutServer_RequestMultiError, or nil if none found.
func (m *MembersWithoutServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MembersWithoutServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = MembersWithoutServer_RequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = MembersWithoutServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = MembersWithoutServer_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return MembersWithoutServer_RequestMultiError(errors)
	}

	return nil
}

func (m *MembersWithoutServer_Request) _validateUuid(uuid string) error {
	if matched := _member_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MembersWithoutServer_RequestMultiError is an error wrapping multiple
// validation errors returned by MembersWithoutServer_Request.ValidateAll() if
// the designated constraints aren't met.
type MembersWithoutServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembersWithoutServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembersWithoutServer_RequestMultiError) AllErrors() []error { return m }

// MembersWithoutServer_RequestValidationError is the validation error returned
// by MembersWithoutServer_Request.Validate if the designated constraints
// aren't met.
type MembersWithoutServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembersWithoutServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembersWithoutServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembersWithoutServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembersWithoutServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembersWithoutServer_RequestValidationError) ErrorName() string {
	return "MembersWithoutServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembersWithoutServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembersWithoutServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembersWithoutServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembersWithoutServer_RequestValidationError{}

// Validate checks the field values on MembersWithoutServer_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembersWithoutServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembersWithoutServer_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MembersWithoutServer_ResponseMultiError, or nil if none found.
func (m *MembersWithoutServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *MembersWithoutServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MembersWithoutServer_ResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MembersWithoutServer_ResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MembersWithoutServer_ResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MembersWithoutServer_ResponseMultiError(errors)
	}

	return nil
}

// MembersWithoutServer_ResponseMultiError is an error wrapping multiple
// validation errors returned by MembersWithoutServer_Response.ValidateAll()
// if the designated constraints aren't met.
type MembersWithoutServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembersWithoutServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembersWithoutServer_ResponseMultiError) AllErrors() []error { return m }

// MembersWithoutServer_ResponseValidationError is the validation error
// returned by MembersWithoutServer_Response.Validate if the designated
// constraints aren't met.
type MembersWithoutServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembersWithoutServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembersWithoutServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembersWithoutServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembersWithoutServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembersWithoutServer_ResponseValidationError) ErrorName() string {
	return "MembersWithoutServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembersWithoutServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembersWithoutServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembersWithoutServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembersWithoutServer_ResponseValidationError{}

// Validate checks the field values on UsersByName_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UsersByName_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersByName_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UsersByName_RequestMultiError, or nil if none found.
func (m *UsersByName_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersByName_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return UsersByName_RequestMultiError(errors)
	}

	return nil
}

// UsersByName_RequestMultiError is an error wrapping multiple validation
// errors returned by UsersByName_Request.ValidateAll() if the designated
// constraints aren't met.
type UsersByName_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersByName_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersByName_RequestMultiError) AllErrors() []error { return m }

// UsersByName_RequestValidationError is the validation error returned by
// UsersByName_Request.Validate if the designated constraints aren't met.
type UsersByName_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersByName_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersByName_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersByName_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersByName_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersByName_RequestValidationError) ErrorName() string {
	return "UsersByName_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UsersByName_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersByName_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersByName_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersByName_RequestValidationError{}

// Validate checks the field values on UsersByName_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UsersByName_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersByName_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UsersByName_ResponseMultiError, or nil if none found.
func (m *UsersByName_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersByName_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersByName_ResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersByName_ResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersByName_ResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UsersByName_ResponseMultiError(errors)
	}

	return nil
}

// UsersByName_ResponseMultiError is an error wrapping multiple validation
// errors returned by UsersByName_Response.ValidateAll() if the designated
// constraints aren't met.
type UsersByName_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersByName_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersByName_ResponseMultiError) AllErrors() []error { return m }

// UsersByName_ResponseValidationError is the validation error returned by
// UsersByName_Response.Validate if the designated constraints aren't met.
type UsersByName_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersByName_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersByName_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersByName_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersByName_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersByName_ResponseValidationError) ErrorName() string {
	return "UsersByName_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UsersByName_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersByName_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersByName_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersByName_ResponseValidationError{}

// Validate checks the field values on UsersByName_Response_SearchUsersResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UsersByName_Response_SearchUsersResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UsersByName_Response_SearchUsersResult with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UsersByName_Response_SearchUsersResultMultiError, or nil if none found.
func (m *UsersByName_Response_SearchUsersResult) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersByName_Response_SearchUsersResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	// no validation rules for MemberName

	// no validation rules for Email

	if len(errors) > 0 {
		return UsersByName_Response_SearchUsersResultMultiError(errors)
	}

	return nil
}

// UsersByName_Response_SearchUsersResultMultiError is an error wrapping
// multiple validation errors returned by
// UsersByName_Response_SearchUsersResult.ValidateAll() if the designated
// constraints aren't met.
type UsersByName_Response_SearchUsersResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersByName_Response_SearchUsersResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersByName_Response_SearchUsersResultMultiError) AllErrors() []error { return m }

// UsersByName_Response_SearchUsersResultValidationError is the validation
// error returned by UsersByName_Response_SearchUsersResult.Validate if the
// designated constraints aren't met.
type UsersByName_Response_SearchUsersResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersByName_Response_SearchUsersResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersByName_Response_SearchUsersResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersByName_Response_SearchUsersResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersByName_Response_SearchUsersResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersByName_Response_SearchUsersResultValidationError) ErrorName() string {
	return "UsersByName_Response_SearchUsersResultValidationError"
}

// Error satisfies the builtin error interface
func (e UsersByName_Response_SearchUsersResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersByName_Response_SearchUsersResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersByName_Response_SearchUsersResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersByName_Response_SearchUsersResultValidationError{}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: member.proto

package member

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberHandlersClient is the client API for MemberHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberHandlersClient interface {
	// Project section
	ListProjectMembers(ctx context.Context, in *ListProjectMembers_Request, opts ...grpc.CallOption) (*ListProjectMembers_Response, error)
	ProjectMember(ctx context.Context, in *ProjectMember_Request, opts ...grpc.CallOption) (*ProjectMember_Response, error)
	AddProjectMember(ctx context.Context, in *AddProjectMember_Request, opts ...grpc.CallOption) (*AddProjectMember_Response, error)
	UpdateProjectMember(ctx context.Context, in *UpdateProjectMember_Request, opts ...grpc.CallOption) (*UpdateProjectMember_Response, error)
	DeleteProjectMember(ctx context.Context, in *DeleteProjectMember_Request, opts ...grpc.CallOption) (*DeleteProjectMember_Response, error)
	UpdateProjectMemberStatus(ctx context.Context, in *UpdateProjectMemberStatus_Request, opts ...grpc.CallOption) (*UpdateProjectMemberStatus_Response, error)
	// Used in finding and adding a new member to the project
	UsersWithoutProject(ctx context.Context, in *UsersWithoutProject_Request, opts ...grpc.CallOption) (*UsersWithoutProject_Response, error)
	ListProjectMembersInvite(ctx context.Context, in *ListProjectMembersInvite_Request, opts ...grpc.CallOption) (*ListProjectMembersInvite_Response, error)
	AddProjectMemberInvite(ctx context.Context, in *AddProjectMemberInvite_Request, opts ...grpc.CallOption) (*AddProjectMemberInvite_Response, error)
	DeleteProjectMemberInvite(ctx context.Context, in *DeleteProjectMemberInvite_Request, opts ...grpc.CallOption) (*DeleteProjectMemberInvite_Response, error)
	ProjectMemberInviteActivate(ctx context.Context, in *ProjectMemberInviteActivate_Request, opts ...grpc.CallOption) (*ProjectMemberInviteActivate_Response, error)
	// Server section
	ListServerMembers(ctx context.Context, in *ListServerMembers_Request, opts ...grpc.CallOption) (*ListServerMembers_Response, error)
	ServerMember(ctx context.Context, in *ServerMember_Request, opts ...grpc.CallOption) (*ServerMember_Response, error)
	AddServerMember(ctx context.Context, in *AddServerMember_Request, opts ...grpc.CallOption) (*AddServerMember_Response, error)
	UpdateServerMember(ctx context.Context, in *UpdateServerMember_Request, opts ...grpc.CallOption) (*UpdateServerMember_Response, error)
	DeleteServerMember(ctx context.Context, in *DeleteServerMember_Request, opts ...grpc.CallOption) (*DeleteServerMember_Response, error)
	UpdateServerMemberStatus(ctx context.Context, in *UpdateServerMemberStatus_Request, opts ...grpc.CallOption) (*UpdateServerMemberStatus_Response, error)
	MembersWithoutServer(ctx context.Context, in *MembersWithoutServer_Request, opts ...grpc.CallOption) (*MembersWithoutServer_Response, error)
	// Search member by user id and return true if found or false
	MemberByID(ctx context.Context, in *MemberByID_Request, opts ...grpc.CallOption) (*MemberByID_Response, error)
	// Use for Ajax search Users from first letters of name
	UsersByName(ctx context.Context, in *UsersByName_Request, opts ...grpc.CallOption) (*UsersByName_Response, error)
}

type memberHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberHandlersClient(cc grpc.ClientConnInterface) MemberHandlersClient {
	return &memberHandlersClient{cc}
}

func (c *memberHandlersClient) ListProjectMembers(ctx context.Context, in *ListProjectMembers_Request, opts ...grpc.CallOption) (*ListProjectMembers_Response, error) {
	out := new(ListProjectMembers_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/ListProjectMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) ProjectMember(ctx context.Context, in *ProjectMember_Request, opts ...grpc.CallOption) (*ProjectMember_Response, error) {
	out := new(ProjectMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/ProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) AddProjectMember(ctx context.Context, in *AddProjectMember_Request, opts ...grpc.CallOption) (*AddProjectMember_Response, error) {
	out := new(AddProjectMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/AddProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UpdateProjectMember(ctx context.Context, in *UpdateProjectMember_Request, opts ...grpc.CallOption) (*UpdateProjectMember_Response, error) {
	out := new(UpdateProjectMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/UpdateProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) DeleteProjectMember(ctx context.Context, in *DeleteProjectMember_Request, opts ...grpc.CallOption) (*DeleteProjectMember_Response, error) {
	out := new(DeleteProjectMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/DeleteProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UpdateProjectMemberStatus(ctx context.Context, in *UpdateProjectMemberStatus_Request, opts ...grpc.CallOption) (*UpdateProjectMemberStatus_Response, error) {
	out := new(UpdateProjectMemberStatus_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/UpdateProjectMemberStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UsersWithoutProject(ctx context.Context, in *UsersWithoutProject_Request, opts ...grpc.CallOption) (*UsersWithoutProject_Response, error) {
	out := new(UsersWithoutProject_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/UsersWithoutProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) ListProjectMembersInvite(ctx context.Context, in *ListProjectMembersInvite_Request, opts ...grpc.CallOption) (*ListProjectMembersInvite_Response, error) {
	out := new(ListProjectMembersInvite_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/ListProjectMembersInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) AddProjectMemberInvite(ctx context.Context, in *AddProjectMemberInvite_Request, opts ...grpc.CallOption) (*AddProjectMemberInvite_Response, error) {
	out := new(AddProjectMemberInvite_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/AddProjectMemberInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) DeleteProjectMemberInvite(ctx context.Context, in *DeleteProjectMemberInvite_Request, opts ...grpc.CallOption) (*DeleteProjectMemberInvite_Response, error) {
	out := new(DeleteProjectMemberInvite_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/DeleteProjectMemberInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) ProjectMemberInviteActivate(ctx context.Context, in *ProjectMemberInviteActivate_Request, opts ...grpc.CallOption) (*ProjectMemberInviteActivate_Response, error) {
	out := new(ProjectMemberInviteActivate_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/ProjectMemberInviteActivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) ListServerMembers(ctx context.Context, in *ListServerMembers_Request, opts ...grpc.CallOption) (*ListServerMembers_Response, error) {
	out := new(ListServerMembers_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/ListServerMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) ServerMember(ctx context.Context, in *ServerMember_Request, opts ...grpc.CallOption) (*ServerMember_Response, error) {
	out := new(ServerMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/ServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) AddServerMember(ctx context.Context, in *AddServerMember_Request, opts ...grpc.CallOption) (*AddServerMember_Response, error) {
	out := new(AddServerMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/AddServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UpdateServerMember(ctx context.Context, in *UpdateServerMember_Request, opts ...grpc.CallOption) (*UpdateServerMember_Response, error) {
	out := new(UpdateServerMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/UpdateServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) DeleteServerMember(ctx context.Context, in *DeleteServerMember_Request, opts ...grpc.CallOption) (*DeleteServerMember_Response, error) {
	out := new(DeleteServerMember_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/DeleteServerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UpdateServerMemberStatus(ctx context.Context, in *UpdateServerMemberStatus_Request, opts ...grpc.CallOption) (*UpdateServerMemberStatus_Response, error) {
	out := new(UpdateServerMemberStatus_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/UpdateServerMemberStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) MembersWithoutServer(ctx context.Context, in *MembersWithoutServer_Request, opts ...grpc.CallOption) (*MembersWithoutServer_Response, error) {
	out := new(MembersWithoutServer_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/MembersWithoutServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) MemberByID(ctx context.Context, in *MemberByID_Request, opts ...grpc.CallOption) (*MemberByID_Response, error) {
	out := new(MemberByID_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/MemberByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UsersByName(ctx context.Context, in *UsersByName_Request, opts ...grpc.CallOption) (*UsersByName_Response, error) {
	out := new(UsersByName_Response)
	err := c.cc.Invoke(ctx, "/member.MemberHandlers/UsersByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberHandlersServer is the server API for MemberHandlers service.
// All implementations must embed UnimplementedMemberHandlersServer
// for forward compatibility
type MemberHandlersServer interface {
	// Project section
	ListProjectMembers(context.Context, *ListProjectMembers_Request) (*ListProjectMembers_Response, error)
	ProjectMember(context.Context, *ProjectMember_Request) (*ProjectMember_Response, error)
	AddProjectMember(context.Context, *AddProjectMember_Request) (*AddProjectMember_Response, error)
	UpdateProjectMember(context.Context, *UpdateProjectMember_Request) (*UpdateProjectMember_Response, error)
	DeleteProjectMember(context.Context, *DeleteProjectMember_Request) (*DeleteProjectMember_Response, error)
	UpdateProjectMemberStatus(context.Context, *UpdateProjectMemberStatus_Request) (*UpdateProjectMemberStatus_Response, error)
	// Used in finding and adding a new member to the project
	UsersWithoutProject(context.Context, *UsersWithoutProject_Request) (*UsersWithoutProject_Response, error)
	ListProjectMembersInvite(context.Context, *ListProjectMembersInvite_Request) (*ListProjectMembersInvite_Response, error)
	AddProjectMemberInvite(context.Context, *AddProjectMemberInvite_Request) (*AddProjectMemberInvite_Response, error)
	DeleteProjectMemberInvite(context.Context, *DeleteProjectMemberInvite_Request) (*DeleteProjectMemberInvite_Response, error)
	ProjectMemberInviteActivate(context.Context, *ProjectMemberInviteActivate_Request) (*ProjectMemberInviteActivate_Response, error)
	// Server section
	ListServerMembers(context.Context, *ListServerMembers_Request) (*ListServerMembers_Response, error)
	ServerMember(context.Context, *ServerMember_Request) (*ServerMember_Response, error)
	AddServerMember(context.Context, *AddServerMember_Request) (*AddServerMember_Response, error)
	UpdateServerMember(context.Context, *UpdateServerMember_Request) (*UpdateServerMember_Response, error)
	DeleteServerMember(context.Context, *DeleteServerMember_Request) (*DeleteServerMember_Response, error)
	UpdateServerMemberStatus(context.Context, *UpdateServerMemberStatus_Request) (*UpdateServerMemberStatus_Response, error)
	MembersWithoutServer(context.Context, *MembersWithoutServer_Request) (*MembersWithoutServer_Response, error)
	// Search member by user id and return true if found or false
	MemberByID(context.Context, *MemberByID_Request) (*MemberByID_Response, error)
	// Use for Ajax search Users from first letters of name
	UsersByName(context.Context, *UsersByName_Request) (*UsersByName_Response, error)
	mustEmbedUnimplementedMemberHandlersServer()
}

// UnimplementedMemberHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedMemberHandlersServer struct {
}

func (UnimplementedMemberHandlersServer) ListProjectMembers(context.Context, *ListProjectMembers_Request) (*ListProjectMembers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMembers not implemented")
}
func (UnimplementedMemberHandlersServer) ProjectMember(context.Context, *ProjectMember_Request) (*ProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) AddProjectMember(context.Context, *AddProjectMember_Request) (*AddProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) UpdateProjectMember(context.Context, *UpdateProjectMember_Request) (*UpdateProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) DeleteProjectMember(context.Context, *DeleteProjectMember_Request) (*DeleteProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) UpdateProjectMemberStatus(context.Context, *UpdateProjectMemberStatus_Request) (*UpdateProjectMemberStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectMemberStatus not implemented")
}
func (UnimplementedMemberHandlersServer) UsersWithoutProject(context.Context, *UsersWithoutProject_Request) (*UsersWithoutProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersWithoutProject not implemented")
}
func (UnimplementedMemberHandlersServer) ListProjectMembersInvite(context.Context, *ListProjectMembersInvite_Request) (*ListProjectMembersInvite_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMembersInvite not implemented")
}
func (UnimplementedMemberHandlersServer) AddProjectMemberInvite(context.Context, *AddProjectMemberInvite_Request) (*AddProjectMemberInvite_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectMemberInvite not implemented")
}
func (UnimplementedMemberHandlersServer) DeleteProjectMemberInvite(context.Context, *DeleteProjectMemberInvite_Request) (*DeleteProjectMemberInvite_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectMemberInvite not implemented")
}
func (UnimplementedMemberHandlersServer) ProjectMemberInviteActivate(context.Context, *ProjectMemberInviteActivate_Request) (*ProjectMemberInviteActivate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectMemberInviteActivate not implemented")
}
func (UnimplementedMemberHandlersServer) ListServerMembers(context.Context, *ListServerMembers_Request) (*ListServerMembers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServerMembers not implemented")
}
func (UnimplementedMemberHandlersServer) ServerMember(context.Context, *ServerMember_Request) (*ServerMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerMember not implemented")
}
func (UnimplementedMemberHandlersServer) AddServerMember(context.Context, *AddServerMember_Request) (*AddServerMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServerMember not implemented")
}
func (UnimplementedMemberHandlersServer) UpdateServerMember(context.Context, *UpdateServerMember_Request) (*UpdateServerMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerMember not implemented")
}
func (UnimplementedMemberHandlersServer) DeleteServerMember(context.Context, *DeleteServerMember_Request) (*DeleteServerMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServerMember not implemented")
}
func (UnimplementedMemberHandlersServer) UpdateServerMemberStatus(context.Context, *UpdateServerMemberStatus_Request) (*UpdateServerMemberStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerMemberStatus not implemented")
}
func (UnimplementedMemberHandlersServer) MembersWithoutServer(context.Context, *MembersWithoutServer_Request) (*MembersWithoutServer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembersWithoutServer not implemented")
}
func (UnimplementedMemberHandlersServer) MemberByID(context.Context, *MemberByID_Request) (*MemberByID_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberByID not implemented")
}
func (UnimplementedMemberHandlersServer) UsersByName(context.Context, *UsersByName_Request) (*UsersByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersByName not implemented")
}
func (UnimplementedMemberHandlersServer) mustEmbedUnimplementedMemberHandlersServer() {}

// UnsafeMemberHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberHandlersServer will
// result in compilation errors.
type UnsafeMemberHandlersServer interface {
	mustEmbedUnimplementedMemberHandlersServer()
}

func RegisterMemberHandlersServer(s grpc.ServiceRegistrar, srv MemberHandlersServer) {
	s.RegisterService(&MemberHandlers_ServiceDesc, srv)
}

func _MemberHandlers_ListProjectMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMembers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ListProjectMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/ListProjectMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ListProjectMembers(ctx, req.(*ListProjectMembers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_ProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/ProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ProjectMember(ctx, req.(*ProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_AddProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).AddProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/AddProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).AddProjectMember(ctx, req.(*AddProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UpdateProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UpdateProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/UpdateProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UpdateProjectMember(ctx, req.(*UpdateProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_DeleteProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).DeleteProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/DeleteProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).DeleteProjectMember(ctx, req.(*DeleteProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UpdateProjectMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectMemberStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UpdateProjectMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/UpdateProjectMemberStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UpdateProjectMemberStatus(ctx, req.(*UpdateProjectMemberStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UsersWithoutProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersWithoutProject_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UsersWithoutProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/UsersWithoutProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UsersWithoutProject(ctx, req.(*UsersWithoutProject_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_ListProjectMembersInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMembersInvite_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ListProjectMembersInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/ListProjectMembersInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ListProjectMembersInvite(ctx, req.(*ListProjectMembersInvite_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_AddProjectMemberInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectMemberInvite_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).AddProjectMemberInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/AddProjectMemberInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).AddProjectMemberInvite(ctx, req.(*AddProjectMemberInvite_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_DeleteProjectMemberInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectMemberInvite_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).DeleteProjectMemberInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/DeleteProjectMemberInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).DeleteProjectMemberInvite(ctx, req.(*DeleteProjectMemberInvite_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_ProjectMemberInviteActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMemberInviteActivate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ProjectMemberInviteActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/ProjectMemberInviteActivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ProjectMemberInviteActivate(ctx, req.(*ProjectMemberInviteActivate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_ListServerMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServerMembers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ListServerMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/ListServerMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ListServerMembers(ctx, req.(*ListServerMembers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_ServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/ServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ServerMember(ctx, req.(*ServerMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_AddServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).AddServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/AddServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).AddServerMember(ctx, req.(*AddServerMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UpdateServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UpdateServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/UpdateServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UpdateServerMember(ctx, req.(*UpdateServerMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_DeleteServerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).DeleteServerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/DeleteServerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).DeleteServerMember(ctx, req.(*DeleteServerMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UpdateServerMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerMemberStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UpdateServerMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/UpdateServerMemberStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UpdateServerMemberStatus(ctx, req.(*UpdateServerMemberStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_MembersWithoutServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersWithoutServer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).MembersWithoutServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/MembersWithoutServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).MembersWithoutServer(ctx, req.(*MembersWithoutServer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_MemberByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberByID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).MemberByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/MemberByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).MemberByID(ctx, req.(*MemberByID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UsersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersByName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UsersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberHandlers/UsersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UsersByName(ctx, req.(*UsersByName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberHandlers_ServiceDesc is the grpc.ServiceDesc for MemberHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "member.MemberHandlers",
	HandlerType: (*MemberHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjectMembers",
			Handler:    _MemberHandlers_ListProjectMembers_Handler,
		},
		{
			MethodName: "ProjectMember",
			Handler:    _MemberHandlers_ProjectMember_Handler,
		},
		{
			MethodName: "AddProjectMember",
			Handler:    _MemberHandlers_AddProjectMember_Handler,
		},
		{
			MethodName: "UpdateProjectMember",
			Handler:    _MemberHandlers_UpdateProjectMember_Handler,
		},
		{
			MethodName: "DeleteProjectMember",
			Handler:    _MemberHandlers_DeleteProjectMember_Handler,
		},
		{
			MethodName: "UpdateProjectMemberStatus",
			Handler:    _MemberHandlers_UpdateProjectMemberStatus_Handler,
		},
		{
			MethodName: "UsersWithoutProject",
			Handler:    _MemberHandlers_UsersWithoutProject_Handler,
		},
		{
			MethodName: "ListProjectMembersInvite",
			Handler:    _MemberHandlers_ListProjectMembersInvite_Handler,
		},
		{
			MethodName: "AddProjectMemberInvite",
			Handler:    _MemberHandlers_AddProjectMemberInvite_Handler,
		},
		{
			MethodName: "DeleteProjectMemberInvite",
			Handler:    _MemberHandlers_DeleteProjectMemberInvite_Handler,
		},
		{
			MethodName: "ProjectMemberInviteActivate",
			Handler:    _MemberHandlers_ProjectMemberInviteActivate_Handler,
		},
		{
			MethodName: "ListServerMembers",
			Handler:    _MemberHandlers_ListServerMembers_Handler,
		},
		{
			MethodName: "ServerMember",
			Handler:    _MemberHandlers_ServerMember_Handler,
		},
		{
			MethodName: "AddServerMember",
			Handler:    _MemberHandlers_AddServerMember_Handler,
		},
		{
			MethodName: "UpdateServerMember",
			Handler:    _MemberHandlers_UpdateServerMember_Handler,
		},
		{
			MethodName: "DeleteServerMember",
			Handler:    _MemberHandlers_DeleteServerMember_Handler,
		},
		{
			MethodName: "UpdateServerMemberStatus",
			Handler:    _MemberHandlers_UpdateServerMemberStatus_Handler,
		},
		{
			MethodName: "MembersWithoutServer",
			Handler:    _MemberHandlers_MembersWithoutServer_Handler,
		},
		{
			MethodName: "MemberByID",
			Handler:    _MemberHandlers_MemberByID_Handler,
		},
		{
			MethodName: "UsersByName",
			Handler:    _MemberHandlers_UsersByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: utility.proto

package utility

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCountries with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCountries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCountries with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCountriesMultiError, or
// nil if none found.
func (m *ListCountries) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCountries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCountriesMultiError(errors)
	}

	return nil
}

// ListCountriesMultiError is an error wrapping multiple validation errors
// returned by ListCountries.ValidateAll() if the designated constraints
// aren't met.
type ListCountriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCountriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCountriesMultiError) AllErrors() []error { return m }

// ListCountriesValidationError is the validation error returned by
// ListCountries.Validate if the designated constraints aren't met.
type ListCountriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCountriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCountriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCountriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCountriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCountriesValidationError) ErrorName() string { return "ListCountriesValidationError" }

// Error satisfies the builtin error interface
func (e ListCountriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCountries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCountriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCountriesValidationError{}

// Validate checks the field values on ListCountries_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCountries_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCountries_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCountries_RequestMultiError, or nil if none found.
func (m *ListCountries_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCountries_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := ListCountries_RequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCountries_RequestMultiError(errors)
	}

	return nil
}

// ListCountries_RequestMultiError is an error wrapping multiple validation
// errors returned by ListCountries_Request.ValidateAll() if the designated
// constraints aren't met.
type ListCountries_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCountries_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCountries_RequestMultiError) AllErrors() []error { return m }

// ListCountries_RequestValidationError is the validation error returned by
// ListCountries_Request.Validate if the designated constraints aren't met.
type ListCountries_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCountries_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCountries_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCountries_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCountries_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCountries_RequestValidationError) ErrorName() string {
	return "ListCountries_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCountries_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCountries_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCountries_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCountries_RequestValidationError{}

// Validate checks the field values on ListCountries_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCountries_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCountries_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCountries_ResponseMultiError, or nil if none found.
func (m *ListCountries_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCountries_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCountries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCountries_ResponseValidationError{
						field:  fmt.Sprintf("Countries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCountries_ResponseValidationError{
						field:  fmt.Sprintf("Countries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCountries_ResponseValidationError{
					field:  fmt.Sprintf("Countries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCountries_ResponseMultiError(errors)
	}

	return nil
}

// ListCountries_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListCountries_Response.ValidateAll() if the designated
// constraints aren't met.
type ListCountries_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCountries_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCountries_ResponseMultiError) AllErrors() []error { return m }

// ListCountries_ResponseValidationError is the validation error returned by
// ListCountries_Response.Validate if the designated constraints aren't met.
type ListCountries_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCountries_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCountries_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCountries_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCountries_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCountries_ResponseValidationError) ErrorName() string {
	return "ListCountries_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCountries_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCountries_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCountries_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCountries_ResponseValidationError{}

// Validate checks the field values on ListCountries_Response_Country with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCountries_Response_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCountries_Response_Country with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCountries_Response_CountryMultiError, or nil if none found.
func (m *ListCountries_Response_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCountries_Response_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Name

	if len(errors) > 0 {
		return ListCountries_Response_CountryMultiError(errors)
	}

	return nil
}

// ListCountries_Response_CountryMultiError is an error wrapping multiple
// validation errors returned by ListCountries_Response_Country.ValidateAll()
// if the designated constraints aren't met.
type ListCountries_Response_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCountries_Response_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCountries_Response_CountryMultiError) AllErrors() []error { return m }

// ListCountries_Response_CountryValidationError is the validation error
// returned by ListCountries_Response_Country.Validate if the designated
// constraints aren't met.
type ListCountries_Response_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCountries_Response_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCountries_Response_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCountries_Response_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCountries_Response_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCountries_Response_CountryValidationError) ErrorName() string {
	return "ListCountries_Response_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e ListCountries_Response_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCountries_Response_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCountries_Response_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCountries_Response_CountryValidationError{}

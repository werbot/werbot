// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: audit.proto

package audit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Audit

	// no validation rules for Duration

	// no validation rules for Screen

	// no validation rules for Type

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on AddAudit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddAudit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddAuditMultiError, or nil
// if none found.
func (m *AddAudit) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAudit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAuditMultiError(errors)
	}

	return nil
}

// AddAuditMultiError is an error wrapping multiple validation errors returned
// by AddAudit.ValidateAll() if the designated constraints aren't met.
type AddAuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAuditMultiError) AllErrors() []error { return m }

// AddAuditValidationError is the validation error returned by
// AddAudit.Validate if the designated constraints aren't met.
type AddAuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAuditValidationError) ErrorName() string { return "AddAuditValidationError" }

// Error satisfies the builtin error interface
func (e AddAuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAudit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAuditValidationError{}

// Validate checks the field values on UpdateAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateAudit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateAuditMultiError, or
// nil if none found.
func (m *UpdateAudit) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAudit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAuditMultiError(errors)
	}

	return nil
}

// UpdateAuditMultiError is an error wrapping multiple validation errors
// returned by UpdateAudit.ValidateAll() if the designated constraints aren't met.
type UpdateAuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuditMultiError) AllErrors() []error { return m }

// UpdateAuditValidationError is the validation error returned by
// UpdateAudit.Validate if the designated constraints aren't met.
type UpdateAuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuditValidationError) ErrorName() string { return "UpdateAuditValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAudit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuditValidationError{}

// Validate checks the field values on CreateRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRecordMultiError, or
// nil if none found.
func (m *CreateRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRecordMultiError(errors)
	}

	return nil
}

// CreateRecordMultiError is an error wrapping multiple validation errors
// returned by CreateRecord.ValidateAll() if the designated constraints aren't met.
type CreateRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRecordMultiError) AllErrors() []error { return m }

// CreateRecordValidationError is the validation error returned by
// CreateRecord.Validate if the designated constraints aren't met.
type CreateRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRecordValidationError) ErrorName() string { return "CreateRecordValidationError" }

// Error satisfies the builtin error interface
func (e CreateRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRecordValidationError{}

// Validate checks the field values on AddAudit_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAudit_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAudit_RequestMultiError, or nil if none found.
func (m *AddAudit_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAudit_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Version

	// no validation rules for Session

	// no validation rules for ClientIp

	if len(errors) > 0 {
		return AddAudit_RequestMultiError(errors)
	}

	return nil
}

// AddAudit_RequestMultiError is an error wrapping multiple validation errors
// returned by AddAudit_Request.ValidateAll() if the designated constraints
// aren't met.
type AddAudit_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAudit_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAudit_RequestMultiError) AllErrors() []error { return m }

// AddAudit_RequestValidationError is the validation error returned by
// AddAudit_Request.Validate if the designated constraints aren't met.
type AddAudit_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAudit_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAudit_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAudit_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAudit_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAudit_RequestValidationError) ErrorName() string { return "AddAudit_RequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAudit_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAudit_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAudit_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAudit_RequestValidationError{}

// Validate checks the field values on AddAudit_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAudit_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAudit_ResponseMultiError, or nil if none found.
func (m *AddAudit_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAudit_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	if len(errors) > 0 {
		return AddAudit_ResponseMultiError(errors)
	}

	return nil
}

// AddAudit_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddAudit_Response.ValidateAll() if the designated constraints
// aren't met.
type AddAudit_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAudit_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAudit_ResponseMultiError) AllErrors() []error { return m }

// AddAudit_ResponseValidationError is the validation error returned by
// AddAudit_Response.Validate if the designated constraints aren't met.
type AddAudit_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAudit_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAudit_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAudit_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAudit_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAudit_ResponseValidationError) ErrorName() string {
	return "AddAudit_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAudit_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAudit_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAudit_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAudit_ResponseValidationError{}

// Validate checks the field values on UpdateAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAudit_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAudit_RequestMultiError, or nil if none found.
func (m *UpdateAudit_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAudit_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAudit_RequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAudit_RequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAudit_RequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAudit_RequestMultiError(errors)
	}

	return nil
}

// UpdateAudit_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAudit_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateAudit_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAudit_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAudit_RequestMultiError) AllErrors() []error { return m }

// UpdateAudit_RequestValidationError is the validation error returned by
// UpdateAudit_Request.Validate if the designated constraints aren't met.
type UpdateAudit_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAudit_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAudit_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAudit_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAudit_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAudit_RequestValidationError) ErrorName() string {
	return "UpdateAudit_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAudit_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAudit_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAudit_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAudit_RequestValidationError{}

// Validate checks the field values on UpdateAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAudit_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAudit_ResponseMultiError, or nil if none found.
func (m *UpdateAudit_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAudit_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAudit_ResponseMultiError(errors)
	}

	return nil
}

// UpdateAudit_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAudit_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateAudit_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAudit_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAudit_ResponseMultiError) AllErrors() []error { return m }

// UpdateAudit_ResponseValidationError is the validation error returned by
// UpdateAudit_Response.Validate if the designated constraints aren't met.
type UpdateAudit_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAudit_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAudit_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAudit_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAudit_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAudit_ResponseValidationError) ErrorName() string {
	return "UpdateAudit_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAudit_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAudit_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAudit_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAudit_ResponseValidationError{}

// Validate checks the field values on UpdateAudit_Request_Params with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAudit_Request_Params) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAudit_Request_Params with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAudit_Request_ParamsMultiError, or nil if none found.
func (m *UpdateAudit_Request_Params) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAudit_Request_Params) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Command

	// no validation rules for Title

	// no validation rules for EnvTerm

	// no validation rules for EnvShell

	// no validation rules for Duration

	// no validation rules for TimeEnd

	if len(errors) > 0 {
		return UpdateAudit_Request_ParamsMultiError(errors)
	}

	return nil
}

// UpdateAudit_Request_ParamsMultiError is an error wrapping multiple
// validation errors returned by UpdateAudit_Request_Params.ValidateAll() if
// the designated constraints aren't met.
type UpdateAudit_Request_ParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAudit_Request_ParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAudit_Request_ParamsMultiError) AllErrors() []error { return m }

// UpdateAudit_Request_ParamsValidationError is the validation error returned
// by UpdateAudit_Request_Params.Validate if the designated constraints aren't met.
type UpdateAudit_Request_ParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAudit_Request_ParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAudit_Request_ParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAudit_Request_ParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAudit_Request_ParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAudit_Request_ParamsValidationError) ErrorName() string {
	return "UpdateAudit_Request_ParamsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAudit_Request_ParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAudit_Request_Params.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAudit_Request_ParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAudit_Request_ParamsValidationError{}

// Validate checks the field values on CreateRecord_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRecord_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRecord_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRecord_RequestMultiError, or nil if none found.
func (m *CreateRecord_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRecord_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRecord_RequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRecord_RequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRecord_RequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRecord_RequestMultiError(errors)
	}

	return nil
}

// CreateRecord_RequestMultiError is an error wrapping multiple validation
// errors returned by CreateRecord_Request.ValidateAll() if the designated
// constraints aren't met.
type CreateRecord_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRecord_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRecord_RequestMultiError) AllErrors() []error { return m }

// CreateRecord_RequestValidationError is the validation error returned by
// CreateRecord_Request.Validate if the designated constraints aren't met.
type CreateRecord_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRecord_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRecord_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRecord_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRecord_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRecord_RequestValidationError) ErrorName() string {
	return "CreateRecord_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRecord_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRecord_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRecord_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRecord_RequestValidationError{}

// Validate checks the field values on CreateRecord_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRecord_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRecord_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRecord_ResponseMultiError, or nil if none found.
func (m *CreateRecord_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRecord_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRecord_ResponseMultiError(errors)
	}

	return nil
}

// CreateRecord_ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRecord_Response.ValidateAll() if the designated
// constraints aren't met.
type CreateRecord_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRecord_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRecord_ResponseMultiError) AllErrors() []error { return m }

// CreateRecord_ResponseValidationError is the validation error returned by
// CreateRecord_Response.Validate if the designated constraints aren't met.
type CreateRecord_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRecord_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRecord_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRecord_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRecord_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRecord_ResponseValidationError) ErrorName() string {
	return "CreateRecord_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRecord_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRecord_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRecord_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRecord_ResponseValidationError{}

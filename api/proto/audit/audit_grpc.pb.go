// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: audit.proto

package audit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuditHandlersClient is the client API for AuditHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditHandlersClient interface {
	AddAudit(ctx context.Context, in *AddAudit_Request, opts ...grpc.CallOption) (*AddAudit_Response, error)
	UpdateAudit(ctx context.Context, in *UpdateAudit_Request, opts ...grpc.CallOption) (*UpdateAudit_Response, error)
	CreateRecord(ctx context.Context, in *CreateRecord_Request, opts ...grpc.CallOption) (*CreateRecord_Response, error)
}

type auditHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditHandlersClient(cc grpc.ClientConnInterface) AuditHandlersClient {
	return &auditHandlersClient{cc}
}

func (c *auditHandlersClient) AddAudit(ctx context.Context, in *AddAudit_Request, opts ...grpc.CallOption) (*AddAudit_Response, error) {
	out := new(AddAudit_Response)
	err := c.cc.Invoke(ctx, "/audit.AuditHandlers/AddAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditHandlersClient) UpdateAudit(ctx context.Context, in *UpdateAudit_Request, opts ...grpc.CallOption) (*UpdateAudit_Response, error) {
	out := new(UpdateAudit_Response)
	err := c.cc.Invoke(ctx, "/audit.AuditHandlers/UpdateAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditHandlersClient) CreateRecord(ctx context.Context, in *CreateRecord_Request, opts ...grpc.CallOption) (*CreateRecord_Response, error) {
	out := new(CreateRecord_Response)
	err := c.cc.Invoke(ctx, "/audit.AuditHandlers/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditHandlersServer is the server API for AuditHandlers service.
// All implementations must embed UnimplementedAuditHandlersServer
// for forward compatibility
type AuditHandlersServer interface {
	AddAudit(context.Context, *AddAudit_Request) (*AddAudit_Response, error)
	UpdateAudit(context.Context, *UpdateAudit_Request) (*UpdateAudit_Response, error)
	CreateRecord(context.Context, *CreateRecord_Request) (*CreateRecord_Response, error)
	mustEmbedUnimplementedAuditHandlersServer()
}

// UnimplementedAuditHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedAuditHandlersServer struct {
}

func (UnimplementedAuditHandlersServer) AddAudit(context.Context, *AddAudit_Request) (*AddAudit_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAudit not implemented")
}
func (UnimplementedAuditHandlersServer) UpdateAudit(context.Context, *UpdateAudit_Request) (*UpdateAudit_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAudit not implemented")
}
func (UnimplementedAuditHandlersServer) CreateRecord(context.Context, *CreateRecord_Request) (*CreateRecord_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedAuditHandlersServer) mustEmbedUnimplementedAuditHandlersServer() {}

// UnsafeAuditHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditHandlersServer will
// result in compilation errors.
type UnsafeAuditHandlersServer interface {
	mustEmbedUnimplementedAuditHandlersServer()
}

func RegisterAuditHandlersServer(s grpc.ServiceRegistrar, srv AuditHandlersServer) {
	s.RegisterService(&AuditHandlers_ServiceDesc, srv)
}

func _AuditHandlers_AddAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAudit_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditHandlersServer).AddAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditHandlers/AddAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditHandlersServer).AddAudit(ctx, req.(*AddAudit_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditHandlers_UpdateAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAudit_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditHandlersServer).UpdateAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditHandlers/UpdateAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditHandlersServer).UpdateAudit(ctx, req.(*UpdateAudit_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditHandlers_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecord_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditHandlersServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditHandlers/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditHandlersServer).CreateRecord(ctx, req.(*CreateRecord_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditHandlers_ServiceDesc is the grpc.ServiceDesc for AuditHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audit.AuditHandlers",
	HandlerType: (*AuditHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAudit",
			Handler:    _AuditHandlers_AddAudit_Handler,
		},
		{
			MethodName: "UpdateAudit",
			Handler:    _AuditHandlers_UpdateAudit_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _AuditHandlers_CreateRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audit.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _user_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListUsers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUsersMultiError, or nil
// if none found.
func (m *ListUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUsersMultiError(errors)
	}

	return nil
}

// ListUsersMultiError is an error wrapping multiple validation errors returned
// by ListUsers.ValidateAll() if the designated constraints aren't met.
type ListUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersMultiError) AllErrors() []error { return m }

// ListUsersValidationError is the validation error returned by
// ListUsers.Validate if the designated constraints aren't met.
type ListUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersValidationError) ErrorName() string { return "ListUsersValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on AddUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUser with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddUserMultiError, or nil if none found.
func (m *AddUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserMultiError(errors)
	}

	return nil
}

// AddUserMultiError is an error wrapping multiple validation errors returned
// by AddUser.ValidateAll() if the designated constraints aren't met.
type AddUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserMultiError) AllErrors() []error { return m }

// AddUserValidationError is the validation error returned by AddUser.Validate
// if the designated constraints aren't met.
type AddUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserValidationError) ErrorName() string { return "AddUserValidationError" }

// Error satisfies the builtin error interface
func (e AddUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserValidationError{}

// Validate checks the field values on UpdateUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserMultiError, or
// nil if none found.
func (m *UpdateUser) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserMultiError(errors)
	}

	return nil
}

// UpdateUserMultiError is an error wrapping multiple validation errors
// returned by UpdateUser.ValidateAll() if the designated constraints aren't met.
type UpdateUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserMultiError) AllErrors() []error { return m }

// UpdateUserValidationError is the validation error returned by
// UpdateUser.Validate if the designated constraints aren't met.
type UpdateUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserValidationError) ErrorName() string { return "UpdateUserValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserValidationError{}

// Validate checks the field values on DeleteUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteUserMultiError, or
// nil if none found.
func (m *DeleteUser) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserMultiError(errors)
	}

	return nil
}

// DeleteUserMultiError is an error wrapping multiple validation errors
// returned by DeleteUser.ValidateAll() if the designated constraints aren't met.
type DeleteUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserMultiError) AllErrors() []error { return m }

// DeleteUserValidationError is the validation error returned by
// DeleteUser.Validate if the designated constraints aren't met.
type DeleteUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserValidationError) ErrorName() string { return "DeleteUserValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserValidationError{}

// Validate checks the field values on UpdatePassword with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdatePassword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePassword with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdatePasswordMultiError,
// or nil if none found.
func (m *UpdatePassword) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePassword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePasswordMultiError(errors)
	}

	return nil
}

// UpdatePasswordMultiError is an error wrapping multiple validation errors
// returned by UpdatePassword.ValidateAll() if the designated constraints
// aren't met.
type UpdatePasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordMultiError) AllErrors() []error { return m }

// UpdatePasswordValidationError is the validation error returned by
// UpdatePassword.Validate if the designated constraints aren't met.
type UpdatePasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordValidationError) ErrorName() string { return "UpdatePasswordValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordValidationError{}

// Validate checks the field values on ListUsers_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsers_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsers_RequestMultiError, or nil if none found.
func (m *ListUsers_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsers_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListUsers_RequestMultiError(errors)
	}

	return nil
}

// ListUsers_RequestMultiError is an error wrapping multiple validation errors
// returned by ListUsers_Request.ValidateAll() if the designated constraints
// aren't met.
type ListUsers_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsers_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsers_RequestMultiError) AllErrors() []error { return m }

// ListUsers_RequestValidationError is the validation error returned by
// ListUsers_Request.Validate if the designated constraints aren't met.
type ListUsers_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsers_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsers_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsers_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsers_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsers_RequestValidationError) ErrorName() string {
	return "ListUsers_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsers_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsers_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsers_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsers_RequestValidationError{}

// Validate checks the field values on ListUsers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsers_ResponseMultiError, or nil if none found.
func (m *ListUsers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsers_ResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsers_ResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsers_ResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUsers_ResponseMultiError(errors)
	}

	return nil
}

// ListUsers_ResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsers_Response.ValidateAll() if the designated constraints
// aren't met.
type ListUsers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsers_ResponseMultiError) AllErrors() []error { return m }

// ListUsers_ResponseValidationError is the validation error returned by
// ListUsers_Response.Validate if the designated constraints aren't met.
type ListUsers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsers_ResponseValidationError) ErrorName() string {
	return "ListUsers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsers_ResponseValidationError{}

// Validate checks the field values on ListUsers_Response_UserInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsers_Response_UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsers_Response_UserInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsers_Response_UserInfoMultiError, or nil if none found.
func (m *ListUsers_Response_UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsers_Response_UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServersCount

	// no validation rules for ProjectsCount

	// no validation rules for KeysCount

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsers_Response_UserInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsers_Response_UserInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsers_Response_UserInfoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUsers_Response_UserInfoMultiError(errors)
	}

	return nil
}

// ListUsers_Response_UserInfoMultiError is an error wrapping multiple
// validation errors returned by ListUsers_Response_UserInfo.ValidateAll() if
// the designated constraints aren't met.
type ListUsers_Response_UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsers_Response_UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsers_Response_UserInfoMultiError) AllErrors() []error { return m }

// ListUsers_Response_UserInfoValidationError is the validation error returned
// by ListUsers_Response_UserInfo.Validate if the designated constraints
// aren't met.
type ListUsers_Response_UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsers_Response_UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsers_Response_UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsers_Response_UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsers_Response_UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsers_Response_UserInfoValidationError) ErrorName() string {
	return "ListUsers_Response_UserInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsers_Response_UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsers_Response_UserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsers_Response_UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsers_Response_UserInfoValidationError{}

// Validate checks the field values on User_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *User_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in User_RequestMultiError, or
// nil if none found.
func (m *User_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = User_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return User_RequestMultiError(errors)
	}

	return nil
}

func (m *User_Request) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// User_RequestMultiError is an error wrapping multiple validation errors
// returned by User_Request.ValidateAll() if the designated constraints aren't met.
type User_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_RequestMultiError) AllErrors() []error { return m }

// User_RequestValidationError is the validation error returned by
// User_Request.Validate if the designated constraints aren't met.
type User_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_RequestValidationError) ErrorName() string { return "User_RequestValidationError" }

// Error satisfies the builtin error interface
func (e User_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_RequestValidationError{}

// Validate checks the field values on User_Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *User_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in User_ResponseMultiError, or
// nil if none found.
func (m *User_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Login

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Email

	// no validation rules for Enabled

	// no validation rules for Confirmed

	// no validation rules for Role

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetLastActive()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_ResponseValidationError{
					field:  "LastActive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_ResponseValidationError{
					field:  "LastActive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastActive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_ResponseValidationError{
				field:  "LastActive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegisterDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_ResponseValidationError{
					field:  "RegisterDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_ResponseValidationError{
					field:  "RegisterDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisterDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_ResponseValidationError{
				field:  "RegisterDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return User_ResponseMultiError(errors)
	}

	return nil
}

// User_ResponseMultiError is an error wrapping multiple validation errors
// returned by User_Response.ValidateAll() if the designated constraints
// aren't met.
type User_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_ResponseMultiError) AllErrors() []error { return m }

// User_ResponseValidationError is the validation error returned by
// User_Response.Validate if the designated constraints aren't met.
type User_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_ResponseValidationError) ErrorName() string { return "User_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e User_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_ResponseValidationError{}

// Validate checks the field values on AddUser_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUser_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUser_RequestMultiError, or nil if none found.
func (m *AddUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetLogin()); l < 3 || l > 20 {
		err := AddUser_RequestValidationError{
			field:  "Login",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddUser_Request_Login_Pattern.MatchString(m.GetLogin()) {
		err := AddUser_RequestValidationError{
			field:  "Login",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddUser_RequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 128 {
		err := AddUser_RequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSurname()); l < 3 || l > 128 {
		err := AddUser_RequestValidationError{
			field:  "Surname",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	// no validation rules for Confirmed

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
		err := AddUser_RequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddUser_RequestMultiError(errors)
	}

	return nil
}

func (m *AddUser_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddUser_Request) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddUser_RequestMultiError is an error wrapping multiple validation errors
// returned by AddUser_Request.ValidateAll() if the designated constraints
// aren't met.
type AddUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUser_RequestMultiError) AllErrors() []error { return m }

// AddUser_RequestValidationError is the validation error returned by
// AddUser_Request.Validate if the designated constraints aren't met.
type AddUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUser_RequestValidationError) ErrorName() string { return "AddUser_RequestValidationError" }

// Error satisfies the builtin error interface
func (e AddUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUser_RequestValidationError{}

var _AddUser_Request_Login_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on AddUser_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUser_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUser_ResponseMultiError, or nil if none found.
func (m *AddUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddUser_ResponseMultiError(errors)
	}

	return nil
}

// AddUser_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddUser_Response.ValidateAll() if the designated constraints
// aren't met.
type AddUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUser_ResponseMultiError) AllErrors() []error { return m }

// AddUser_ResponseValidationError is the validation error returned by
// AddUser_Response.Validate if the designated constraints aren't met.
type AddUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUser_ResponseValidationError) ErrorName() string { return "AddUser_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUser_ResponseValidationError{}

// Validate checks the field values on UpdateUser_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUser_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUser_RequestMultiError, or nil if none found.
func (m *UpdateUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateUser_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	switch v := m.Request.(type) {
	case *UpdateUser_Request_Info:
		if v == nil {
			err := UpdateUser_RequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUser_RequestValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUser_RequestValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUser_RequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateUser_Request_Enabled:
		if v == nil {
			err := UpdateUser_RequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Enabled
	case *UpdateUser_Request_Confirmed:
		if v == nil {
			err := UpdateUser_RequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Confirmed
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateUser_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateUser_Request) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateUser_RequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUser_Request.ValidateAll() if the designated constraints
// aren't met.
type UpdateUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUser_RequestMultiError) AllErrors() []error { return m }

// UpdateUser_RequestValidationError is the validation error returned by
// UpdateUser_Request.Validate if the designated constraints aren't met.
type UpdateUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUser_RequestValidationError) ErrorName() string {
	return "UpdateUser_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUser_RequestValidationError{}

// Validate checks the field values on UpdateUser_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUser_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUser_ResponseMultiError, or nil if none found.
func (m *UpdateUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUser_ResponseMultiError(errors)
	}

	return nil
}

// UpdateUser_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUser_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUser_ResponseMultiError) AllErrors() []error { return m }

// UpdateUser_ResponseValidationError is the validation error returned by
// UpdateUser_Response.Validate if the designated constraints aren't met.
type UpdateUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUser_ResponseValidationError) ErrorName() string {
	return "UpdateUser_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUser_ResponseValidationError{}

// Validate checks the field values on UpdateUser_Info with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUser_Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUser_Info with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUser_InfoMultiError, or nil if none found.
func (m *UpdateUser_Info) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUser_Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLogin() != "" {

		if l := utf8.RuneCountInString(m.GetLogin()); l < 3 || l > 20 {
			err := UpdateUser_InfoValidationError{
				field:  "Login",
				reason: "value length must be between 3 and 20 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_UpdateUser_Info_Login_Pattern.MatchString(m.GetLogin()) {
			err := UpdateUser_InfoValidationError{
				field:  "Login",
				reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UpdateUser_InfoValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 128 {
		err := UpdateUser_InfoValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSurname()); l < 3 || l > 128 {
		err := UpdateUser_InfoValidationError{
			field:  "Surname",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUser_InfoMultiError(errors)
	}

	return nil
}

func (m *UpdateUser_Info) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateUser_Info) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateUser_InfoMultiError is an error wrapping multiple validation errors
// returned by UpdateUser_Info.ValidateAll() if the designated constraints
// aren't met.
type UpdateUser_InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUser_InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUser_InfoMultiError) AllErrors() []error { return m }

// UpdateUser_InfoValidationError is the validation error returned by
// UpdateUser_Info.Validate if the designated constraints aren't met.
type UpdateUser_InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUser_InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUser_InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUser_InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUser_InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUser_InfoValidationError) ErrorName() string { return "UpdateUser_InfoValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUser_InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUser_Info.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUser_InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUser_InfoValidationError{}

var _UpdateUser_Info_Login_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on DeleteUser_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUser_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUser_RequestMultiError, or nil if none found.
func (m *DeleteUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteUser_RequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Request.(type) {
	case *DeleteUser_Request_Password:
		if v == nil {
			err := DeleteUser_RequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
			err := DeleteUser_RequestValidationError{
				field:  "Password",
				reason: "value length must be between 8 and 32 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *DeleteUser_Request_Token:
		if v == nil {
			err := DeleteUser_RequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetToken() != "" {

			if err := m._validateUuid(m.GetToken()); err != nil {
				err = DeleteUser_RequestValidationError{
					field:  "Token",
					reason: "value must be a valid UUID",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DeleteUser_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteUser_Request) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteUser_RequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUser_Request.ValidateAll() if the designated constraints
// aren't met.
type DeleteUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUser_RequestMultiError) AllErrors() []error { return m }

// DeleteUser_RequestValidationError is the validation error returned by
// DeleteUser_Request.Validate if the designated constraints aren't met.
type DeleteUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUser_RequestValidationError) ErrorName() string {
	return "DeleteUser_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUser_RequestValidationError{}

// Validate checks the field values on DeleteUser_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUser_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUser_ResponseMultiError, or nil if none found.
func (m *DeleteUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Email

	// no validation rules for Token

	if len(errors) > 0 {
		return DeleteUser_ResponseMultiError(errors)
	}

	return nil
}

// DeleteUser_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUser_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUser_ResponseMultiError) AllErrors() []error { return m }

// DeleteUser_ResponseValidationError is the validation error returned by
// DeleteUser_Response.Validate if the designated constraints aren't met.
type DeleteUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUser_ResponseValidationError) ErrorName() string {
	return "DeleteUser_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUser_ResponseValidationError{}

// Validate checks the field values on UpdatePassword_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePassword_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePassword_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePassword_RequestMultiError, or nil if none found.
func (m *UpdatePassword_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePassword_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdatePassword_RequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOldPassword()); l < 8 || l > 32 {
		err := UpdatePassword_RequestValidationError{
			field:  "OldPassword",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 8 || l > 32 {
		err := UpdatePassword_RequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatePassword_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdatePassword_Request) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdatePassword_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePassword_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdatePassword_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePassword_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePassword_RequestMultiError) AllErrors() []error { return m }

// UpdatePassword_RequestValidationError is the validation error returned by
// UpdatePassword_Request.Validate if the designated constraints aren't met.
type UpdatePassword_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePassword_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePassword_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePassword_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePassword_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePassword_RequestValidationError) ErrorName() string {
	return "UpdatePassword_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePassword_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePassword_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePassword_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePassword_RequestValidationError{}

// Validate checks the field values on UpdatePassword_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePassword_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePassword_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePassword_ResponseMultiError, or nil if none found.
func (m *UpdatePassword_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePassword_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdatePassword_ResponseMultiError(errors)
	}

	return nil
}

// UpdatePassword_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePassword_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdatePassword_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePassword_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePassword_ResponseMultiError) AllErrors() []error { return m }

// UpdatePassword_ResponseValidationError is the validation error returned by
// UpdatePassword_Response.Validate if the designated constraints aren't met.
type UpdatePassword_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePassword_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePassword_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePassword_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePassword_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePassword_ResponseValidationError) ErrorName() string {
	return "UpdatePassword_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePassword_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePassword_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePassword_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePassword_ResponseValidationError{}

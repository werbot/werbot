syntax = "proto3";

package user;

option go_package = "github.com/werbot/werbot/api/proto/user";

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";

service UserHandlers {
    rpc ListUsers(ListUsers.Request) returns (ListUsers.Response) {}
    rpc User(User.Request) returns (User.Response) {}
    rpc AddUser(AddUser.Request) returns (AddUser.Response) {}
    rpc UpdateUser(UpdateUser.Request) returns (UpdateUser.Response) {}
    rpc DeleteUser(DeleteUser.Request) returns (DeleteUser.Response) {}

    rpc SignIn(SignIn.Request) returns (User.Response) {}
    rpc ResetPassword(ResetPassword.Request) returns (ResetPassword.Response) {}
    rpc UpdatePassword(UpdatePassword.Request) returns (UpdatePassword.Response) {}
}

// -----------------------------------------------------
// global messages
extend google.protobuf.FieldOptions {
    string sql_name = 50000;
}

enum RoleUser {
    ROLE_USER_UNSPECIFIED = 0;
    USER = 1;
    MANAGER = 2;
    ADMIN = 3;
}

message UserParameters {
    string user_name = 1;
    string user_id = 2;
    RoleUser roles = 3;
    string sub = 4;
}

message AuthUserInfo  {
    string user_id = 1;
    string name = 2;
    string email = 3;
    RoleUser user_role = 4;
}
// -----------------------------------------------------


// rpc ListUsers
message ListUsers {
    message Request {
        int32 limit = 1;
        int32 offset = 2;
        string sort_by = 3;
        string query = 4;
    }

    message Response {
        message UserInfo{
            int32 servers_count = 1;
            int32 projects_count = 2;
            int32 keys_count = 3;
            User.Response user = 4;
        }
        int32 total = 1;
        repeated UserInfo users = 2;
    }
}

// rpc User
message User {
    message Request {
        string user_id = 1; // @gotags: validate:"omitempty,uuid" query:"user_id" params:"user_id"
    }

    message Response {
        string user_id = 1;
        string fio = 2;
        string name = 3;
        string email = 4;
        bool enabled = 5;
        bool confirmed = 6;
        RoleUser role = 7;
        string password =8;
        google.protobuf.Timestamp last_active = 9;
        google.protobuf.Timestamp register_date = 10;
    }
}
// -----------------------------------------------------


// rpc AddUser
message AddUser {
    message Request {
        string name = 1;     // @gotags: validate:"required,alphanum"
        string email = 2;    // @gotags: validate:"required,email"
        string fio = 3;      // @gotags: validate:"required,min=5"
        bool enabled = 4;
        bool confirmed = 5;
        string password = 6; // @gotags: validate:"required,min=8"
    }

    message Response {
        string user_id = 1;
    }
}
// -----------------------------------------------------


// rpc UpdateUser
message UpdateUser {
    message Request {
        // @gotags: validate:"uuid" sql_name:"id"
        string user_id = 1 [(sql_name) = "id"];
        // @gotags: validate:"omitempty,alphanum" sql_name:"name"
        string name = 2    [(sql_name) = "name"];
        // @gotags: validate:"required,email" sql_name:"email"
        string email = 3   [(sql_name) = "email"];
        // @gotags: validate:"required,min=5" sql_name:"fio"
        string fio = 4     [(sql_name) = "fio"];
        // @gotags: sql_name:"enabled"
        bool enabled = 5   [(sql_name) = "enabled"];
        // @gotags: sql_name:"confirmed"
        bool confirmed = 6 [(sql_name) = "confirmed"];
    }

    message Response{}
}

// -----------------------------------------------------

// rpc DeleteUser
message DeleteUser{
    message Request {
        string user_id = 1;
        oneof request {
            string password = 2;
            string token = 3;
        }
    }

    message Response {
        string name = 1;
        string email = 2;
        string token = 3;
    }
}
// -----------------------------------------------------


// rpc SignIn
message SignIn {
    message Request {
        string email = 2;    // @gotags: validate:"required,email"
        string password = 3; // @gotags: validate:"required"
    }
}
// -----------------------------------------------------


// rpc ResetPassword
message ResetPassword {
    message Request {
        oneof request {
            string email = 1;    // @gotags: validate:"email"
            string password = 2; // @gotags: validate:"min=8"
        }
        string token = 3;        // @gotags: validate:"omitempty,uuid"
    }
    message Response {
        string message = 1;
        string token = 2;
    }
}
// -----------------------------------------------------


// rpc UpdatePassword
message UpdatePassword {
    message Request {
        string user_id = 1;
        string old_password = 2;
        string new_password = 3;
    }

    message Response{
        string message = 1;
    }
}
// -----------------------------------------------------

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logging.proto

package logging

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _logging_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListRecords with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecords with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRecordsMultiError, or
// nil if none found.
func (m *ListRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRecordsMultiError(errors)
	}

	return nil
}

// ListRecordsMultiError is an error wrapping multiple validation errors
// returned by ListRecords.ValidateAll() if the designated constraints aren't met.
type ListRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecordsMultiError) AllErrors() []error { return m }

// ListRecordsValidationError is the validation error returned by
// ListRecords.Validate if the designated constraints aren't met.
type ListRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecordsValidationError) ErrorName() string { return "ListRecordsValidationError" }

// Error satisfies the builtin error interface
func (e ListRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecordsValidationError{}

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on AddRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRecordMultiError, or nil
// if none found.
func (m *AddRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRecordMultiError(errors)
	}

	return nil
}

// AddRecordMultiError is an error wrapping multiple validation errors returned
// by AddRecord.ValidateAll() if the designated constraints aren't met.
type AddRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRecordMultiError) AllErrors() []error { return m }

// AddRecordValidationError is the validation error returned by
// AddRecord.Validate if the designated constraints aren't met.
type AddRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRecordValidationError) ErrorName() string { return "AddRecordValidationError" }

// Error satisfies the builtin error interface
func (e AddRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRecordValidationError{}

// Validate checks the field values on ListRecords_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecords_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecords_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecords_RequestMultiError, or nil if none found.
func (m *ListRecords_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecords_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Logger_name[int32(m.GetLogger())]; !ok {
		err := ListRecords_RequestValidationError{
			field:  "Logger",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ListRecords_RequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRecords_RequestMultiError(errors)
	}

	return nil
}

func (m *ListRecords_Request) _validateUuid(uuid string) error {
	if matched := _logging_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListRecords_RequestMultiError is an error wrapping multiple validation
// errors returned by ListRecords_Request.ValidateAll() if the designated
// constraints aren't met.
type ListRecords_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecords_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecords_RequestMultiError) AllErrors() []error { return m }

// ListRecords_RequestValidationError is the validation error returned by
// ListRecords_Request.Validate if the designated constraints aren't met.
type ListRecords_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecords_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecords_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecords_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecords_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecords_RequestValidationError) ErrorName() string {
	return "ListRecords_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecords_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecords_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecords_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecords_RequestValidationError{}

// Validate checks the field values on ListRecords_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecords_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecords_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecords_ResponseMultiError, or nil if none found.
func (m *ListRecords_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecords_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRecords_ResponseMultiError(errors)
	}

	return nil
}

// ListRecords_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListRecords_Response.ValidateAll() if the designated
// constraints aren't met.
type ListRecords_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecords_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecords_ResponseMultiError) AllErrors() []error { return m }

// ListRecords_ResponseValidationError is the validation error returned by
// ListRecords_Response.Validate if the designated constraints aren't met.
type ListRecords_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecords_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecords_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecords_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecords_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecords_ResponseValidationError) ErrorName() string {
	return "ListRecords_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecords_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecords_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecords_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecords_ResponseValidationError{}

// Validate checks the field values on Record_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Record_RequestMultiError,
// or nil if none found.
func (m *Record_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Record_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRecordId()); err != nil {
		err = Record_RequestValidationError{
			field:  "RecordId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Record_RequestMultiError(errors)
	}

	return nil
}

func (m *Record_Request) _validateUuid(uuid string) error {
	if matched := _logging_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Record_RequestMultiError is an error wrapping multiple validation errors
// returned by Record_Request.ValidateAll() if the designated constraints
// aren't met.
type Record_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Record_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Record_RequestMultiError) AllErrors() []error { return m }

// Record_RequestValidationError is the validation error returned by
// Record_Request.Validate if the designated constraints aren't met.
type Record_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Record_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Record_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Record_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Record_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Record_RequestValidationError) ErrorName() string { return "Record_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Record_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Record_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Record_RequestValidationError{}

// Validate checks the field values on Record_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Record_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Record_ResponseMultiError, or nil if none found.
func (m *Record_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Record_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Record_ResponseMultiError(errors)
	}

	return nil
}

// Record_ResponseMultiError is an error wrapping multiple validation errors
// returned by Record_Response.ValidateAll() if the designated constraints
// aren't met.
type Record_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Record_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Record_ResponseMultiError) AllErrors() []error { return m }

// Record_ResponseValidationError is the validation error returned by
// Record_Response.Validate if the designated constraints aren't met.
type Record_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Record_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Record_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Record_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Record_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Record_ResponseValidationError) ErrorName() string { return "Record_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Record_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Record_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Record_ResponseValidationError{}

// Validate checks the field values on AddRecord_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRecord_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRecord_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRecord_RequestMultiError, or nil if none found.
func (m *AddRecord_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRecord_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Logger_name[int32(m.GetLogger())]; !ok {
		err := AddRecord_RequestValidationError{
			field:  "Logger",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := EventType_name[int32(m.GetEvent())]; !ok {
		err := AddRecord_RequestValidationError{
			field:  "Event",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		err = AddRecord_RequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddRecord_RequestMultiError(errors)
	}

	return nil
}

func (m *AddRecord_Request) _validateUuid(uuid string) error {
	if matched := _logging_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddRecord_RequestMultiError is an error wrapping multiple validation errors
// returned by AddRecord_Request.ValidateAll() if the designated constraints
// aren't met.
type AddRecord_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRecord_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRecord_RequestMultiError) AllErrors() []error { return m }

// AddRecord_RequestValidationError is the validation error returned by
// AddRecord_Request.Validate if the designated constraints aren't met.
type AddRecord_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRecord_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRecord_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRecord_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRecord_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRecord_RequestValidationError) ErrorName() string {
	return "AddRecord_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRecord_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRecord_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRecord_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRecord_RequestValidationError{}

// Validate checks the field values on AddRecord_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRecord_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRecord_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRecord_ResponseMultiError, or nil if none found.
func (m *AddRecord_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRecord_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRecord_ResponseMultiError(errors)
	}

	return nil
}

// AddRecord_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddRecord_Response.ValidateAll() if the designated constraints
// aren't met.
type AddRecord_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRecord_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRecord_ResponseMultiError) AllErrors() []error { return m }

// AddRecord_ResponseValidationError is the validation error returned by
// AddRecord_Response.Validate if the designated constraints aren't met.
type AddRecord_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRecord_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRecord_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRecord_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRecord_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRecord_ResponseValidationError) ErrorName() string {
	return "AddRecord_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRecord_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRecord_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRecord_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRecord_ResponseValidationError{}

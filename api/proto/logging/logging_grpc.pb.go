// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: logging.proto

package logging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggingHandlersClient is the client API for LoggingHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggingHandlersClient interface {
	AddLogRecord(ctx context.Context, in *AddLogRecord_Request, opts ...grpc.CallOption) (*AddLogRecord_Response, error)
}

type loggingHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingHandlersClient(cc grpc.ClientConnInterface) LoggingHandlersClient {
	return &loggingHandlersClient{cc}
}

func (c *loggingHandlersClient) AddLogRecord(ctx context.Context, in *AddLogRecord_Request, opts ...grpc.CallOption) (*AddLogRecord_Response, error) {
	out := new(AddLogRecord_Response)
	err := c.cc.Invoke(ctx, "/logging.LoggingHandlers/AddLogRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggingHandlersServer is the server API for LoggingHandlers service.
// All implementations must embed UnimplementedLoggingHandlersServer
// for forward compatibility
type LoggingHandlersServer interface {
	AddLogRecord(context.Context, *AddLogRecord_Request) (*AddLogRecord_Response, error)
	mustEmbedUnimplementedLoggingHandlersServer()
}

// UnimplementedLoggingHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedLoggingHandlersServer struct {
}

func (UnimplementedLoggingHandlersServer) AddLogRecord(context.Context, *AddLogRecord_Request) (*AddLogRecord_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogRecord not implemented")
}
func (UnimplementedLoggingHandlersServer) mustEmbedUnimplementedLoggingHandlersServer() {}

// UnsafeLoggingHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggingHandlersServer will
// result in compilation errors.
type UnsafeLoggingHandlersServer interface {
	mustEmbedUnimplementedLoggingHandlersServer()
}

func RegisterLoggingHandlersServer(s grpc.ServiceRegistrar, srv LoggingHandlersServer) {
	s.RegisterService(&LoggingHandlers_ServiceDesc, srv)
}

func _LoggingHandlers_AddLogRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogRecord_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingHandlersServer).AddLogRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logging.LoggingHandlers/AddLogRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingHandlersServer).AddLogRecord(ctx, req.(*AddLogRecord_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// LoggingHandlers_ServiceDesc is the grpc.ServiceDesc for LoggingHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoggingHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logging.LoggingHandlers",
	HandlerType: (*LoggingHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLogRecord",
			Handler:    _LoggingHandlers_AddLogRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logging.proto",
}

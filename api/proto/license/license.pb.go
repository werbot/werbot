// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: license.proto

package license

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -----------------------------------------------------
// global messages
type LicenseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Issued     string                 `protobuf:"bytes,2,opt,name=issued,proto3" json:"issued,omitempty"`
	Customer   string                 `protobuf:"bytes,3,opt,name=customer,proto3" json:"customer,omitempty"`
	Subscriber string                 `protobuf:"bytes,4,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Type       string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Ip         []string               `protobuf:"bytes,6,rep,name=ip,proto3" json:"ip,omitempty"`
	IssuedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	ExpiresAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Limits     *LicenseInfo_Limits    `protobuf:"bytes,9,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *LicenseInfo) Reset() {
	*x = LicenseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo) ProtoMessage() {}

func (x *LicenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseInfo.ProtoReflect.Descriptor instead.
func (*LicenseInfo) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

func (x *LicenseInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LicenseInfo) GetIssued() string {
	if x != nil {
		return x.Issued
	}
	return ""
}

func (x *LicenseInfo) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *LicenseInfo) GetSubscriber() string {
	if x != nil {
		return x.Subscriber
	}
	return ""
}

func (x *LicenseInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LicenseInfo) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *LicenseInfo) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *LicenseInfo) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *LicenseInfo) GetLimits() *LicenseInfo_Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

// rpc AddLicense
type AddLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddLicense) Reset() {
	*x = AddLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLicense) ProtoMessage() {}

func (x *AddLicense) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLicense.ProtoReflect.Descriptor instead.
func (*AddLicense) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1}
}

// rpc License
type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2}
}

// rpc LicenseExpired
type LicenseExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LicenseExpired) Reset() {
	*x = LicenseExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseExpired) ProtoMessage() {}

func (x *LicenseExpired) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseExpired.ProtoReflect.Descriptor instead.
func (*LicenseExpired) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3}
}

type LicenseInfo_Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies int32    `protobuf:"varint,1,opt,name=companies,proto3" json:"companies,omitempty"`
	Servers   int32    `protobuf:"varint,2,opt,name=servers,proto3" json:"servers,omitempty"`
	Users     int32    `protobuf:"varint,3,opt,name=users,proto3" json:"users,omitempty"`
	Modules   []string `protobuf:"bytes,4,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *LicenseInfo_Limits) Reset() {
	*x = LicenseInfo_Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseInfo_Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo_Limits) ProtoMessage() {}

func (x *LicenseInfo_Limits) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseInfo_Limits.ProtoReflect.Descriptor instead.
func (*LicenseInfo_Limits) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LicenseInfo_Limits) GetCompanies() int32 {
	if x != nil {
		return x.Companies
	}
	return 0
}

func (x *LicenseInfo_Limits) GetServers() int32 {
	if x != nil {
		return x.Servers
	}
	return 0
}

func (x *LicenseInfo_Limits) GetUsers() int32 {
	if x != nil {
		return x.Users
	}
	return 0
}

func (x *LicenseInfo_Limits) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

type AddLicense_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Customer   string `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Subscriber string `protobuf:"bytes,3,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Token      string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AddLicense_Request) Reset() {
	*x = AddLicense_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLicense_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLicense_Request) ProtoMessage() {}

func (x *AddLicense_Request) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLicense_Request.ProtoReflect.Descriptor instead.
func (*AddLicense_Request) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AddLicense_Request) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddLicense_Request) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *AddLicense_Request) GetSubscriber() string {
	if x != nil {
		return x.Subscriber
	}
	return ""
}

func (x *AddLicense_Request) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AddLicense_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *AddLicense_Response) Reset() {
	*x = AddLicense_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLicense_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLicense_Response) ProtoMessage() {}

func (x *AddLicense_Response) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLicense_Response.ProtoReflect.Descriptor instead.
func (*AddLicense_Response) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AddLicense_Response) GetLicense() []byte {
	if x != nil {
		return x.License
	}
	return nil
}

type License_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License string `protobuf:"bytes,1,opt,name=License,proto3" json:"License,omitempty" query:"license" params:"license"`  
}

func (x *License_Request) Reset() {
	*x = License_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Request) ProtoMessage() {}

func (x *License_Request) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Request.ProtoReflect.Descriptor instead.
func (*License_Request) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0}
}

func (x *License_Request) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type License_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License *LicenseInfo `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	Expired bool         `protobuf:"varint,2,opt,name=expired,proto3" json:"expired,omitempty"`
}

func (x *License_Response) Reset() {
	*x = License_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Response) ProtoMessage() {}

func (x *License_Response) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Response.ProtoReflect.Descriptor instead.
func (*License_Response) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 1}
}

func (x *License_Response) GetLicense() *LicenseInfo {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *License_Response) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

type LicenseExpired_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *LicenseExpired_Request) Reset() {
	*x = LicenseExpired_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseExpired_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseExpired_Request) ProtoMessage() {}

func (x *LicenseExpired_Request) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseExpired_Request.ProtoReflect.Descriptor instead.
func (*LicenseExpired_Request) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LicenseExpired_Request) GetLicense() []byte {
	if x != nil {
		return x.License
	}
	return nil
}

type LicenseExpired_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LicenseExpired_Response) Reset() {
	*x = LicenseExpired_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseExpired_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseExpired_Response) ProtoMessage() {}

func (x *LicenseExpired_Response) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseExpired_Response.ProtoReflect.Descriptor instead.
func (*LicenseExpired_Response) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3, 1}
}

func (x *LicenseExpired_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_license_proto protoreflect.FileDescriptor

var file_license_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xba, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x70, 0x0a,
	0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0xdd, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0xa8,
	0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70, 0x01, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xb0, 0x01, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xb0, 0x01, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32,
	0x0b, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x98, 0x01, 0x20, 0xd0,
	0x01, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22,
	0xcd, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x6c, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0xfa, 0x42, 0x44, 0x72, 0x42, 0x32, 0x40,
	0x5e, 0x28, 0x3f, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2b, 0x2f,
	0x5d, 0x7b, 0x34, 0x7d, 0x29, 0x2a, 0x28, 0x3f, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2b, 0x2f, 0x5d, 0x7b, 0x32, 0x7d, 0x3d, 0x3d, 0x7c, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2b, 0x2f, 0x5d, 0x7b, 0x33, 0x7d, 0x3d, 0x29, 0x3f, 0x24,
	0x52, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x59, 0x0a, 0x0e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x1a, 0x23, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xf5, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x49,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x77, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x2f, 0x77, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_license_proto_rawDescOnce sync.Once
	file_license_proto_rawDescData = file_license_proto_rawDesc
)

func file_license_proto_rawDescGZIP() []byte {
	file_license_proto_rawDescOnce.Do(func() {
		file_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_license_proto_rawDescData)
	})
	return file_license_proto_rawDescData
}

var file_license_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_license_proto_goTypes = []interface{}{
	(*LicenseInfo)(nil),             // 0: license.LicenseInfo
	(*AddLicense)(nil),              // 1: license.AddLicense
	(*License)(nil),                 // 2: license.License
	(*LicenseExpired)(nil),          // 3: license.LicenseExpired
	(*LicenseInfo_Limits)(nil),      // 4: license.LicenseInfo.Limits
	(*AddLicense_Request)(nil),      // 5: license.AddLicense.Request
	(*AddLicense_Response)(nil),     // 6: license.AddLicense.Response
	(*License_Request)(nil),         // 7: license.License.Request
	(*License_Response)(nil),        // 8: license.License.Response
	(*LicenseExpired_Request)(nil),  // 9: license.LicenseExpired.Request
	(*LicenseExpired_Response)(nil), // 10: license.LicenseExpired.Response
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
}
var file_license_proto_depIdxs = []int32{
	11, // 0: license.LicenseInfo.issued_at:type_name -> google.protobuf.Timestamp
	11, // 1: license.LicenseInfo.expires_at:type_name -> google.protobuf.Timestamp
	4,  // 2: license.LicenseInfo.limits:type_name -> license.LicenseInfo.Limits
	0,  // 3: license.License.Response.license:type_name -> license.LicenseInfo
	5,  // 4: license.LicenseHandlers.AddLicense:input_type -> license.AddLicense.Request
	7,  // 5: license.LicenseHandlers.License:input_type -> license.License.Request
	9,  // 6: license.LicenseHandlers.LicenseExpired:input_type -> license.LicenseExpired.Request
	6,  // 7: license.LicenseHandlers.AddLicense:output_type -> license.AddLicense.Response
	8,  // 8: license.LicenseHandlers.License:output_type -> license.License.Response
	10, // 9: license.LicenseHandlers.LicenseExpired:output_type -> license.LicenseExpired.Response
	7,  // [7:10] is the sub-list for method output_type
	4,  // [4:7] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_license_proto_init() }
func file_license_proto_init() {
	if File_license_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_license_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseInfo_Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLicense_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLicense_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseExpired_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseExpired_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_license_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_license_proto_goTypes,
		DependencyIndexes: file_license_proto_depIdxs,
		MessageInfos:      file_license_proto_msgTypes,
	}.Build()
	File_license_proto = out.File
	file_license_proto_rawDesc = nil
	file_license_proto_goTypes = nil
	file_license_proto_depIdxs = nil
}

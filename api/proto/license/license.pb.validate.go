// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: license.proto

package license

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _license_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on LicenseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LicenseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LicenseInfoMultiError, or
// nil if none found.
func (m *LicenseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Issued

	// no validation rules for Customer

	// no validation rules for Subscriber

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetIssuedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LicenseInfoValidationError{
					field:  "IssuedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LicenseInfoValidationError{
					field:  "IssuedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseInfoValidationError{
				field:  "IssuedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LicenseInfoValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LicenseInfoValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseInfoValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLimits()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LicenseInfoValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LicenseInfoValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLimits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseInfoValidationError{
				field:  "Limits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LicenseInfoMultiError(errors)
	}

	return nil
}

// LicenseInfoMultiError is an error wrapping multiple validation errors
// returned by LicenseInfo.ValidateAll() if the designated constraints aren't met.
type LicenseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseInfoMultiError) AllErrors() []error { return m }

// LicenseInfoValidationError is the validation error returned by
// LicenseInfo.Validate if the designated constraints aren't met.
type LicenseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseInfoValidationError) ErrorName() string { return "LicenseInfoValidationError" }

// Error satisfies the builtin error interface
func (e LicenseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseInfoValidationError{}

// Validate checks the field values on AddLicense with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddLicense) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLicense with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddLicenseMultiError, or
// nil if none found.
func (m *AddLicense) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLicense) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddLicenseMultiError(errors)
	}

	return nil
}

// AddLicenseMultiError is an error wrapping multiple validation errors
// returned by AddLicense.ValidateAll() if the designated constraints aren't met.
type AddLicenseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLicenseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLicenseMultiError) AllErrors() []error { return m }

// AddLicenseValidationError is the validation error returned by
// AddLicense.Validate if the designated constraints aren't met.
type AddLicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLicenseValidationError) ErrorName() string { return "AddLicenseValidationError" }

// Error satisfies the builtin error interface
func (e AddLicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLicenseValidationError{}

// Validate checks the field values on License with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *License) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on License with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LicenseMultiError, or nil if none found.
func (m *License) ValidateAll() error {
	return m.validate(true)
}

func (m *License) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LicenseMultiError(errors)
	}

	return nil
}

// LicenseMultiError is an error wrapping multiple validation errors returned
// by License.ValidateAll() if the designated constraints aren't met.
type LicenseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseMultiError) AllErrors() []error { return m }

// LicenseValidationError is the validation error returned by License.Validate
// if the designated constraints aren't met.
type LicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseValidationError) ErrorName() string { return "LicenseValidationError" }

// Error satisfies the builtin error interface
func (e LicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseValidationError{}

// Validate checks the field values on LicenseExpired with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LicenseExpired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseExpired with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LicenseExpiredMultiError,
// or nil if none found.
func (m *LicenseExpired) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseExpired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LicenseExpiredMultiError(errors)
	}

	return nil
}

// LicenseExpiredMultiError is an error wrapping multiple validation errors
// returned by LicenseExpired.ValidateAll() if the designated constraints
// aren't met.
type LicenseExpiredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseExpiredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseExpiredMultiError) AllErrors() []error { return m }

// LicenseExpiredValidationError is the validation error returned by
// LicenseExpired.Validate if the designated constraints aren't met.
type LicenseExpiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseExpiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseExpiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseExpiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseExpiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseExpiredValidationError) ErrorName() string { return "LicenseExpiredValidationError" }

// Error satisfies the builtin error interface
func (e LicenseExpiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseExpired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseExpiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseExpiredValidationError{}

// Validate checks the field values on LicenseInfo_Limits with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LicenseInfo_Limits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseInfo_Limits with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LicenseInfo_LimitsMultiError, or nil if none found.
func (m *LicenseInfo_Limits) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseInfo_Limits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Companies

	// no validation rules for Servers

	// no validation rules for Users

	if len(errors) > 0 {
		return LicenseInfo_LimitsMultiError(errors)
	}

	return nil
}

// LicenseInfo_LimitsMultiError is an error wrapping multiple validation errors
// returned by LicenseInfo_Limits.ValidateAll() if the designated constraints
// aren't met.
type LicenseInfo_LimitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseInfo_LimitsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseInfo_LimitsMultiError) AllErrors() []error { return m }

// LicenseInfo_LimitsValidationError is the validation error returned by
// LicenseInfo_Limits.Validate if the designated constraints aren't met.
type LicenseInfo_LimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseInfo_LimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseInfo_LimitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseInfo_LimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseInfo_LimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseInfo_LimitsValidationError) ErrorName() string {
	return "LicenseInfo_LimitsValidationError"
}

// Error satisfies the builtin error interface
func (e LicenseInfo_LimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseInfo_Limits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseInfo_LimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseInfo_LimitsValidationError{}

// Validate checks the field values on AddLicense_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLicense_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLicense_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLicense_RequestMultiError, or nil if none found.
func (m *AddLicense_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLicense_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := AddLicense_RequestValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCustomer() != "" {

		if err := m._validateUuid(m.GetCustomer()); err != nil {
			err = AddLicense_RequestValidationError{
				field:  "Customer",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetSubscriber() != "" {

		if err := m._validateUuid(m.GetSubscriber()); err != nil {
			err = AddLicense_RequestValidationError{
				field:  "Subscriber",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetToken() != "" {

		if utf8.RuneCountInString(m.GetToken()) != 32 {
			err := AddLicense_RequestValidationError{
				field:  "Token",
				reason: "value length must be 32 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

		if !_AddLicense_Request_Token_Pattern.MatchString(m.GetToken()) {
			err := AddLicense_RequestValidationError{
				field:  "Token",
				reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AddLicense_RequestMultiError(errors)
	}

	return nil
}

func (m *AddLicense_Request) _validateUuid(uuid string) error {
	if matched := _license_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddLicense_RequestMultiError is an error wrapping multiple validation errors
// returned by AddLicense_Request.ValidateAll() if the designated constraints
// aren't met.
type AddLicense_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLicense_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLicense_RequestMultiError) AllErrors() []error { return m }

// AddLicense_RequestValidationError is the validation error returned by
// AddLicense_Request.Validate if the designated constraints aren't met.
type AddLicense_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLicense_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLicense_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLicense_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLicense_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLicense_RequestValidationError) ErrorName() string {
	return "AddLicense_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddLicense_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLicense_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLicense_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLicense_RequestValidationError{}

var _AddLicense_Request_Token_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on AddLicense_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLicense_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLicense_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLicense_ResponseMultiError, or nil if none found.
func (m *AddLicense_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLicense_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for License

	if len(errors) > 0 {
		return AddLicense_ResponseMultiError(errors)
	}

	return nil
}

// AddLicense_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddLicense_Response.ValidateAll() if the designated
// constraints aren't met.
type AddLicense_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLicense_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLicense_ResponseMultiError) AllErrors() []error { return m }

// AddLicense_ResponseValidationError is the validation error returned by
// AddLicense_Response.Validate if the designated constraints aren't met.
type AddLicense_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLicense_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLicense_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLicense_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLicense_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLicense_ResponseValidationError) ErrorName() string {
	return "AddLicense_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddLicense_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLicense_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLicense_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLicense_ResponseValidationError{}

// Validate checks the field values on License_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *License_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on License_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// License_RequestMultiError, or nil if none found.
func (m *License_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *License_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_License_Request_License_Pattern.MatchString(m.GetLicense()) {
		err := License_RequestValidationError{
			field:  "License",
			reason: "value does not match regex pattern \"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return License_RequestMultiError(errors)
	}

	return nil
}

// License_RequestMultiError is an error wrapping multiple validation errors
// returned by License_Request.ValidateAll() if the designated constraints
// aren't met.
type License_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m License_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m License_RequestMultiError) AllErrors() []error { return m }

// License_RequestValidationError is the validation error returned by
// License_Request.Validate if the designated constraints aren't met.
type License_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e License_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e License_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e License_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e License_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e License_RequestValidationError) ErrorName() string { return "License_RequestValidationError" }

// Error satisfies the builtin error interface
func (e License_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicense_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = License_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = License_RequestValidationError{}

var _License_Request_License_Pattern = regexp.MustCompile("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")

// Validate checks the field values on License_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *License_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on License_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// License_ResponseMultiError, or nil if none found.
func (m *License_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *License_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLicense()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, License_ResponseValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, License_ResponseValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLicense()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return License_ResponseValidationError{
				field:  "License",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expired

	if len(errors) > 0 {
		return License_ResponseMultiError(errors)
	}

	return nil
}

// License_ResponseMultiError is an error wrapping multiple validation errors
// returned by License_Response.ValidateAll() if the designated constraints
// aren't met.
type License_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m License_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m License_ResponseMultiError) AllErrors() []error { return m }

// License_ResponseValidationError is the validation error returned by
// License_Response.Validate if the designated constraints aren't met.
type License_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e License_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e License_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e License_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e License_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e License_ResponseValidationError) ErrorName() string { return "License_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e License_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicense_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = License_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = License_ResponseValidationError{}

// Validate checks the field values on LicenseExpired_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LicenseExpired_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseExpired_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LicenseExpired_RequestMultiError, or nil if none found.
func (m *LicenseExpired_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseExpired_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for License

	if len(errors) > 0 {
		return LicenseExpired_RequestMultiError(errors)
	}

	return nil
}

// LicenseExpired_RequestMultiError is an error wrapping multiple validation
// errors returned by LicenseExpired_Request.ValidateAll() if the designated
// constraints aren't met.
type LicenseExpired_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseExpired_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseExpired_RequestMultiError) AllErrors() []error { return m }

// LicenseExpired_RequestValidationError is the validation error returned by
// LicenseExpired_Request.Validate if the designated constraints aren't met.
type LicenseExpired_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseExpired_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseExpired_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseExpired_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseExpired_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseExpired_RequestValidationError) ErrorName() string {
	return "LicenseExpired_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e LicenseExpired_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseExpired_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseExpired_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseExpired_RequestValidationError{}

// Validate checks the field values on LicenseExpired_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LicenseExpired_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseExpired_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LicenseExpired_ResponseMultiError, or nil if none found.
func (m *LicenseExpired_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseExpired_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return LicenseExpired_ResponseMultiError(errors)
	}

	return nil
}

// LicenseExpired_ResponseMultiError is an error wrapping multiple validation
// errors returned by LicenseExpired_Response.ValidateAll() if the designated
// constraints aren't met.
type LicenseExpired_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseExpired_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseExpired_ResponseMultiError) AllErrors() []error { return m }

// LicenseExpired_ResponseValidationError is the validation error returned by
// LicenseExpired_Response.Validate if the designated constraints aren't met.
type LicenseExpired_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseExpired_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseExpired_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseExpired_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseExpired_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseExpired_ResponseValidationError) ErrorName() string {
	return "LicenseExpired_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LicenseExpired_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseExpired_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseExpired_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseExpired_ResponseValidationError{}

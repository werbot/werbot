// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: key.proto

package key

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _key_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListPublicKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPublicKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicKeys with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPublicKeysMultiError,
// or nil if none found.
func (m *ListPublicKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPublicKeysMultiError(errors)
	}

	return nil
}

// ListPublicKeysMultiError is an error wrapping multiple validation errors
// returned by ListPublicKeys.ValidateAll() if the designated constraints
// aren't met.
type ListPublicKeysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicKeysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicKeysMultiError) AllErrors() []error { return m }

// ListPublicKeysValidationError is the validation error returned by
// ListPublicKeys.Validate if the designated constraints aren't met.
type ListPublicKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicKeysValidationError) ErrorName() string { return "ListPublicKeysValidationError" }

// Error satisfies the builtin error interface
func (e ListPublicKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicKeysValidationError{}

// Validate checks the field values on PublicKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublicKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublicKeyMultiError, or nil
// if none found.
func (m *PublicKey) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublicKeyMultiError(errors)
	}

	return nil
}

// PublicKeyMultiError is an error wrapping multiple validation errors returned
// by PublicKey.ValidateAll() if the designated constraints aren't met.
type PublicKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyMultiError) AllErrors() []error { return m }

// PublicKeyValidationError is the validation error returned by
// PublicKey.Validate if the designated constraints aren't met.
type PublicKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyValidationError) ErrorName() string { return "PublicKeyValidationError" }

// Error satisfies the builtin error interface
func (e PublicKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyValidationError{}

// Validate checks the field values on AddPublicKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddPublicKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPublicKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddPublicKeyMultiError, or
// nil if none found.
func (m *AddPublicKey) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPublicKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddPublicKeyMultiError(errors)
	}

	return nil
}

// AddPublicKeyMultiError is an error wrapping multiple validation errors
// returned by AddPublicKey.ValidateAll() if the designated constraints aren't met.
type AddPublicKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPublicKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPublicKeyMultiError) AllErrors() []error { return m }

// AddPublicKeyValidationError is the validation error returned by
// AddPublicKey.Validate if the designated constraints aren't met.
type AddPublicKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPublicKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPublicKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPublicKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPublicKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPublicKeyValidationError) ErrorName() string { return "AddPublicKeyValidationError" }

// Error satisfies the builtin error interface
func (e AddPublicKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPublicKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPublicKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPublicKeyValidationError{}

// Validate checks the field values on UpdatePublicKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublicKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublicKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePublicKeyMultiError, or nil if none found.
func (m *UpdatePublicKey) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublicKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePublicKeyMultiError(errors)
	}

	return nil
}

// UpdatePublicKeyMultiError is an error wrapping multiple validation errors
// returned by UpdatePublicKey.ValidateAll() if the designated constraints
// aren't met.
type UpdatePublicKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublicKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublicKeyMultiError) AllErrors() []error { return m }

// UpdatePublicKeyValidationError is the validation error returned by
// UpdatePublicKey.Validate if the designated constraints aren't met.
type UpdatePublicKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublicKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublicKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublicKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublicKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublicKeyValidationError) ErrorName() string { return "UpdatePublicKeyValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePublicKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublicKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublicKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublicKeyValidationError{}

// Validate checks the field values on DeletePublicKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePublicKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublicKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePublicKeyMultiError, or nil if none found.
func (m *DeletePublicKey) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublicKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePublicKeyMultiError(errors)
	}

	return nil
}

// DeletePublicKeyMultiError is an error wrapping multiple validation errors
// returned by DeletePublicKey.ValidateAll() if the designated constraints
// aren't met.
type DeletePublicKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublicKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublicKeyMultiError) AllErrors() []error { return m }

// DeletePublicKeyValidationError is the validation error returned by
// DeletePublicKey.Validate if the designated constraints aren't met.
type DeletePublicKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublicKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublicKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublicKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublicKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublicKeyValidationError) ErrorName() string { return "DeletePublicKeyValidationError" }

// Error satisfies the builtin error interface
func (e DeletePublicKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublicKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublicKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublicKeyValidationError{}

// Validate checks the field values on GenerateSSHKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateSSHKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSSHKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateSSHKeyMultiError,
// or nil if none found.
func (m *GenerateSSHKey) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSSHKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateSSHKeyMultiError(errors)
	}

	return nil
}

// GenerateSSHKeyMultiError is an error wrapping multiple validation errors
// returned by GenerateSSHKey.ValidateAll() if the designated constraints
// aren't met.
type GenerateSSHKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSSHKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSSHKeyMultiError) AllErrors() []error { return m }

// GenerateSSHKeyValidationError is the validation error returned by
// GenerateSSHKey.Validate if the designated constraints aren't met.
type GenerateSSHKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSSHKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSSHKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSSHKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSSHKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSSHKeyValidationError) ErrorName() string { return "GenerateSSHKeyValidationError" }

// Error satisfies the builtin error interface
func (e GenerateSSHKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSSHKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSSHKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSSHKeyValidationError{}

// Validate checks the field values on ListPublicKeys_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicKeys_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicKeys_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublicKeys_RequestMultiError, or nil if none found.
func (m *ListPublicKeys_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicKeys_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListPublicKeys_RequestMultiError(errors)
	}

	return nil
}

// ListPublicKeys_RequestMultiError is an error wrapping multiple validation
// errors returned by ListPublicKeys_Request.ValidateAll() if the designated
// constraints aren't met.
type ListPublicKeys_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicKeys_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicKeys_RequestMultiError) AllErrors() []error { return m }

// ListPublicKeys_RequestValidationError is the validation error returned by
// ListPublicKeys_Request.Validate if the designated constraints aren't met.
type ListPublicKeys_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicKeys_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicKeys_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicKeys_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicKeys_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicKeys_RequestValidationError) ErrorName() string {
	return "ListPublicKeys_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicKeys_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicKeys_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicKeys_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicKeys_RequestValidationError{}

// Validate checks the field values on ListPublicKeys_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicKeys_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicKeys_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublicKeys_ResponseMultiError, or nil if none found.
func (m *ListPublicKeys_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicKeys_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetPublicKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicKeys_ResponseValidationError{
						field:  fmt.Sprintf("PublicKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicKeys_ResponseValidationError{
						field:  fmt.Sprintf("PublicKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicKeys_ResponseValidationError{
					field:  fmt.Sprintf("PublicKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPublicKeys_ResponseMultiError(errors)
	}

	return nil
}

// ListPublicKeys_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListPublicKeys_Response.ValidateAll() if the designated
// constraints aren't met.
type ListPublicKeys_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicKeys_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicKeys_ResponseMultiError) AllErrors() []error { return m }

// ListPublicKeys_ResponseValidationError is the validation error returned by
// ListPublicKeys_Response.Validate if the designated constraints aren't met.
type ListPublicKeys_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicKeys_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicKeys_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicKeys_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicKeys_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicKeys_ResponseValidationError) ErrorName() string {
	return "ListPublicKeys_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicKeys_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicKeys_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicKeys_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicKeys_ResponseValidationError{}

// Validate checks the field values on PublicKey_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublicKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicKey_RequestMultiError, or nil if none found.
func (m *PublicKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKeyId() != "" {

		if err := m._validateUuid(m.GetKeyId()); err != nil {
			err = PublicKey_RequestValidationError{
				field:  "KeyId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = PublicKey_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PublicKey_RequestMultiError(errors)
	}

	return nil
}

func (m *PublicKey_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PublicKey_RequestMultiError is an error wrapping multiple validation errors
// returned by PublicKey_Request.ValidateAll() if the designated constraints
// aren't met.
type PublicKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKey_RequestMultiError) AllErrors() []error { return m }

// PublicKey_RequestValidationError is the validation error returned by
// PublicKey_Request.Validate if the designated constraints aren't met.
type PublicKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKey_RequestValidationError) ErrorName() string {
	return "PublicKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKey_RequestValidationError{}

// Validate checks the field values on PublicKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicKey_ResponseMultiError, or nil if none found.
func (m *PublicKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for Title

	// no validation rules for Key

	// no validation rules for Fingerprint

	if all {
		switch v := interface{}(m.GetLastUsed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicKey_ResponseValidationError{
					field:  "LastUsed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicKey_ResponseValidationError{
					field:  "LastUsed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUsed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicKey_ResponseValidationError{
				field:  "LastUsed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicKey_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicKey_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicKey_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublicKey_ResponseMultiError(errors)
	}

	return nil
}

// PublicKey_ResponseMultiError is an error wrapping multiple validation errors
// returned by PublicKey_Response.ValidateAll() if the designated constraints
// aren't met.
type PublicKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKey_ResponseMultiError) AllErrors() []error { return m }

// PublicKey_ResponseValidationError is the validation error returned by
// PublicKey_Response.Validate if the designated constraints aren't met.
type PublicKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKey_ResponseValidationError) ErrorName() string {
	return "PublicKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKey_ResponseValidationError{}

// Validate checks the field values on AddPublicKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPublicKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPublicKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPublicKey_RequestMultiError, or nil if none found.
func (m *AddPublicKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPublicKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = AddPublicKey_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := AddPublicKey_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 128 {
		err := AddPublicKey_RequestValidationError{
			field:  "Key",
			reason: "value length must be at least 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPublicKey_RequestMultiError(errors)
	}

	return nil
}

func (m *AddPublicKey_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddPublicKey_RequestMultiError is an error wrapping multiple validation
// errors returned by AddPublicKey_Request.ValidateAll() if the designated
// constraints aren't met.
type AddPublicKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPublicKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPublicKey_RequestMultiError) AllErrors() []error { return m }

// AddPublicKey_RequestValidationError is the validation error returned by
// AddPublicKey_Request.Validate if the designated constraints aren't met.
type AddPublicKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPublicKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPublicKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPublicKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPublicKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPublicKey_RequestValidationError) ErrorName() string {
	return "AddPublicKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPublicKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPublicKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPublicKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPublicKey_RequestValidationError{}

// Validate checks the field values on AddPublicKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPublicKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPublicKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPublicKey_ResponseMultiError, or nil if none found.
func (m *AddPublicKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPublicKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	if len(errors) > 0 {
		return AddPublicKey_ResponseMultiError(errors)
	}

	return nil
}

// AddPublicKey_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddPublicKey_Response.ValidateAll() if the designated
// constraints aren't met.
type AddPublicKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPublicKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPublicKey_ResponseMultiError) AllErrors() []error { return m }

// AddPublicKey_ResponseValidationError is the validation error returned by
// AddPublicKey_Response.Validate if the designated constraints aren't met.
type AddPublicKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPublicKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPublicKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPublicKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPublicKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPublicKey_ResponseValidationError) ErrorName() string {
	return "AddPublicKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPublicKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPublicKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPublicKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPublicKey_ResponseValidationError{}

// Validate checks the field values on UpdatePublicKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublicKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublicKey_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePublicKey_RequestMultiError, or nil if none found.
func (m *UpdatePublicKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublicKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetKeyId()); err != nil {
		err = UpdatePublicKey_RequestValidationError{
			field:  "KeyId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdatePublicKey_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := UpdatePublicKey_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 128 {
		err := UpdatePublicKey_RequestValidationError{
			field:  "Key",
			reason: "value length must be at least 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatePublicKey_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdatePublicKey_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdatePublicKey_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePublicKey_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdatePublicKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublicKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublicKey_RequestMultiError) AllErrors() []error { return m }

// UpdatePublicKey_RequestValidationError is the validation error returned by
// UpdatePublicKey_Request.Validate if the designated constraints aren't met.
type UpdatePublicKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublicKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublicKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublicKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublicKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublicKey_RequestValidationError) ErrorName() string {
	return "UpdatePublicKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublicKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublicKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublicKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublicKey_RequestValidationError{}

// Validate checks the field values on UpdatePublicKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublicKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublicKey_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePublicKey_ResponseMultiError, or nil if none found.
func (m *UpdatePublicKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublicKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePublicKey_ResponseMultiError(errors)
	}

	return nil
}

// UpdatePublicKey_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePublicKey_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdatePublicKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublicKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublicKey_ResponseMultiError) AllErrors() []error { return m }

// UpdatePublicKey_ResponseValidationError is the validation error returned by
// UpdatePublicKey_Response.Validate if the designated constraints aren't met.
type UpdatePublicKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublicKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublicKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublicKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublicKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublicKey_ResponseValidationError) ErrorName() string {
	return "UpdatePublicKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublicKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublicKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublicKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublicKey_ResponseValidationError{}

// Validate checks the field values on DeletePublicKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublicKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublicKey_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePublicKey_RequestMultiError, or nil if none found.
func (m *DeletePublicKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublicKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = DeletePublicKey_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetKeyId()); err != nil {
		err = DeletePublicKey_RequestValidationError{
			field:  "KeyId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePublicKey_RequestMultiError(errors)
	}

	return nil
}

func (m *DeletePublicKey_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeletePublicKey_RequestMultiError is an error wrapping multiple validation
// errors returned by DeletePublicKey_Request.ValidateAll() if the designated
// constraints aren't met.
type DeletePublicKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublicKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublicKey_RequestMultiError) AllErrors() []error { return m }

// DeletePublicKey_RequestValidationError is the validation error returned by
// DeletePublicKey_Request.Validate if the designated constraints aren't met.
type DeletePublicKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublicKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublicKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublicKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublicKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublicKey_RequestValidationError) ErrorName() string {
	return "DeletePublicKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublicKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublicKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublicKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublicKey_RequestValidationError{}

// Validate checks the field values on DeletePublicKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublicKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublicKey_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePublicKey_ResponseMultiError, or nil if none found.
func (m *DeletePublicKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublicKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePublicKey_ResponseMultiError(errors)
	}

	return nil
}

// DeletePublicKey_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePublicKey_Response.ValidateAll() if the designated
// constraints aren't met.
type DeletePublicKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublicKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublicKey_ResponseMultiError) AllErrors() []error { return m }

// DeletePublicKey_ResponseValidationError is the validation error returned by
// DeletePublicKey_Response.Validate if the designated constraints aren't met.
type DeletePublicKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublicKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublicKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublicKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublicKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublicKey_ResponseValidationError) ErrorName() string {
	return "DeletePublicKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublicKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublicKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublicKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublicKey_ResponseValidationError{}

// Validate checks the field values on GenerateSSHKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSSHKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSSHKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSSHKey_RequestMultiError, or nil if none found.
func (m *GenerateSSHKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSSHKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyType

	if len(errors) > 0 {
		return GenerateSSHKey_RequestMultiError(errors)
	}

	return nil
}

// GenerateSSHKey_RequestMultiError is an error wrapping multiple validation
// errors returned by GenerateSSHKey_Request.ValidateAll() if the designated
// constraints aren't met.
type GenerateSSHKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSSHKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSSHKey_RequestMultiError) AllErrors() []error { return m }

// GenerateSSHKey_RequestValidationError is the validation error returned by
// GenerateSSHKey_Request.Validate if the designated constraints aren't met.
type GenerateSSHKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSSHKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSSHKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSSHKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSSHKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSSHKey_RequestValidationError) ErrorName() string {
	return "GenerateSSHKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSSHKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSSHKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSSHKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSSHKey_RequestValidationError{}

// Validate checks the field values on GenerateSSHKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSSHKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSSHKey_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSSHKey_ResponseMultiError, or nil if none found.
func (m *GenerateSSHKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSSHKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyType

	// no validation rules for Uuid

	// no validation rules for Passphrase

	// no validation rules for Public

	// no validation rules for FingerPrint

	if len(errors) > 0 {
		return GenerateSSHKey_ResponseMultiError(errors)
	}

	return nil
}

// GenerateSSHKey_ResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateSSHKey_Response.ValidateAll() if the designated
// constraints aren't met.
type GenerateSSHKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSSHKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSSHKey_ResponseMultiError) AllErrors() []error { return m }

// GenerateSSHKey_ResponseValidationError is the validation error returned by
// GenerateSSHKey_Response.Validate if the designated constraints aren't met.
type GenerateSSHKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSSHKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSSHKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSSHKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSSHKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSSHKey_ResponseValidationError) ErrorName() string {
	return "GenerateSSHKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSSHKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSSHKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSSHKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSSHKey_ResponseValidationError{}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: key.proto

package key

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _key_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListKeys with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListKeysMultiError, or nil
// if none found.
func (m *ListKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListKeysMultiError(errors)
	}

	return nil
}

// ListKeysMultiError is an error wrapping multiple validation errors returned
// by ListKeys.ValidateAll() if the designated constraints aren't met.
type ListKeysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeysMultiError) AllErrors() []error { return m }

// ListKeysValidationError is the validation error returned by
// ListKeys.Validate if the designated constraints aren't met.
type ListKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeysValidationError) ErrorName() string { return "ListKeysValidationError" }

// Error satisfies the builtin error interface
func (e ListKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeysValidationError{}

// Validate checks the field values on Key with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Key) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Key with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KeyMultiError, or nil if none found.
func (m *Key) ValidateAll() error {
	return m.validate(true)
}

func (m *Key) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KeyMultiError(errors)
	}

	return nil
}

// KeyMultiError is an error wrapping multiple validation errors returned by
// Key.ValidateAll() if the designated constraints aren't met.
type KeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyMultiError) AllErrors() []error { return m }

// KeyValidationError is the validation error returned by Key.Validate if the
// designated constraints aren't met.
type KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValidationError) ErrorName() string { return "KeyValidationError" }

// Error satisfies the builtin error interface
func (e KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValidationError{}

// Validate checks the field values on AddKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddKey with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddKeyMultiError, or nil if none found.
func (m *AddKey) ValidateAll() error {
	return m.validate(true)
}

func (m *AddKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddKeyMultiError(errors)
	}

	return nil
}

// AddKeyMultiError is an error wrapping multiple validation errors returned by
// AddKey.ValidateAll() if the designated constraints aren't met.
type AddKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddKeyMultiError) AllErrors() []error { return m }

// AddKeyValidationError is the validation error returned by AddKey.Validate if
// the designated constraints aren't met.
type AddKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKeyValidationError) ErrorName() string { return "AddKeyValidationError" }

// Error satisfies the builtin error interface
func (e AddKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKeyValidationError{}

// Validate checks the field values on UpdateKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateKeyMultiError, or nil
// if none found.
func (m *UpdateKey) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateKeyMultiError(errors)
	}

	return nil
}

// UpdateKeyMultiError is an error wrapping multiple validation errors returned
// by UpdateKey.ValidateAll() if the designated constraints aren't met.
type UpdateKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKeyMultiError) AllErrors() []error { return m }

// UpdateKeyValidationError is the validation error returned by
// UpdateKey.Validate if the designated constraints aren't met.
type UpdateKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKeyValidationError) ErrorName() string { return "UpdateKeyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKeyValidationError{}

// Validate checks the field values on DeleteKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteKeyMultiError, or nil
// if none found.
func (m *DeleteKey) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteKeyMultiError(errors)
	}

	return nil
}

// DeleteKeyMultiError is an error wrapping multiple validation errors returned
// by DeleteKey.ValidateAll() if the designated constraints aren't met.
type DeleteKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeyMultiError) AllErrors() []error { return m }

// DeleteKeyValidationError is the validation error returned by
// DeleteKey.Validate if the designated constraints aren't met.
type DeleteKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeyValidationError) ErrorName() string { return "DeleteKeyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeyValidationError{}

// Validate checks the field values on GenerateSSHKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateSSHKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSSHKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateSSHKeyMultiError,
// or nil if none found.
func (m *GenerateSSHKey) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSSHKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateSSHKeyMultiError(errors)
	}

	return nil
}

// GenerateSSHKeyMultiError is an error wrapping multiple validation errors
// returned by GenerateSSHKey.ValidateAll() if the designated constraints
// aren't met.
type GenerateSSHKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSSHKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSSHKeyMultiError) AllErrors() []error { return m }

// GenerateSSHKeyValidationError is the validation error returned by
// GenerateSSHKey.Validate if the designated constraints aren't met.
type GenerateSSHKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSSHKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSSHKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSSHKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSSHKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSSHKeyValidationError) ErrorName() string { return "GenerateSSHKeyValidationError" }

// Error satisfies the builtin error interface
func (e GenerateSSHKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSSHKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSSHKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSSHKeyValidationError{}

// Validate checks the field values on ListKeys_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListKeys_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeys_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeys_RequestMultiError, or nil if none found.
func (m *ListKeys_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeys_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListKeys_RequestMultiError(errors)
	}

	return nil
}

// ListKeys_RequestMultiError is an error wrapping multiple validation errors
// returned by ListKeys_Request.ValidateAll() if the designated constraints
// aren't met.
type ListKeys_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeys_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeys_RequestMultiError) AllErrors() []error { return m }

// ListKeys_RequestValidationError is the validation error returned by
// ListKeys_Request.Validate if the designated constraints aren't met.
type ListKeys_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeys_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeys_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeys_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeys_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeys_RequestValidationError) ErrorName() string { return "ListKeys_RequestValidationError" }

// Error satisfies the builtin error interface
func (e ListKeys_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeys_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeys_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeys_RequestValidationError{}

// Validate checks the field values on ListKeys_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListKeys_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeys_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeys_ResponseMultiError, or nil if none found.
func (m *ListKeys_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeys_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetPublicKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKeys_ResponseValidationError{
						field:  fmt.Sprintf("PublicKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKeys_ResponseValidationError{
						field:  fmt.Sprintf("PublicKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKeys_ResponseValidationError{
					field:  fmt.Sprintf("PublicKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListKeys_ResponseMultiError(errors)
	}

	return nil
}

// ListKeys_ResponseMultiError is an error wrapping multiple validation errors
// returned by ListKeys_Response.ValidateAll() if the designated constraints
// aren't met.
type ListKeys_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeys_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeys_ResponseMultiError) AllErrors() []error { return m }

// ListKeys_ResponseValidationError is the validation error returned by
// ListKeys_Response.Validate if the designated constraints aren't met.
type ListKeys_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeys_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeys_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeys_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeys_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeys_ResponseValidationError) ErrorName() string {
	return "ListKeys_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKeys_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeys_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeys_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeys_ResponseValidationError{}

// Validate checks the field values on Key_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Key_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Key_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Key_RequestMultiError, or
// nil if none found.
func (m *Key_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Key_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKeyId() != "" {

		if err := m._validateUuid(m.GetKeyId()); err != nil {
			err = Key_RequestValidationError{
				field:  "KeyId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = Key_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return Key_RequestMultiError(errors)
	}

	return nil
}

func (m *Key_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Key_RequestMultiError is an error wrapping multiple validation errors
// returned by Key_Request.ValidateAll() if the designated constraints aren't met.
type Key_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Key_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Key_RequestMultiError) AllErrors() []error { return m }

// Key_RequestValidationError is the validation error returned by
// Key_Request.Validate if the designated constraints aren't met.
type Key_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Key_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Key_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Key_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Key_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Key_RequestValidationError) ErrorName() string { return "Key_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Key_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Key_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Key_RequestValidationError{}

// Validate checks the field values on Key_Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Key_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Key_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Key_ResponseMultiError, or
// nil if none found.
func (m *Key_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Key_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for Title

	// no validation rules for Key

	// no validation rules for Fingerprint

	if all {
		switch v := interface{}(m.GetLastUsed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "LastUsed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "LastUsed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUsed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Key_ResponseValidationError{
				field:  "LastUsed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Key_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Key_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Key_ResponseMultiError(errors)
	}

	return nil
}

// Key_ResponseMultiError is an error wrapping multiple validation errors
// returned by Key_Response.ValidateAll() if the designated constraints aren't met.
type Key_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Key_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Key_ResponseMultiError) AllErrors() []error { return m }

// Key_ResponseValidationError is the validation error returned by
// Key_Response.Validate if the designated constraints aren't met.
type Key_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Key_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Key_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Key_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Key_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Key_ResponseValidationError) ErrorName() string { return "Key_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Key_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Key_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Key_ResponseValidationError{}

// Validate checks the field values on AddKey_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddKey_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddKey_RequestMultiError,
// or nil if none found.
func (m *AddKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = AddKey_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := AddKey_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 128 {
		err := AddKey_RequestValidationError{
			field:  "Key",
			reason: "value length must be at least 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddKey_RequestMultiError(errors)
	}

	return nil
}

func (m *AddKey_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddKey_RequestMultiError is an error wrapping multiple validation errors
// returned by AddKey_Request.ValidateAll() if the designated constraints
// aren't met.
type AddKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddKey_RequestMultiError) AllErrors() []error { return m }

// AddKey_RequestValidationError is the validation error returned by
// AddKey_Request.Validate if the designated constraints aren't met.
type AddKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKey_RequestValidationError) ErrorName() string { return "AddKey_RequestValidationError" }

// Error satisfies the builtin error interface
func (e AddKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKey_RequestValidationError{}

// Validate checks the field values on AddKey_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddKey_ResponseMultiError, or nil if none found.
func (m *AddKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	if len(errors) > 0 {
		return AddKey_ResponseMultiError(errors)
	}

	return nil
}

// AddKey_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddKey_Response.ValidateAll() if the designated constraints
// aren't met.
type AddKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddKey_ResponseMultiError) AllErrors() []error { return m }

// AddKey_ResponseValidationError is the validation error returned by
// AddKey_Response.Validate if the designated constraints aren't met.
type AddKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKey_ResponseValidationError) ErrorName() string { return "AddKey_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKey_ResponseValidationError{}

// Validate checks the field values on UpdateKey_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateKey_RequestMultiError, or nil if none found.
func (m *UpdateKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetKeyId()); err != nil {
		err = UpdateKey_RequestValidationError{
			field:  "KeyId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateKey_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := UpdateKey_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 128 {
		err := UpdateKey_RequestValidationError{
			field:  "Key",
			reason: "value length must be at least 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateKey_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateKey_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateKey_RequestMultiError is an error wrapping multiple validation errors
// returned by UpdateKey_Request.ValidateAll() if the designated constraints
// aren't met.
type UpdateKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKey_RequestMultiError) AllErrors() []error { return m }

// UpdateKey_RequestValidationError is the validation error returned by
// UpdateKey_Request.Validate if the designated constraints aren't met.
type UpdateKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKey_RequestValidationError) ErrorName() string {
	return "UpdateKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKey_RequestValidationError{}

// Validate checks the field values on UpdateKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateKey_ResponseMultiError, or nil if none found.
func (m *UpdateKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateKey_ResponseMultiError(errors)
	}

	return nil
}

// UpdateKey_ResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateKey_Response.ValidateAll() if the designated constraints
// aren't met.
type UpdateKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKey_ResponseMultiError) AllErrors() []error { return m }

// UpdateKey_ResponseValidationError is the validation error returned by
// UpdateKey_Response.Validate if the designated constraints aren't met.
type UpdateKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKey_ResponseValidationError) ErrorName() string {
	return "UpdateKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKey_ResponseValidationError{}

// Validate checks the field values on DeleteKey_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKey_RequestMultiError, or nil if none found.
func (m *DeleteKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = DeleteKey_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetKeyId()); err != nil {
		err = DeleteKey_RequestValidationError{
			field:  "KeyId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteKey_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteKey_Request) _validateUuid(uuid string) error {
	if matched := _key_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteKey_RequestMultiError is an error wrapping multiple validation errors
// returned by DeleteKey_Request.ValidateAll() if the designated constraints
// aren't met.
type DeleteKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKey_RequestMultiError) AllErrors() []error { return m }

// DeleteKey_RequestValidationError is the validation error returned by
// DeleteKey_Request.Validate if the designated constraints aren't met.
type DeleteKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKey_RequestValidationError) ErrorName() string {
	return "DeleteKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKey_RequestValidationError{}

// Validate checks the field values on DeleteKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKey_ResponseMultiError, or nil if none found.
func (m *DeleteKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteKey_ResponseMultiError(errors)
	}

	return nil
}

// DeleteKey_ResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteKey_Response.ValidateAll() if the designated constraints
// aren't met.
type DeleteKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKey_ResponseMultiError) AllErrors() []error { return m }

// DeleteKey_ResponseValidationError is the validation error returned by
// DeleteKey_Response.Validate if the designated constraints aren't met.
type DeleteKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKey_ResponseValidationError) ErrorName() string {
	return "DeleteKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKey_ResponseValidationError{}

// Validate checks the field values on GenerateSSHKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSSHKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSSHKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSSHKey_RequestMultiError, or nil if none found.
func (m *GenerateSSHKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSSHKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyType

	if len(errors) > 0 {
		return GenerateSSHKey_RequestMultiError(errors)
	}

	return nil
}

// GenerateSSHKey_RequestMultiError is an error wrapping multiple validation
// errors returned by GenerateSSHKey_Request.ValidateAll() if the designated
// constraints aren't met.
type GenerateSSHKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSSHKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSSHKey_RequestMultiError) AllErrors() []error { return m }

// GenerateSSHKey_RequestValidationError is the validation error returned by
// GenerateSSHKey_Request.Validate if the designated constraints aren't met.
type GenerateSSHKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSSHKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSSHKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSSHKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSSHKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSSHKey_RequestValidationError) ErrorName() string {
	return "GenerateSSHKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSSHKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSSHKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSSHKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSSHKey_RequestValidationError{}

// Validate checks the field values on GenerateSSHKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSSHKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSSHKey_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSSHKey_ResponseMultiError, or nil if none found.
func (m *GenerateSSHKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSSHKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyType

	// no validation rules for Uuid

	// no validation rules for Passphrase

	// no validation rules for Public

	// no validation rules for FingerPrint

	if len(errors) > 0 {
		return GenerateSSHKey_ResponseMultiError(errors)
	}

	return nil
}

// GenerateSSHKey_ResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateSSHKey_Response.ValidateAll() if the designated
// constraints aren't met.
type GenerateSSHKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSSHKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSSHKey_ResponseMultiError) AllErrors() []error { return m }

// GenerateSSHKey_ResponseValidationError is the validation error returned by
// GenerateSSHKey_Response.Validate if the designated constraints aren't met.
type GenerateSSHKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSSHKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSSHKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSSHKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSSHKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSSHKey_ResponseValidationError) ErrorName() string {
	return "GenerateSSHKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSSHKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSSHKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSSHKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSSHKey_ResponseValidationError{}

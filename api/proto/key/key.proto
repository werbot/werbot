syntax = "proto3";

package key;

option go_package = "github.com/werbot/werbot/api/proto/key";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service KeyHandlers {
    rpc ListPublicKeys(ListPublicKeys.Request) returns (ListPublicKeys.Response) {}
    rpc PublicKey(PublicKey.Request) returns (PublicKey.Response) {}
    rpc AddPublicKey(AddPublicKey.Request) returns (AddPublicKey.Response) {}
    rpc UpdatePublicKey(UpdatePublicKey.Request) returns (UpdatePublicKey.Response) {}
    rpc DeletePublicKey(DeletePublicKey.Request) returns (DeletePublicKey.Response) {}

    rpc GenerateSSHKey(GenerateSSHKey.Request) returns (GenerateSSHKey.Response) {}
}

enum KeyType {
    KEY_TYPE_UNSPECIFIED = 0;
    KEY_TYPE_ED25519 = 1;
    KEY_TYPE_RSA = 2;
}


// rpc ListPublicKeys
message ListPublicKeys {
    message Request {
        int32 limit = 1;
        int32 offset = 2;
        string sort_by = 3;
        string query = 4;
    }

    message Response {
        int32 total = 1;
        repeated PublicKey.Response public_keys = 3;
    }
}
// -----------------------------------------------------


// rpc PublicKey
message PublicKey {
    message Request {
        string key_id = 1  [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"key_id" params:"key_id"
        string user_id = 2 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
    }

    message Response {
        string key_id = 1;
        string user_id = 2;
        string user_name = 3;
        string title = 4;
        string key = 5;
        string fingerprint = 6;
        google.protobuf.Timestamp last_used = 7;
        google.protobuf.Timestamp created = 8;
    }
}
// -----------------------------------------------------


// rpc AddPublicKey
message AddPublicKey {
    message Request {
        string user_id = 1 [(validate.rules).string = {ignore_empty: true, uuid: true}];
        string title = 2   [(validate.rules).string = {min_len: 3, max_len: 128}];
        string key = 3     [(validate.rules).string = {min_len: 128}];
    }

    message Response {
        string key_id = 1;
    }
}
// -----------------------------------------------------


// rpc UpdatePublicKey
message UpdatePublicKey {
    message Request {
        string key_id = 1  [(validate.rules).string.uuid = true]; // @gotags: query:"key_id" params:"key_id"
        string user_id = 2 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
        string title = 3   [(validate.rules).string = {min_len: 3, max_len: 128}]; // @gotags: query:"title" params:"title";
        string key = 4     [(validate.rules).string = {min_len: 128}]; // @gotags: query:"key" params:"key";
    }

    message Response {}
}

// -----------------------------------------------------


// rpc DeletePublicKey
message DeletePublicKey{
    message Request {
        string user_id = 1 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
        string key_id = 2  [(validate.rules).string.uuid = true]; // @gotags: query:"key_id" params:"key_id"
    }

    message Response {}
}
// -----------------------------------------------------


// rpc GenerateSSHKey
message GenerateSSHKey {
    message Request {
        KeyType key_type = 1;
    }

    message Response {
        KeyType key_type = 1;
        string uuid = 2;
        string passphrase = 3;
        //bytes private = 3;
        bytes public = 4;
        string finger_print = 5;
    }
}
// -----------------------------------------------------


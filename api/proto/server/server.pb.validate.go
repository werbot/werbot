// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server.proto

package server

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _server_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListServers with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListServers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListServersMultiError, or
// nil if none found.
func (m *ListServers) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListServersMultiError(errors)
	}

	return nil
}

// ListServersMultiError is an error wrapping multiple validation errors
// returned by ListServers.ValidateAll() if the designated constraints aren't met.
type ListServersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServersMultiError) AllErrors() []error { return m }

// ListServersValidationError is the validation error returned by
// ListServers.Validate if the designated constraints aren't met.
type ListServersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServersValidationError) ErrorName() string { return "ListServersValidationError" }

// Error satisfies the builtin error interface
func (e ListServersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServersValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on AddServer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddServerMultiError, or nil
// if none found.
func (m *AddServer) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerMultiError(errors)
	}

	return nil
}

// AddServerMultiError is an error wrapping multiple validation errors returned
// by AddServer.ValidateAll() if the designated constraints aren't met.
type AddServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerMultiError) AllErrors() []error { return m }

// AddServerValidationError is the validation error returned by
// AddServer.Validate if the designated constraints aren't met.
type AddServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerValidationError) ErrorName() string { return "AddServerValidationError" }

// Error satisfies the builtin error interface
func (e AddServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerValidationError{}

// Validate checks the field values on UpdateServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateServerMultiError, or
// nil if none found.
func (m *UpdateServer) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerMultiError(errors)
	}

	return nil
}

// UpdateServerMultiError is an error wrapping multiple validation errors
// returned by UpdateServer.ValidateAll() if the designated constraints aren't met.
type UpdateServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMultiError) AllErrors() []error { return m }

// UpdateServerValidationError is the validation error returned by
// UpdateServer.Validate if the designated constraints aren't met.
type UpdateServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerValidationError) ErrorName() string { return "UpdateServerValidationError" }

// Error satisfies the builtin error interface
func (e UpdateServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerValidationError{}

// Validate checks the field values on DeleteServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteServerMultiError, or
// nil if none found.
func (m *DeleteServer) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerMultiError(errors)
	}

	return nil
}

// DeleteServerMultiError is an error wrapping multiple validation errors
// returned by DeleteServer.ValidateAll() if the designated constraints aren't met.
type DeleteServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerMultiError) AllErrors() []error { return m }

// DeleteServerValidationError is the validation error returned by
// DeleteServer.Validate if the designated constraints aren't met.
type DeleteServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerValidationError) ErrorName() string { return "DeleteServerValidationError" }

// Error satisfies the builtin error interface
func (e DeleteServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerValidationError{}

// Validate checks the field values on ServerAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerAccessMultiError, or
// nil if none found.
func (m *ServerAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessMultiError(errors)
	}

	return nil
}

// ServerAccessMultiError is an error wrapping multiple validation errors
// returned by ServerAccess.ValidateAll() if the designated constraints aren't met.
type ServerAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessMultiError) AllErrors() []error { return m }

// ServerAccessValidationError is the validation error returned by
// ServerAccess.Validate if the designated constraints aren't met.
type ServerAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessValidationError) ErrorName() string { return "ServerAccessValidationError" }

// Error satisfies the builtin error interface
func (e ServerAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessValidationError{}

// Validate checks the field values on AddServerAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServerAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerAccessMultiError, or nil if none found.
func (m *AddServerAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerAccessMultiError(errors)
	}

	return nil
}

// AddServerAccessMultiError is an error wrapping multiple validation errors
// returned by AddServerAccess.ValidateAll() if the designated constraints
// aren't met.
type AddServerAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerAccessMultiError) AllErrors() []error { return m }

// AddServerAccessValidationError is the validation error returned by
// AddServerAccess.Validate if the designated constraints aren't met.
type AddServerAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerAccessValidationError) ErrorName() string { return "AddServerAccessValidationError" }

// Error satisfies the builtin error interface
func (e AddServerAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerAccessValidationError{}

// Validate checks the field values on UpdateServerAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerAccessMultiError, or nil if none found.
func (m *UpdateServerAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerAccessMultiError(errors)
	}

	return nil
}

// UpdateServerAccessMultiError is an error wrapping multiple validation errors
// returned by UpdateServerAccess.ValidateAll() if the designated constraints
// aren't met.
type UpdateServerAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerAccessMultiError) AllErrors() []error { return m }

// UpdateServerAccessValidationError is the validation error returned by
// UpdateServerAccess.Validate if the designated constraints aren't met.
type UpdateServerAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerAccessValidationError) ErrorName() string {
	return "UpdateServerAccessValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerAccessValidationError{}

// Validate checks the field values on ServerActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerActivityMultiError,
// or nil if none found.
func (m *ServerActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerActivityMultiError(errors)
	}

	return nil
}

// ServerActivityMultiError is an error wrapping multiple validation errors
// returned by ServerActivity.ValidateAll() if the designated constraints
// aren't met.
type ServerActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerActivityMultiError) AllErrors() []error { return m }

// ServerActivityValidationError is the validation error returned by
// ServerActivity.Validate if the designated constraints aren't met.
type ServerActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerActivityValidationError) ErrorName() string { return "ServerActivityValidationError" }

// Error satisfies the builtin error interface
func (e ServerActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerActivityValidationError{}

// Validate checks the field values on UpdateServerActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActivityMultiError, or nil if none found.
func (m *UpdateServerActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActivityMultiError(errors)
	}

	return nil
}

// UpdateServerActivityMultiError is an error wrapping multiple validation
// errors returned by UpdateServerActivity.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActivityMultiError) AllErrors() []error { return m }

// UpdateServerActivityValidationError is the validation error returned by
// UpdateServerActivity.Validate if the designated constraints aren't met.
type UpdateServerActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActivityValidationError) ErrorName() string {
	return "UpdateServerActivityValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActivityValidationError{}

// Validate checks the field values on UpdateHostKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateHostKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHostKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateHostKeyMultiError, or
// nil if none found.
func (m *UpdateHostKey) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHostKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateHostKeyMultiError(errors)
	}

	return nil
}

// UpdateHostKeyMultiError is an error wrapping multiple validation errors
// returned by UpdateHostKey.ValidateAll() if the designated constraints
// aren't met.
type UpdateHostKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHostKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHostKeyMultiError) AllErrors() []error { return m }

// UpdateHostKeyValidationError is the validation error returned by
// UpdateHostKey.Validate if the designated constraints aren't met.
type UpdateHostKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHostKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHostKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHostKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHostKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHostKeyValidationError) ErrorName() string { return "UpdateHostKeyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateHostKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHostKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHostKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHostKeyValidationError{}

// Validate checks the field values on AddSession with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddSession) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSession with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddSessionMultiError, or
// nil if none found.
func (m *AddSession) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSession) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddSessionMultiError(errors)
	}

	return nil
}

// AddSessionMultiError is an error wrapping multiple validation errors
// returned by AddSession.ValidateAll() if the designated constraints aren't met.
type AddSessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSessionMultiError) AllErrors() []error { return m }

// AddSessionValidationError is the validation error returned by
// AddSession.Validate if the designated constraints aren't met.
type AddSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSessionValidationError) ErrorName() string { return "AddSessionValidationError" }

// Error satisfies the builtin error interface
func (e AddSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSessionValidationError{}

// Validate checks the field values on ServerNameByID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerNameByID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerNameByID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerNameByIDMultiError,
// or nil if none found.
func (m *ServerNameByID) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerNameByID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerNameByIDMultiError(errors)
	}

	return nil
}

// ServerNameByIDMultiError is an error wrapping multiple validation errors
// returned by ServerNameByID.ValidateAll() if the designated constraints
// aren't met.
type ServerNameByIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerNameByIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerNameByIDMultiError) AllErrors() []error { return m }

// ServerNameByIDValidationError is the validation error returned by
// ServerNameByID.Validate if the designated constraints aren't met.
type ServerNameByIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerNameByIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerNameByIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerNameByIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerNameByIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerNameByIDValidationError) ErrorName() string { return "ServerNameByIDValidationError" }

// Error satisfies the builtin error interface
func (e ServerNameByIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerNameByID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerNameByIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerNameByIDValidationError{}

// Validate checks the field values on ListShareServers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListShareServers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShareServers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShareServersMultiError, or nil if none found.
func (m *ListShareServers) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareServers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListShareServersMultiError(errors)
	}

	return nil
}

// ListShareServersMultiError is an error wrapping multiple validation errors
// returned by ListShareServers.ValidateAll() if the designated constraints
// aren't met.
type ListShareServersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareServersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareServersMultiError) AllErrors() []error { return m }

// ListShareServersValidationError is the validation error returned by
// ListShareServers.Validate if the designated constraints aren't met.
type ListShareServersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareServersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareServersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareServersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareServersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareServersValidationError) ErrorName() string { return "ListShareServersValidationError" }

// Error satisfies the builtin error interface
func (e ListShareServersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareServers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareServersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareServersValidationError{}

// Validate checks the field values on AddShareServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddShareServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShareServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddShareServerMultiError,
// or nil if none found.
func (m *AddShareServer) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShareServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddShareServerMultiError(errors)
	}

	return nil
}

// AddShareServerMultiError is an error wrapping multiple validation errors
// returned by AddShareServer.ValidateAll() if the designated constraints
// aren't met.
type AddShareServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShareServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShareServerMultiError) AllErrors() []error { return m }

// AddShareServerValidationError is the validation error returned by
// AddShareServer.Validate if the designated constraints aren't met.
type AddShareServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareServerValidationError) ErrorName() string { return "AddShareServerValidationError" }

// Error satisfies the builtin error interface
func (e AddShareServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareServerValidationError{}

// Validate checks the field values on UpdateShareServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateShareServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShareServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShareServerMultiError, or nil if none found.
func (m *UpdateShareServer) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShareServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShareServerMultiError(errors)
	}

	return nil
}

// UpdateShareServerMultiError is an error wrapping multiple validation errors
// returned by UpdateShareServer.ValidateAll() if the designated constraints
// aren't met.
type UpdateShareServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShareServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShareServerMultiError) AllErrors() []error { return m }

// UpdateShareServerValidationError is the validation error returned by
// UpdateShareServer.Validate if the designated constraints aren't met.
type UpdateShareServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareServerValidationError) ErrorName() string {
	return "UpdateShareServerValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareServerValidationError{}

// Validate checks the field values on DeleteShareServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteShareServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShareServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShareServerMultiError, or nil if none found.
func (m *DeleteShareServer) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShareServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShareServerMultiError(errors)
	}

	return nil
}

// DeleteShareServerMultiError is an error wrapping multiple validation errors
// returned by DeleteShareServer.ValidateAll() if the designated constraints
// aren't met.
type DeleteShareServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShareServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShareServerMultiError) AllErrors() []error { return m }

// DeleteShareServerValidationError is the validation error returned by
// DeleteShareServer.Validate if the designated constraints aren't met.
type DeleteShareServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShareServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShareServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShareServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShareServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShareServerValidationError) ErrorName() string {
	return "DeleteShareServerValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShareServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShareServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShareServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShareServerValidationError{}

// Validate checks the field values on ListServers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServers_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServers_RequestMultiError, or nil if none found.
func (m *ListServers_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServers_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListServers_RequestMultiError(errors)
	}

	return nil
}

// ListServers_RequestMultiError is an error wrapping multiple validation
// errors returned by ListServers_Request.ValidateAll() if the designated
// constraints aren't met.
type ListServers_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServers_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServers_RequestMultiError) AllErrors() []error { return m }

// ListServers_RequestValidationError is the validation error returned by
// ListServers_Request.Validate if the designated constraints aren't met.
type ListServers_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServers_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServers_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServers_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServers_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServers_RequestValidationError) ErrorName() string {
	return "ListServers_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServers_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServers_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServers_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServers_RequestValidationError{}

// Validate checks the field values on ListServers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServers_ResponseMultiError, or nil if none found.
func (m *ListServers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServers_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServers_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServers_ResponseValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServers_ResponseMultiError(errors)
	}

	return nil
}

// ListServers_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListServers_Response.ValidateAll() if the designated
// constraints aren't met.
type ListServers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServers_ResponseMultiError) AllErrors() []error { return m }

// ListServers_ResponseValidationError is the validation error returned by
// ListServers_Response.Validate if the designated constraints aren't met.
type ListServers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServers_ResponseValidationError) ErrorName() string {
	return "ListServers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServers_ResponseValidationError{}

// Validate checks the field values on Server_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_RequestMultiError,
// or nil if none found.
func (m *Server_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = Server_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetServerId() != "" {

		if err := m._validateUuid(m.GetServerId()); err != nil {
			err = Server_RequestValidationError{
				field:  "ServerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = Server_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Server_RequestMultiError(errors)
	}

	return nil
}

func (m *Server_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Server_RequestMultiError is an error wrapping multiple validation errors
// returned by Server_Request.ValidateAll() if the designated constraints
// aren't met.
type Server_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_RequestMultiError) AllErrors() []error { return m }

// Server_RequestValidationError is the validation error returned by
// Server_Request.Validate if the designated constraints aren't met.
type Server_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_RequestValidationError) ErrorName() string { return "Server_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Server_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_RequestValidationError{}

// Validate checks the field values on Server_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Server_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Server_ResponseMultiError, or nil if none found.
func (m *Server_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for ProjectId

	// no validation rules for AccessId

	// no validation rules for ProjectLogin

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Token

	// no validation rules for Login

	// no validation rules for Title

	// no validation rules for Audit

	// no validation rules for Online

	// no validation rules for AccountId

	// no validation rules for Auth

	// no validation rules for Scheme

	// no validation rules for HostKey

	// no validation rules for Description

	// no validation rules for Active

	// no validation rules for CountMembers

	if all {
		switch v := interface{}(m.GetLastUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_ResponseValidationError{
				field:  "LastUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Server_ResponseMultiError(errors)
	}

	return nil
}

// Server_ResponseMultiError is an error wrapping multiple validation errors
// returned by Server_Response.ValidateAll() if the designated constraints
// aren't met.
type Server_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_ResponseMultiError) AllErrors() []error { return m }

// Server_ResponseValidationError is the validation error returned by
// Server_Response.Validate if the designated constraints aren't met.
type Server_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_ResponseValidationError) ErrorName() string { return "Server_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Server_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_ResponseValidationError{}

// Validate checks the field values on AddServer_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServer_RequestMultiError, or nil if none found.
func (m *AddServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = AddServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetAddress()); err != nil {
		if ip := net.ParseIP(m.GetAddress()); ip == nil {
			err := AddServer_RequestValidationError{
				field:  "Address",
				reason: "value must be a valid hostname, or ip address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if val := m.GetPort(); val < 1 || val >= 65536 {
		err := AddServer_RequestValidationError{
			field:  "Port",
			reason: "value must be inside range [1, 65536)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := AddServer_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ServerScheme_name[int32(m.GetScheme())]; !ok {
		err := AddServer_RequestValidationError{
			field:  "Scheme",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Audit

	// no validation rules for Active

	// no validation rules for Description

	if len(errors) > 0 {
		return AddServer_RequestMultiError(errors)
	}

	return nil
}

func (m *AddServer_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddServer_RequestMultiError is an error wrapping multiple validation errors
// returned by AddServer_Request.ValidateAll() if the designated constraints
// aren't met.
type AddServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServer_RequestMultiError) AllErrors() []error { return m }

// AddServer_RequestValidationError is the validation error returned by
// AddServer_Request.Validate if the designated constraints aren't met.
type AddServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServer_RequestValidationError) ErrorName() string {
	return "AddServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServer_RequestValidationError{}

// Validate checks the field values on AddServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServer_ResponseMultiError, or nil if none found.
func (m *AddServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	if len(errors) > 0 {
		return AddServer_ResponseMultiError(errors)
	}

	return nil
}

// AddServer_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddServer_Response.ValidateAll() if the designated constraints
// aren't met.
type AddServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServer_ResponseMultiError) AllErrors() []error { return m }

// AddServer_ResponseValidationError is the validation error returned by
// AddServer_Response.Validate if the designated constraints aren't met.
type AddServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServer_ResponseValidationError) ErrorName() string {
	return "AddServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServer_ResponseValidationError{}

// Validate checks the field values on UpdateServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServer_RequestMultiError, or nil if none found.
func (m *UpdateServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServer_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Setting.(type) {
	case *UpdateServer_Request_Info:
		if v == nil {
			err := UpdateServer_RequestValidationError{
				field:  "Setting",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateServer_RequestValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateServer_RequestValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateServer_RequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateServer_Request_Audit:
		if v == nil {
			err := UpdateServer_RequestValidationError{
				field:  "Setting",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Audit
	case *UpdateServer_Request_Active:
		if v == nil {
			err := UpdateServer_RequestValidationError{
				field:  "Setting",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Active
	case *UpdateServer_Request_Online:
		if v == nil {
			err := UpdateServer_RequestValidationError{
				field:  "Setting",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Online
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateServer_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServer_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServer_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServer_RequestMultiError) AllErrors() []error { return m }

// UpdateServer_RequestValidationError is the validation error returned by
// UpdateServer_Request.Validate if the designated constraints aren't met.
type UpdateServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServer_RequestValidationError) ErrorName() string {
	return "UpdateServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServer_RequestValidationError{}

// Validate checks the field values on UpdateServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServer_ResponseMultiError, or nil if none found.
func (m *UpdateServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServer_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServer_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServer_ResponseValidationError{
				field:  "LastUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateServer_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServer_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateServer_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServer_ResponseMultiError) AllErrors() []error { return m }

// UpdateServer_ResponseValidationError is the validation error returned by
// UpdateServer_Response.Validate if the designated constraints aren't met.
type UpdateServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServer_ResponseValidationError) ErrorName() string {
	return "UpdateServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServer_ResponseValidationError{}

// Validate checks the field values on UpdateServer_Info with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateServer_Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServer_Info with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServer_InfoMultiError, or nil if none found.
func (m *UpdateServer_Info) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServer_Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateHostname(m.GetAddress()); err != nil {
		if ip := net.ParseIP(m.GetAddress()); ip == nil {
			err := UpdateServer_InfoValidationError{
				field:  "Address",
				reason: "value must be a valid hostname, or ip address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if val := m.GetPort(); val < 1 || val >= 65536 {
		err := UpdateServer_InfoValidationError{
			field:  "Port",
			reason: "value must be inside range [1, 65536)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLogin()); l < 3 || l > 20 {
		err := UpdateServer_InfoValidationError{
			field:  "Login",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateServer_Info_Login_Pattern.MatchString(m.GetLogin()) {
		err := UpdateServer_InfoValidationError{
			field:  "Login",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := UpdateServer_InfoValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateServer_InfoMultiError(errors)
	}

	return nil
}

func (m *UpdateServer_Info) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// UpdateServer_InfoMultiError is an error wrapping multiple validation errors
// returned by UpdateServer_Info.ValidateAll() if the designated constraints
// aren't met.
type UpdateServer_InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServer_InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServer_InfoMultiError) AllErrors() []error { return m }

// UpdateServer_InfoValidationError is the validation error returned by
// UpdateServer_Info.Validate if the designated constraints aren't met.
type UpdateServer_InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServer_InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServer_InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServer_InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServer_InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServer_InfoValidationError) ErrorName() string {
	return "UpdateServer_InfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServer_InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServer_Info.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServer_InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServer_InfoValidationError{}

var _UpdateServer_Info_Login_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on DeleteServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServer_RequestMultiError, or nil if none found.
func (m *DeleteServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = DeleteServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = DeleteServer_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServer_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteServer_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServer_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServer_RequestMultiError) AllErrors() []error { return m }

// DeleteServer_RequestValidationError is the validation error returned by
// DeleteServer_Request.Validate if the designated constraints aren't met.
type DeleteServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServer_RequestValidationError) ErrorName() string {
	return "DeleteServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServer_RequestValidationError{}

// Validate checks the field values on DeleteServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServer_ResponseMultiError, or nil if none found.
func (m *DeleteServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServer_ResponseMultiError(errors)
	}

	return nil
}

// DeleteServer_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteServer_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServer_ResponseMultiError) AllErrors() []error { return m }

// DeleteServer_ResponseValidationError is the validation error returned by
// DeleteServer_Response.Validate if the designated constraints aren't met.
type DeleteServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServer_ResponseValidationError) ErrorName() string {
	return "DeleteServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServer_ResponseValidationError{}

// Validate checks the field values on ServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccess_RequestMultiError, or nil if none found.
func (m *ServerAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerAccess_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerAccess_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerAccess_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerAccess_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerAccess_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerAccess_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccess_RequestMultiError) AllErrors() []error { return m }

// ServerAccess_RequestValidationError is the validation error returned by
// ServerAccess_Request.Validate if the designated constraints aren't met.
type ServerAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccess_RequestValidationError) ErrorName() string {
	return "ServerAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccess_RequestValidationError{}

// Validate checks the field values on ServerAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccess_ResponseMultiError, or nil if none found.
func (m *ServerAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Auth

	// no validation rules for Login

	switch v := m.Access.(type) {
	case *ServerAccess_Response_Password:
		if v == nil {
			err := ServerAccess_ResponseValidationError{
				field:  "Access",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Password
	case *ServerAccess_Response_Key:
		if v == nil {
			err := ServerAccess_ResponseValidationError{
				field:  "Access",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerAccess_ResponseValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerAccess_ResponseValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerAccess_ResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerAccess_ResponseMultiError(errors)
	}

	return nil
}

// ServerAccess_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerAccess_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccess_ResponseMultiError) AllErrors() []error { return m }

// ServerAccess_ResponseValidationError is the validation error returned by
// ServerAccess_Response.Validate if the designated constraints aren't met.
type ServerAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccess_ResponseValidationError) ErrorName() string {
	return "ServerAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccess_ResponseValidationError{}

// Validate checks the field values on ServerAccess_Key with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServerAccess_Key) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess_Key with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccess_KeyMultiError, or nil if none found.
func (m *ServerAccess_Key) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess_Key) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Public

	// no validation rules for Private

	// no validation rules for Password

	// no validation rules for Fingeprint

	if len(errors) > 0 {
		return ServerAccess_KeyMultiError(errors)
	}

	return nil
}

// ServerAccess_KeyMultiError is an error wrapping multiple validation errors
// returned by ServerAccess_Key.ValidateAll() if the designated constraints
// aren't met.
type ServerAccess_KeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccess_KeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccess_KeyMultiError) AllErrors() []error { return m }

// ServerAccess_KeyValidationError is the validation error returned by
// ServerAccess_Key.Validate if the designated constraints aren't met.
type ServerAccess_KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccess_KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccess_KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccess_KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccess_KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccess_KeyValidationError) ErrorName() string { return "ServerAccess_KeyValidationError" }

// Error satisfies the builtin error interface
func (e ServerAccess_KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess_Key.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccess_KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccess_KeyValidationError{}

// Validate checks the field values on AddServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerAccess_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerAccess_RequestMultiError, or nil if none found.
func (m *AddServerAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = AddServerAccess_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLogin()); l < 3 || l > 20 {
		err := AddServerAccess_RequestValidationError{
			field:  "Login",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddServerAccess_Request_Login_Pattern.MatchString(m.GetLogin()) {
		err := AddServerAccess_RequestValidationError{
			field:  "Login",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Access.(type) {
	case *AddServerAccess_Request_Password:
		if v == nil {
			err := AddServerAccess_RequestValidationError{
				field:  "Access",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Password
	case *AddServerAccess_Request_KeyUuid:
		if v == nil {
			err := AddServerAccess_RequestValidationError{
				field:  "Access",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for KeyUuid
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddServerAccess_RequestMultiError(errors)
	}

	return nil
}

func (m *AddServerAccess_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddServerAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by AddServerAccess_Request.ValidateAll() if the designated
// constraints aren't met.
type AddServerAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerAccess_RequestMultiError) AllErrors() []error { return m }

// AddServerAccess_RequestValidationError is the validation error returned by
// AddServerAccess_Request.Validate if the designated constraints aren't met.
type AddServerAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerAccess_RequestValidationError) ErrorName() string {
	return "AddServerAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerAccess_RequestValidationError{}

var _AddServerAccess_Request_Login_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on AddServerAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerAccess_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerAccess_ResponseMultiError, or nil if none found.
func (m *AddServerAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fingeprint

	if len(errors) > 0 {
		return AddServerAccess_ResponseMultiError(errors)
	}

	return nil
}

// AddServerAccess_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddServerAccess_Response.ValidateAll() if the designated
// constraints aren't met.
type AddServerAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerAccess_ResponseMultiError) AllErrors() []error { return m }

// AddServerAccess_ResponseValidationError is the validation error returned by
// AddServerAccess_Response.Validate if the designated constraints aren't met.
type AddServerAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerAccess_ResponseValidationError) ErrorName() string {
	return "AddServerAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerAccess_ResponseValidationError{}

// Validate checks the field values on UpdateServerAccess_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerAccess_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerAccess_RequestMultiError, or nil if none found.
func (m *UpdateServerAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerAccess_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServerAccess_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerAccess_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Access.(type) {
	case *UpdateServerAccess_Request_Password:
		if v == nil {
			err := UpdateServerAccess_RequestValidationError{
				field:  "Access",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Password
	case *UpdateServerAccess_Request_Key:
		if v == nil {
			err := UpdateServerAccess_RequestValidationError{
				field:  "Access",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateServerAccess_RequestValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateServerAccess_RequestValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateServerAccess_RequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateServerAccess_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerAccess_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerAccess_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerAccess_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerAccess_RequestMultiError) AllErrors() []error { return m }

// UpdateServerAccess_RequestValidationError is the validation error returned
// by UpdateServerAccess_Request.Validate if the designated constraints aren't met.
type UpdateServerAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerAccess_RequestValidationError) ErrorName() string {
	return "UpdateServerAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerAccess_RequestValidationError{}

// Validate checks the field values on UpdateServerAccess_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerAccess_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerAccess_ResponseMultiError, or nil if none found.
func (m *UpdateServerAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerAccess_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerAccess_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerAccess_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerAccess_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerAccess_ResponseValidationError is the validation error returned
// by UpdateServerAccess_Response.Validate if the designated constraints
// aren't met.
type UpdateServerAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerAccess_ResponseValidationError) ErrorName() string {
	return "UpdateServerAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerAccess_ResponseValidationError{}

// Validate checks the field values on UpdateServerAccess_Key with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerAccess_Key) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerAccess_Key with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerAccess_KeyMultiError, or nil if none found.
func (m *UpdateServerAccess_Key) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerAccess_Key) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for KeyUuid

	if len(errors) > 0 {
		return UpdateServerAccess_KeyMultiError(errors)
	}

	return nil
}

// UpdateServerAccess_KeyMultiError is an error wrapping multiple validation
// errors returned by UpdateServerAccess_Key.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerAccess_KeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerAccess_KeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerAccess_KeyMultiError) AllErrors() []error { return m }

// UpdateServerAccess_KeyValidationError is the validation error returned by
// UpdateServerAccess_Key.Validate if the designated constraints aren't met.
type UpdateServerAccess_KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerAccess_KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerAccess_KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerAccess_KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerAccess_KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerAccess_KeyValidationError) ErrorName() string {
	return "UpdateServerAccess_KeyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerAccess_KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerAccess_Key.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerAccess_KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerAccess_KeyValidationError{}

// Validate checks the field values on ServerActivity_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerActivity_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerActivity_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerActivity_RequestMultiError, or nil if none found.
func (m *ServerActivity_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerActivity_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerActivity_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerActivity_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerActivity_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerActivity_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerActivity_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerActivity_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerActivity_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerActivity_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerActivity_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerActivity_RequestMultiError) AllErrors() []error { return m }

// ServerActivity_RequestValidationError is the validation error returned by
// ServerActivity_Request.Validate if the designated constraints aren't met.
type ServerActivity_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerActivity_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerActivity_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerActivity_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerActivity_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerActivity_RequestValidationError) ErrorName() string {
	return "ServerActivity_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerActivity_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerActivity_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerActivity_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerActivity_RequestValidationError{}

// Validate checks the field values on ServerActivity_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerActivity_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerActivity_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerActivity_ResponseMultiError, or nil if none found.
func (m *ServerActivity_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerActivity_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerActivity_ResponseMultiError(errors)
	}

	return nil
}

// ServerActivity_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerActivity_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerActivity_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerActivity_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerActivity_ResponseMultiError) AllErrors() []error { return m }

// ServerActivity_ResponseValidationError is the validation error returned by
// ServerActivity_Response.Validate if the designated constraints aren't met.
type ServerActivity_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerActivity_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerActivity_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerActivity_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerActivity_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerActivity_ResponseValidationError) ErrorName() string {
	return "ServerActivity_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerActivity_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerActivity_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerActivity_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerActivity_ResponseValidationError{}

// Validate checks the field values on UpdateServerActivity_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActivity_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActivity_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActivity_RequestMultiError, or nil if none found.
func (m *UpdateServerActivity_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActivity_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerActivity_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServerActivity_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerActivity_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServerActivity_RequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServerActivity_RequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServerActivity_RequestValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateServerActivity_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerActivity_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerActivity_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerActivity_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerActivity_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActivity_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActivity_RequestMultiError) AllErrors() []error { return m }

// UpdateServerActivity_RequestValidationError is the validation error returned
// by UpdateServerActivity_Request.Validate if the designated constraints
// aren't met.
type UpdateServerActivity_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActivity_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActivity_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActivity_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActivity_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActivity_RequestValidationError) ErrorName() string {
	return "UpdateServerActivity_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActivity_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActivity_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActivity_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActivity_RequestValidationError{}

// Validate checks the field values on UpdateServerActivity_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActivity_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActivity_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServerActivity_ResponseMultiError, or nil if none found.
func (m *UpdateServerActivity_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActivity_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActivity_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerActivity_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerActivity_Response.ValidateAll()
// if the designated constraints aren't met.
type UpdateServerActivity_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActivity_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActivity_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerActivity_ResponseValidationError is the validation error
// returned by UpdateServerActivity_Response.Validate if the designated
// constraints aren't met.
type UpdateServerActivity_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActivity_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActivity_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActivity_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActivity_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActivity_ResponseValidationError) ErrorName() string {
	return "UpdateServerActivity_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActivity_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActivity_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActivity_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActivity_ResponseValidationError{}

// Validate checks the field values on UpdateHostKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateHostKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHostKey_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHostKey_RequestMultiError, or nil if none found.
func (m *UpdateHostKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHostKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateHostKey_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hostkey

	if len(errors) > 0 {
		return UpdateHostKey_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateHostKey_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateHostKey_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateHostKey_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateHostKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHostKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHostKey_RequestMultiError) AllErrors() []error { return m }

// UpdateHostKey_RequestValidationError is the validation error returned by
// UpdateHostKey_Request.Validate if the designated constraints aren't met.
type UpdateHostKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHostKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHostKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHostKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHostKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHostKey_RequestValidationError) ErrorName() string {
	return "UpdateHostKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHostKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHostKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHostKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHostKey_RequestValidationError{}

// Validate checks the field values on UpdateHostKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateHostKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHostKey_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHostKey_ResponseMultiError, or nil if none found.
func (m *UpdateHostKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHostKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateHostKey_ResponseMultiError(errors)
	}

	return nil
}

// UpdateHostKey_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateHostKey_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateHostKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHostKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHostKey_ResponseMultiError) AllErrors() []error { return m }

// UpdateHostKey_ResponseValidationError is the validation error returned by
// UpdateHostKey_Response.Validate if the designated constraints aren't met.
type UpdateHostKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHostKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHostKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHostKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHostKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHostKey_ResponseValidationError) ErrorName() string {
	return "UpdateHostKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHostKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHostKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHostKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHostKey_ResponseValidationError{}

// Validate checks the field values on AddSession_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSession_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSession_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSession_RequestMultiError, or nil if none found.
func (m *AddSession_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSession_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = AddSession_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddSession_RequestValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddSession_RequestValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSession_RequestValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return AddSession_RequestMultiError(errors)
	}

	return nil
}

func (m *AddSession_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddSession_RequestMultiError is an error wrapping multiple validation errors
// returned by AddSession_Request.ValidateAll() if the designated constraints
// aren't met.
type AddSession_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSession_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSession_RequestMultiError) AllErrors() []error { return m }

// AddSession_RequestValidationError is the validation error returned by
// AddSession_Request.Validate if the designated constraints aren't met.
type AddSession_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSession_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSession_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSession_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSession_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSession_RequestValidationError) ErrorName() string {
	return "AddSession_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSession_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSession_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSession_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSession_RequestValidationError{}

// Validate checks the field values on AddSession_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSession_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSession_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSession_ResponseMultiError, or nil if none found.
func (m *AddSession_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSession_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return AddSession_ResponseMultiError(errors)
	}

	return nil
}

// AddSession_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddSession_Response.ValidateAll() if the designated
// constraints aren't met.
type AddSession_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSession_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSession_ResponseMultiError) AllErrors() []error { return m }

// AddSession_ResponseValidationError is the validation error returned by
// AddSession_Response.Validate if the designated constraints aren't met.
type AddSession_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSession_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSession_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSession_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSession_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSession_ResponseValidationError) ErrorName() string {
	return "AddSession_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSession_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSession_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSession_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSession_ResponseValidationError{}

// Validate checks the field values on ServerNameByID_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerNameByID_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerNameByID_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerNameByID_RequestMultiError, or nil if none found.
func (m *ServerNameByID_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerNameByID_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerNameByID_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerNameByID_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerNameByID_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerNameByID_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerNameByID_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerNameByID_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerNameByID_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerNameByID_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerNameByID_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerNameByID_RequestMultiError) AllErrors() []error { return m }

// ServerNameByID_RequestValidationError is the validation error returned by
// ServerNameByID_Request.Validate if the designated constraints aren't met.
type ServerNameByID_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerNameByID_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerNameByID_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerNameByID_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerNameByID_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerNameByID_RequestValidationError) ErrorName() string {
	return "ServerNameByID_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerNameByID_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerNameByID_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerNameByID_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerNameByID_RequestValidationError{}

// Validate checks the field values on ServerNameByID_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerNameByID_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerNameByID_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerNameByID_ResponseMultiError, or nil if none found.
func (m *ServerNameByID_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerNameByID_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerName

	if len(errors) > 0 {
		return ServerNameByID_ResponseMultiError(errors)
	}

	return nil
}

// ServerNameByID_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerNameByID_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerNameByID_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerNameByID_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerNameByID_ResponseMultiError) AllErrors() []error { return m }

// ServerNameByID_ResponseValidationError is the validation error returned by
// ServerNameByID_Response.Validate if the designated constraints aren't met.
type ServerNameByID_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerNameByID_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerNameByID_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerNameByID_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerNameByID_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerNameByID_ResponseValidationError) ErrorName() string {
	return "ServerNameByID_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerNameByID_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerNameByID_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerNameByID_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerNameByID_ResponseValidationError{}

// Validate checks the field values on ListShareServers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShareServers_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShareServers_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShareServers_RequestMultiError, or nil if none found.
func (m *ListShareServers_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareServers_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ListShareServers_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListShareServers_RequestMultiError(errors)
	}

	return nil
}

func (m *ListShareServers_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListShareServers_RequestMultiError is an error wrapping multiple validation
// errors returned by ListShareServers_Request.ValidateAll() if the designated
// constraints aren't met.
type ListShareServers_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareServers_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareServers_RequestMultiError) AllErrors() []error { return m }

// ListShareServers_RequestValidationError is the validation error returned by
// ListShareServers_Request.Validate if the designated constraints aren't met.
type ListShareServers_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareServers_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareServers_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareServers_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareServers_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareServers_RequestValidationError) ErrorName() string {
	return "ListShareServers_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShareServers_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareServers_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareServers_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareServers_RequestValidationError{}

// Validate checks the field values on ListShareServers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShareServers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShareServers_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShareServers_ResponseMultiError, or nil if none found.
func (m *ListShareServers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareServers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShareServers_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShareServers_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShareServers_ResponseValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListShareServers_ResponseMultiError(errors)
	}

	return nil
}

// ListShareServers_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListShareServers_Response.ValidateAll() if the
// designated constraints aren't met.
type ListShareServers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareServers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareServers_ResponseMultiError) AllErrors() []error { return m }

// ListShareServers_ResponseValidationError is the validation error returned by
// ListShareServers_Response.Validate if the designated constraints aren't met.
type ListShareServers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareServers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareServers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareServers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareServers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareServers_ResponseValidationError) ErrorName() string {
	return "ListShareServers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShareServers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareServers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareServers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareServers_ResponseValidationError{}

// Validate checks the field values on ListShareServers_Response_SharedServer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListShareServers_Response_SharedServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListShareServers_Response_SharedServer with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListShareServers_Response_SharedServerMultiError, or nil if none found.
func (m *ListShareServers_Response_SharedServer) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareServers_Response_SharedServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserLogin

	// no validation rules for ProjectLogin

	// no validation rules for ServerId

	// no validation rules for ServerToken

	// no validation rules for ServerOnline

	// no validation rules for ServerTitle

	// no validation rules for ServerDescription

	if len(errors) > 0 {
		return ListShareServers_Response_SharedServerMultiError(errors)
	}

	return nil
}

// ListShareServers_Response_SharedServerMultiError is an error wrapping
// multiple validation errors returned by
// ListShareServers_Response_SharedServer.ValidateAll() if the designated
// constraints aren't met.
type ListShareServers_Response_SharedServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareServers_Response_SharedServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareServers_Response_SharedServerMultiError) AllErrors() []error { return m }

// ListShareServers_Response_SharedServerValidationError is the validation
// error returned by ListShareServers_Response_SharedServer.Validate if the
// designated constraints aren't met.
type ListShareServers_Response_SharedServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareServers_Response_SharedServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareServers_Response_SharedServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareServers_Response_SharedServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareServers_Response_SharedServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareServers_Response_SharedServerValidationError) ErrorName() string {
	return "ListShareServers_Response_SharedServerValidationError"
}

// Error satisfies the builtin error interface
func (e ListShareServers_Response_SharedServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareServers_Response_SharedServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareServers_Response_SharedServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareServers_Response_SharedServerValidationError{}

// Validate checks the field values on AddShareServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddShareServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShareServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddShareServer_RequestMultiError, or nil if none found.
func (m *AddShareServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShareServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = AddShareServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddShareServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = AddShareServer_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddShareServer_RequestMultiError(errors)
	}

	return nil
}

func (m *AddShareServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddShareServer_RequestMultiError is an error wrapping multiple validation
// errors returned by AddShareServer_Request.ValidateAll() if the designated
// constraints aren't met.
type AddShareServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShareServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShareServer_RequestMultiError) AllErrors() []error { return m }

// AddShareServer_RequestValidationError is the validation error returned by
// AddShareServer_Request.Validate if the designated constraints aren't met.
type AddShareServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareServer_RequestValidationError) ErrorName() string {
	return "AddShareServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddShareServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareServer_RequestValidationError{}

// Validate checks the field values on AddShareServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddShareServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShareServer_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddShareServer_ResponseMultiError, or nil if none found.
func (m *AddShareServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShareServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddShareServer_ResponseMultiError(errors)
	}

	return nil
}

// AddShareServer_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddShareServer_Response.ValidateAll() if the designated
// constraints aren't met.
type AddShareServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShareServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShareServer_ResponseMultiError) AllErrors() []error { return m }

// AddShareServer_ResponseValidationError is the validation error returned by
// AddShareServer_Response.Validate if the designated constraints aren't met.
type AddShareServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareServer_ResponseValidationError) ErrorName() string {
	return "AddShareServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddShareServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareServer_ResponseValidationError{}

// Validate checks the field values on UpdateShareServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShareServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShareServer_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShareServer_RequestMultiError, or nil if none found.
func (m *UpdateShareServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShareServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateShareServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateShareServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetShareId()); err != nil {
		err = UpdateShareServer_RequestValidationError{
			field:  "ShareId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateShareServer_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateShareServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateShareServer_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateShareServer_Request.ValidateAll() if the
// designated constraints aren't met.
type UpdateShareServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShareServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShareServer_RequestMultiError) AllErrors() []error { return m }

// UpdateShareServer_RequestValidationError is the validation error returned by
// UpdateShareServer_Request.Validate if the designated constraints aren't met.
type UpdateShareServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareServer_RequestValidationError) ErrorName() string {
	return "UpdateShareServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareServer_RequestValidationError{}

// Validate checks the field values on UpdateShareServer_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShareServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShareServer_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShareServer_ResponseMultiError, or nil if none found.
func (m *UpdateShareServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShareServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShareServer_ResponseMultiError(errors)
	}

	return nil
}

// UpdateShareServer_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateShareServer_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateShareServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShareServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShareServer_ResponseMultiError) AllErrors() []error { return m }

// UpdateShareServer_ResponseValidationError is the validation error returned
// by UpdateShareServer_Response.Validate if the designated constraints aren't met.
type UpdateShareServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareServer_ResponseValidationError) ErrorName() string {
	return "UpdateShareServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareServer_ResponseValidationError{}

// Validate checks the field values on DeleteShareServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShareServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShareServer_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShareServer_RequestMultiError, or nil if none found.
func (m *DeleteShareServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShareServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = DeleteShareServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteShareServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetShareId()); err != nil {
		err = DeleteShareServer_RequestValidationError{
			field:  "ShareId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteShareServer_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteShareServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteShareServer_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteShareServer_Request.ValidateAll() if the
// designated constraints aren't met.
type DeleteShareServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShareServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShareServer_RequestMultiError) AllErrors() []error { return m }

// DeleteShareServer_RequestValidationError is the validation error returned by
// DeleteShareServer_Request.Validate if the designated constraints aren't met.
type DeleteShareServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShareServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShareServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShareServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShareServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShareServer_RequestValidationError) ErrorName() string {
	return "DeleteShareServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShareServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShareServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShareServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShareServer_RequestValidationError{}

// Validate checks the field values on DeleteShareServer_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShareServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShareServer_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShareServer_ResponseMultiError, or nil if none found.
func (m *DeleteShareServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShareServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShareServer_ResponseMultiError(errors)
	}

	return nil
}

// DeleteShareServer_ResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteShareServer_Response.ValidateAll() if
// the designated constraints aren't met.
type DeleteShareServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShareServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShareServer_ResponseMultiError) AllErrors() []error { return m }

// DeleteShareServer_ResponseValidationError is the validation error returned
// by DeleteShareServer_Response.Validate if the designated constraints aren't met.
type DeleteShareServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShareServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShareServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShareServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShareServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShareServer_ResponseValidationError) ErrorName() string {
	return "DeleteShareServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShareServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShareServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShareServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShareServer_ResponseValidationError{}

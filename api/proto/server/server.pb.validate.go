// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server.proto

package server

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _server_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ActivityRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityRequestMultiError, or nil if none found.
func (m *ActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ActivityRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ActivityRequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityRequestValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivityRequestMultiError(errors)
	}

	return nil
}

func (m *ActivityRequest) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ActivityRequestMultiError is an error wrapping multiple validation errors
// returned by ActivityRequest.ValidateAll() if the designated constraints
// aren't met.
type ActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityRequestMultiError) AllErrors() []error { return m }

// ActivityRequestValidationError is the validation error returned by
// ActivityRequest.Validate if the designated constraints aren't met.
type ActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityRequestValidationError) ErrorName() string { return "ActivityRequestValidationError" }

// Error satisfies the builtin error interface
func (e ActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityRequestValidationError{}

// Validate checks the field values on ListServers with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListServers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListServersMultiError, or
// nil if none found.
func (m *ListServers) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListServersMultiError(errors)
	}

	return nil
}

// ListServersMultiError is an error wrapping multiple validation errors
// returned by ListServers.ValidateAll() if the designated constraints aren't met.
type ListServersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServersMultiError) AllErrors() []error { return m }

// ListServersValidationError is the validation error returned by
// ListServers.Validate if the designated constraints aren't met.
type ListServersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServersValidationError) ErrorName() string { return "ListServersValidationError" }

// Error satisfies the builtin error interface
func (e ListServersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServersValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on AddServer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddServerMultiError, or nil
// if none found.
func (m *AddServer) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerMultiError(errors)
	}

	return nil
}

// AddServerMultiError is an error wrapping multiple validation errors returned
// by AddServer.ValidateAll() if the designated constraints aren't met.
type AddServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerMultiError) AllErrors() []error { return m }

// AddServerValidationError is the validation error returned by
// AddServer.Validate if the designated constraints aren't met.
type AddServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerValidationError) ErrorName() string { return "AddServerValidationError" }

// Error satisfies the builtin error interface
func (e AddServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerValidationError{}

// Validate checks the field values on UpdateServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateServerMultiError, or
// nil if none found.
func (m *UpdateServer) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerMultiError(errors)
	}

	return nil
}

// UpdateServerMultiError is an error wrapping multiple validation errors
// returned by UpdateServer.ValidateAll() if the designated constraints aren't met.
type UpdateServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerMultiError) AllErrors() []error { return m }

// UpdateServerValidationError is the validation error returned by
// UpdateServer.Validate if the designated constraints aren't met.
type UpdateServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerValidationError) ErrorName() string { return "UpdateServerValidationError" }

// Error satisfies the builtin error interface
func (e UpdateServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerValidationError{}

// Validate checks the field values on DeleteServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteServerMultiError, or
// nil if none found.
func (m *DeleteServer) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerMultiError(errors)
	}

	return nil
}

// DeleteServerMultiError is an error wrapping multiple validation errors
// returned by DeleteServer.ValidateAll() if the designated constraints aren't met.
type DeleteServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerMultiError) AllErrors() []error { return m }

// DeleteServerValidationError is the validation error returned by
// DeleteServer.Validate if the designated constraints aren't met.
type DeleteServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerValidationError) ErrorName() string { return "DeleteServerValidationError" }

// Error satisfies the builtin error interface
func (e DeleteServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerValidationError{}

// Validate checks the field values on UpdateServerOnlineStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerOnlineStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerOnlineStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerOnlineStatusMultiError, or nil if none found.
func (m *UpdateServerOnlineStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerOnlineStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerOnlineStatusMultiError(errors)
	}

	return nil
}

// UpdateServerOnlineStatusMultiError is an error wrapping multiple validation
// errors returned by UpdateServerOnlineStatus.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerOnlineStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerOnlineStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerOnlineStatusMultiError) AllErrors() []error { return m }

// UpdateServerOnlineStatusValidationError is the validation error returned by
// UpdateServerOnlineStatus.Validate if the designated constraints aren't met.
type UpdateServerOnlineStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerOnlineStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerOnlineStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerOnlineStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerOnlineStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerOnlineStatusValidationError) ErrorName() string {
	return "UpdateServerOnlineStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerOnlineStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerOnlineStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerOnlineStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerOnlineStatusValidationError{}

// Validate checks the field values on UpdateServerActiveStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActiveStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActiveStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActiveStatusMultiError, or nil if none found.
func (m *UpdateServerActiveStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActiveStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActiveStatusMultiError(errors)
	}

	return nil
}

// UpdateServerActiveStatusMultiError is an error wrapping multiple validation
// errors returned by UpdateServerActiveStatus.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerActiveStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActiveStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActiveStatusMultiError) AllErrors() []error { return m }

// UpdateServerActiveStatusValidationError is the validation error returned by
// UpdateServerActiveStatus.Validate if the designated constraints aren't met.
type UpdateServerActiveStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActiveStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActiveStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActiveStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActiveStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActiveStatusValidationError) ErrorName() string {
	return "UpdateServerActiveStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActiveStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActiveStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActiveStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActiveStatusValidationError{}

// Validate checks the field values on ServerAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerAccessMultiError, or
// nil if none found.
func (m *ServerAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessMultiError(errors)
	}

	return nil
}

// ServerAccessMultiError is an error wrapping multiple validation errors
// returned by ServerAccess.ValidateAll() if the designated constraints aren't met.
type ServerAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessMultiError) AllErrors() []error { return m }

// ServerAccessValidationError is the validation error returned by
// ServerAccess.Validate if the designated constraints aren't met.
type ServerAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessValidationError) ErrorName() string { return "ServerAccessValidationError" }

// Error satisfies the builtin error interface
func (e ServerAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessValidationError{}

// Validate checks the field values on UpdateServerAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerAccessMultiError, or nil if none found.
func (m *UpdateServerAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerAccessMultiError(errors)
	}

	return nil
}

// UpdateServerAccessMultiError is an error wrapping multiple validation errors
// returned by UpdateServerAccess.ValidateAll() if the designated constraints
// aren't met.
type UpdateServerAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerAccessMultiError) AllErrors() []error { return m }

// UpdateServerAccessValidationError is the validation error returned by
// UpdateServerAccess.Validate if the designated constraints aren't met.
type UpdateServerAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerAccessValidationError) ErrorName() string {
	return "UpdateServerAccessValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerAccessValidationError{}

// Validate checks the field values on ServerActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerActivityMultiError,
// or nil if none found.
func (m *ServerActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerActivityMultiError(errors)
	}

	return nil
}

// ServerActivityMultiError is an error wrapping multiple validation errors
// returned by ServerActivity.ValidateAll() if the designated constraints
// aren't met.
type ServerActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerActivityMultiError) AllErrors() []error { return m }

// ServerActivityValidationError is the validation error returned by
// ServerActivity.Validate if the designated constraints aren't met.
type ServerActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerActivityValidationError) ErrorName() string { return "ServerActivityValidationError" }

// Error satisfies the builtin error interface
func (e ServerActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerActivityValidationError{}

// Validate checks the field values on UpdateServerActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActivityMultiError, or nil if none found.
func (m *UpdateServerActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActivityMultiError(errors)
	}

	return nil
}

// UpdateServerActivityMultiError is an error wrapping multiple validation
// errors returned by UpdateServerActivity.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActivityMultiError) AllErrors() []error { return m }

// UpdateServerActivityValidationError is the validation error returned by
// UpdateServerActivity.Validate if the designated constraints aren't met.
type UpdateServerActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActivityValidationError) ErrorName() string {
	return "UpdateServerActivityValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActivityValidationError{}

// Validate checks the field values on UpdateServerActive with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActive) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActive with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActiveMultiError, or nil if none found.
func (m *UpdateServerActive) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActive) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActiveMultiError(errors)
	}

	return nil
}

// UpdateServerActiveMultiError is an error wrapping multiple validation errors
// returned by UpdateServerActive.ValidateAll() if the designated constraints
// aren't met.
type UpdateServerActiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActiveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActiveMultiError) AllErrors() []error { return m }

// UpdateServerActiveValidationError is the validation error returned by
// UpdateServerActive.Validate if the designated constraints aren't met.
type UpdateServerActiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActiveValidationError) ErrorName() string {
	return "UpdateServerActiveValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActiveValidationError{}

// Validate checks the field values on UpdateServerHostKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerHostKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerHostKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerHostKeyMultiError, or nil if none found.
func (m *UpdateServerHostKey) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerHostKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerHostKeyMultiError(errors)
	}

	return nil
}

// UpdateServerHostKeyMultiError is an error wrapping multiple validation
// errors returned by UpdateServerHostKey.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerHostKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerHostKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerHostKeyMultiError) AllErrors() []error { return m }

// UpdateServerHostKeyValidationError is the validation error returned by
// UpdateServerHostKey.Validate if the designated constraints aren't met.
type UpdateServerHostKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerHostKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerHostKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerHostKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerHostKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerHostKeyValidationError) ErrorName() string {
	return "UpdateServerHostKeyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerHostKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerHostKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerHostKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerHostKeyValidationError{}

// Validate checks the field values on AddServerSession with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServerSession) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerSession with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerSessionMultiError, or nil if none found.
func (m *AddServerSession) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerSession) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerSessionMultiError(errors)
	}

	return nil
}

// AddServerSessionMultiError is an error wrapping multiple validation errors
// returned by AddServerSession.ValidateAll() if the designated constraints
// aren't met.
type AddServerSessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerSessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerSessionMultiError) AllErrors() []error { return m }

// AddServerSessionValidationError is the validation error returned by
// AddServerSession.Validate if the designated constraints aren't met.
type AddServerSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerSessionValidationError) ErrorName() string { return "AddServerSessionValidationError" }

// Error satisfies the builtin error interface
func (e AddServerSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerSessionValidationError{}

// Validate checks the field values on ServerNameByID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerNameByID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerNameByID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerNameByIDMultiError,
// or nil if none found.
func (m *ServerNameByID) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerNameByID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerNameByIDMultiError(errors)
	}

	return nil
}

// ServerNameByIDMultiError is an error wrapping multiple validation errors
// returned by ServerNameByID.ValidateAll() if the designated constraints
// aren't met.
type ServerNameByIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerNameByIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerNameByIDMultiError) AllErrors() []error { return m }

// ServerNameByIDValidationError is the validation error returned by
// ServerNameByID.Validate if the designated constraints aren't met.
type ServerNameByIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerNameByIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerNameByIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerNameByIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerNameByIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerNameByIDValidationError) ErrorName() string { return "ServerNameByIDValidationError" }

// Error satisfies the builtin error interface
func (e ServerNameByIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerNameByID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerNameByIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerNameByIDValidationError{}

// Validate checks the field values on ListServersShareForUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServersShareForUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServersShareForUser with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServersShareForUserMultiError, or nil if none found.
func (m *ListServersShareForUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServersShareForUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListServersShareForUserMultiError(errors)
	}

	return nil
}

// ListServersShareForUserMultiError is an error wrapping multiple validation
// errors returned by ListServersShareForUser.ValidateAll() if the designated
// constraints aren't met.
type ListServersShareForUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServersShareForUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServersShareForUserMultiError) AllErrors() []error { return m }

// ListServersShareForUserValidationError is the validation error returned by
// ListServersShareForUser.Validate if the designated constraints aren't met.
type ListServersShareForUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServersShareForUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServersShareForUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServersShareForUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServersShareForUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServersShareForUserValidationError) ErrorName() string {
	return "ListServersShareForUserValidationError"
}

// Error satisfies the builtin error interface
func (e ListServersShareForUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServersShareForUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServersShareForUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServersShareForUserValidationError{}

// Validate checks the field values on AddServerShareForUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerShareForUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerShareForUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerShareForUserMultiError, or nil if none found.
func (m *AddServerShareForUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerShareForUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerShareForUserMultiError(errors)
	}

	return nil
}

// AddServerShareForUserMultiError is an error wrapping multiple validation
// errors returned by AddServerShareForUser.ValidateAll() if the designated
// constraints aren't met.
type AddServerShareForUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerShareForUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerShareForUserMultiError) AllErrors() []error { return m }

// AddServerShareForUserValidationError is the validation error returned by
// AddServerShareForUser.Validate if the designated constraints aren't met.
type AddServerShareForUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerShareForUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerShareForUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerShareForUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerShareForUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerShareForUserValidationError) ErrorName() string {
	return "AddServerShareForUserValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerShareForUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerShareForUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerShareForUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerShareForUserValidationError{}

// Validate checks the field values on UpdateServerShareForUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerShareForUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerShareForUser with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerShareForUserMultiError, or nil if none found.
func (m *UpdateServerShareForUser) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerShareForUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerShareForUserMultiError(errors)
	}

	return nil
}

// UpdateServerShareForUserMultiError is an error wrapping multiple validation
// errors returned by UpdateServerShareForUser.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerShareForUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerShareForUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerShareForUserMultiError) AllErrors() []error { return m }

// UpdateServerShareForUserValidationError is the validation error returned by
// UpdateServerShareForUser.Validate if the designated constraints aren't met.
type UpdateServerShareForUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerShareForUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerShareForUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerShareForUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerShareForUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerShareForUserValidationError) ErrorName() string {
	return "UpdateServerShareForUserValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerShareForUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerShareForUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerShareForUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerShareForUserValidationError{}

// Validate checks the field values on DeleteServerShareForUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerShareForUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerShareForUser with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerShareForUserMultiError, or nil if none found.
func (m *DeleteServerShareForUser) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerShareForUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerShareForUserMultiError(errors)
	}

	return nil
}

// DeleteServerShareForUserMultiError is an error wrapping multiple validation
// errors returned by DeleteServerShareForUser.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerShareForUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerShareForUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerShareForUserMultiError) AllErrors() []error { return m }

// DeleteServerShareForUserValidationError is the validation error returned by
// DeleteServerShareForUser.Validate if the designated constraints aren't met.
type DeleteServerShareForUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerShareForUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerShareForUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerShareForUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerShareForUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerShareForUserValidationError) ErrorName() string {
	return "DeleteServerShareForUserValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerShareForUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerShareForUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerShareForUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerShareForUserValidationError{}

// Validate checks the field values on ListServers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServers_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServers_RequestMultiError, or nil if none found.
func (m *ListServers_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServers_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListServers_RequestMultiError(errors)
	}

	return nil
}

// ListServers_RequestMultiError is an error wrapping multiple validation
// errors returned by ListServers_Request.ValidateAll() if the designated
// constraints aren't met.
type ListServers_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServers_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServers_RequestMultiError) AllErrors() []error { return m }

// ListServers_RequestValidationError is the validation error returned by
// ListServers_Request.Validate if the designated constraints aren't met.
type ListServers_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServers_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServers_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServers_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServers_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServers_RequestValidationError) ErrorName() string {
	return "ListServers_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServers_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServers_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServers_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServers_RequestValidationError{}

// Validate checks the field values on ListServers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServers_ResponseMultiError, or nil if none found.
func (m *ListServers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServers_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServers_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServers_ResponseValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServers_ResponseMultiError(errors)
	}

	return nil
}

// ListServers_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListServers_Response.ValidateAll() if the designated
// constraints aren't met.
type ListServers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServers_ResponseMultiError) AllErrors() []error { return m }

// ListServers_ResponseValidationError is the validation error returned by
// ListServers_Response.Validate if the designated constraints aren't met.
type ListServers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServers_ResponseValidationError) ErrorName() string {
	return "ListServers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServers_ResponseValidationError{}

// Validate checks the field values on Server_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_RequestMultiError,
// or nil if none found.
func (m *Server_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = Server_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetServerId() != "" {

		if err := m._validateUuid(m.GetServerId()); err != nil {
			err = Server_RequestValidationError{
				field:  "ServerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetProjectId() != "" {

		if err := m._validateUuid(m.GetProjectId()); err != nil {
			err = Server_RequestValidationError{
				field:  "ProjectId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return Server_RequestMultiError(errors)
	}

	return nil
}

func (m *Server_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Server_RequestMultiError is an error wrapping multiple validation errors
// returned by Server_Request.ValidateAll() if the designated constraints
// aren't met.
type Server_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_RequestMultiError) AllErrors() []error { return m }

// Server_RequestValidationError is the validation error returned by
// Server_Request.Validate if the designated constraints aren't met.
type Server_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_RequestValidationError) ErrorName() string { return "Server_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Server_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_RequestValidationError{}

// Validate checks the field values on Server_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Server_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Server_ResponseMultiError, or nil if none found.
func (m *Server_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for ProjectId

	// no validation rules for ProjectLogin

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Token

	// no validation rules for Login

	// no validation rules for Password

	// no validation rules for Title

	// no validation rules for Audit

	// no validation rules for Online

	// no validation rules for KeyPublic

	// no validation rules for KeyPrivate

	// no validation rules for KeyPassword

	// no validation rules for AccountId

	// no validation rules for Auth

	// no validation rules for Scheme

	// no validation rules for HostKey

	// no validation rules for PrivateDescription

	// no validation rules for PublicDescription

	// no validation rules for Active

	// no validation rules for CountMembers

	if len(errors) > 0 {
		return Server_ResponseMultiError(errors)
	}

	return nil
}

// Server_ResponseMultiError is an error wrapping multiple validation errors
// returned by Server_Response.ValidateAll() if the designated constraints
// aren't met.
type Server_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_ResponseMultiError) AllErrors() []error { return m }

// Server_ResponseValidationError is the validation error returned by
// Server_Response.Validate if the designated constraints aren't met.
type Server_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_ResponseValidationError) ErrorName() string { return "Server_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Server_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_ResponseValidationError{}

// Validate checks the field values on AddServer_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServer_RequestMultiError, or nil if none found.
func (m *AddServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = AddServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetAddress()); err != nil {
		if ip := net.ParseIP(m.GetAddress()); ip == nil {
			err := AddServer_RequestValidationError{
				field:  "Address",
				reason: "value must be a valid hostname, or ip address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if val := m.GetPort(); val < 1 || val >= 65536 {
		err := AddServer_RequestValidationError{
			field:  "Port",
			reason: "value must be inside range [1, 65536)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLogin()); l < 3 || l > 20 {
		err := AddServer_RequestValidationError{
			field:  "Login",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddServer_Request_Login_Pattern.MatchString(m.GetLogin()) {
		err := AddServer_RequestValidationError{
			field:  "Login",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := AddServer_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ServerAuth_name[int32(m.GetAuth())]; !ok {
		err := AddServer_RequestValidationError{
			field:  "Auth",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ServerScheme_name[int32(m.GetScheme())]; !ok {
		err := AddServer_RequestValidationError{
			field:  "Scheme",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Audit

	// no validation rules for Active

	// no validation rules for PrivateDescription

	// no validation rules for PublicDescription

	// no validation rules for Password

	// no validation rules for PublicKey

	// no validation rules for KeyUuid

	if len(errors) > 0 {
		return AddServer_RequestMultiError(errors)
	}

	return nil
}

func (m *AddServer_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddServer_RequestMultiError is an error wrapping multiple validation errors
// returned by AddServer_Request.ValidateAll() if the designated constraints
// aren't met.
type AddServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServer_RequestMultiError) AllErrors() []error { return m }

// AddServer_RequestValidationError is the validation error returned by
// AddServer_Request.Validate if the designated constraints aren't met.
type AddServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServer_RequestValidationError) ErrorName() string {
	return "AddServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServer_RequestValidationError{}

var _AddServer_Request_Login_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on AddServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServer_ResponseMultiError, or nil if none found.
func (m *AddServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for KeyPublic

	if len(errors) > 0 {
		return AddServer_ResponseMultiError(errors)
	}

	return nil
}

// AddServer_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddServer_Response.ValidateAll() if the designated constraints
// aren't met.
type AddServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServer_ResponseMultiError) AllErrors() []error { return m }

// AddServer_ResponseValidationError is the validation error returned by
// AddServer_Response.Validate if the designated constraints aren't met.
type AddServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServer_ResponseValidationError) ErrorName() string {
	return "AddServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServer_ResponseValidationError{}

// Validate checks the field values on UpdateServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServer_RequestMultiError, or nil if none found.
func (m *UpdateServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetServerId() != "" {

		if err := m._validateUuid(m.GetServerId()); err != nil {
			err = UpdateServer_RequestValidationError{
				field:  "ServerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetAddress()); err != nil {
		if ip := net.ParseIP(m.GetAddress()); ip == nil {
			err := UpdateServer_RequestValidationError{
				field:  "Address",
				reason: "value must be a valid hostname, or ip address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if val := m.GetPort(); val < 1 || val >= 65536 {
		err := UpdateServer_RequestValidationError{
			field:  "Port",
			reason: "value must be inside range [1, 65536)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLogin()); l < 3 || l > 20 {
		err := UpdateServer_RequestValidationError{
			field:  "Login",
			reason: "value length must be between 3 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateServer_Request_Login_Pattern.MatchString(m.GetLogin()) {
		err := UpdateServer_RequestValidationError{
			field:  "Login",
			reason: "value does not match regex pattern \"^[a-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 128 {
		err := UpdateServer_RequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrivateDescription

	// no validation rules for PublicDescription

	// no validation rules for Audit

	// no validation rules for Active

	if len(errors) > 0 {
		return UpdateServer_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServer_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServer_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServer_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServer_RequestMultiError) AllErrors() []error { return m }

// UpdateServer_RequestValidationError is the validation error returned by
// UpdateServer_Request.Validate if the designated constraints aren't met.
type UpdateServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServer_RequestValidationError) ErrorName() string {
	return "UpdateServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServer_RequestValidationError{}

var _UpdateServer_Request_Login_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on UpdateServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServer_ResponseMultiError, or nil if none found.
func (m *UpdateServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServer_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServer_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateServer_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServer_ResponseMultiError) AllErrors() []error { return m }

// UpdateServer_ResponseValidationError is the validation error returned by
// UpdateServer_Response.Validate if the designated constraints aren't met.
type UpdateServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServer_ResponseValidationError) ErrorName() string {
	return "UpdateServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServer_ResponseValidationError{}

// Validate checks the field values on DeleteServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServer_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServer_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServer_RequestMultiError, or nil if none found.
func (m *DeleteServer_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServer_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = DeleteServer_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteServer_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() != "" {

		if err := m._validateUuid(m.GetServerId()); err != nil {
			err = DeleteServer_RequestValidationError{
				field:  "ServerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteServer_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteServer_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteServer_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServer_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteServer_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServer_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServer_RequestMultiError) AllErrors() []error { return m }

// DeleteServer_RequestValidationError is the validation error returned by
// DeleteServer_Request.Validate if the designated constraints aren't met.
type DeleteServer_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServer_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServer_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServer_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServer_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServer_RequestValidationError) ErrorName() string {
	return "DeleteServer_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServer_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServer_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServer_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServer_RequestValidationError{}

// Validate checks the field values on DeleteServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServer_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServer_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServer_ResponseMultiError, or nil if none found.
func (m *DeleteServer_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServer_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServer_ResponseMultiError(errors)
	}

	return nil
}

// DeleteServer_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteServer_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteServer_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServer_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServer_ResponseMultiError) AllErrors() []error { return m }

// DeleteServer_ResponseValidationError is the validation error returned by
// DeleteServer_Response.Validate if the designated constraints aren't met.
type DeleteServer_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServer_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServer_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServer_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServer_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServer_ResponseValidationError) ErrorName() string {
	return "DeleteServer_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServer_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServer_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServer_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServer_ResponseValidationError{}

// Validate checks the field values on UpdateServerOnlineStatus_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerOnlineStatus_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerOnlineStatus_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServerOnlineStatus_RequestMultiError, or nil if none found.
func (m *UpdateServerOnlineStatus_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerOnlineStatus_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerOnlineStatus_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerOnlineStatus_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateServerOnlineStatus_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerOnlineStatus_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerOnlineStatus_RequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerOnlineStatus_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerOnlineStatus_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerOnlineStatus_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerOnlineStatus_RequestMultiError) AllErrors() []error { return m }

// UpdateServerOnlineStatus_RequestValidationError is the validation error
// returned by UpdateServerOnlineStatus_Request.Validate if the designated
// constraints aren't met.
type UpdateServerOnlineStatus_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerOnlineStatus_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerOnlineStatus_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerOnlineStatus_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerOnlineStatus_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerOnlineStatus_RequestValidationError) ErrorName() string {
	return "UpdateServerOnlineStatus_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerOnlineStatus_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerOnlineStatus_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerOnlineStatus_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerOnlineStatus_RequestValidationError{}

// Validate checks the field values on UpdateServerOnlineStatus_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerOnlineStatus_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerOnlineStatus_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateServerOnlineStatus_ResponseMultiError, or nil if none found.
func (m *UpdateServerOnlineStatus_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerOnlineStatus_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerOnlineStatus_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerOnlineStatus_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerOnlineStatus_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerOnlineStatus_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerOnlineStatus_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerOnlineStatus_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerOnlineStatus_ResponseValidationError is the validation error
// returned by UpdateServerOnlineStatus_Response.Validate if the designated
// constraints aren't met.
type UpdateServerOnlineStatus_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerOnlineStatus_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerOnlineStatus_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerOnlineStatus_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerOnlineStatus_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerOnlineStatus_ResponseValidationError) ErrorName() string {
	return "UpdateServerOnlineStatus_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerOnlineStatus_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerOnlineStatus_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerOnlineStatus_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerOnlineStatus_ResponseValidationError{}

// Validate checks the field values on UpdateServerActiveStatus_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerActiveStatus_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActiveStatus_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServerActiveStatus_RequestMultiError, or nil if none found.
func (m *UpdateServerActiveStatus_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActiveStatus_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerActiveStatus_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerActiveStatus_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateServerActiveStatus_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerActiveStatus_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerActiveStatus_RequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerActiveStatus_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerActiveStatus_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActiveStatus_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActiveStatus_RequestMultiError) AllErrors() []error { return m }

// UpdateServerActiveStatus_RequestValidationError is the validation error
// returned by UpdateServerActiveStatus_Request.Validate if the designated
// constraints aren't met.
type UpdateServerActiveStatus_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActiveStatus_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActiveStatus_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActiveStatus_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActiveStatus_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActiveStatus_RequestValidationError) ErrorName() string {
	return "UpdateServerActiveStatus_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActiveStatus_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActiveStatus_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActiveStatus_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActiveStatus_RequestValidationError{}

// Validate checks the field values on UpdateServerActiveStatus_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerActiveStatus_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActiveStatus_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateServerActiveStatus_ResponseMultiError, or nil if none found.
func (m *UpdateServerActiveStatus_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActiveStatus_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActiveStatus_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerActiveStatus_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerActiveStatus_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerActiveStatus_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActiveStatus_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActiveStatus_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerActiveStatus_ResponseValidationError is the validation error
// returned by UpdateServerActiveStatus_Response.Validate if the designated
// constraints aren't met.
type UpdateServerActiveStatus_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActiveStatus_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActiveStatus_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActiveStatus_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActiveStatus_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActiveStatus_ResponseValidationError) ErrorName() string {
	return "UpdateServerActiveStatus_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActiveStatus_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActiveStatus_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActiveStatus_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActiveStatus_ResponseValidationError{}

// Validate checks the field values on ServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccess_RequestMultiError, or nil if none found.
func (m *ServerAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerAccess_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerAccess_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() != "" {

		if err := m._validateUuid(m.GetServerId()); err != nil {
			err = ServerAccess_RequestValidationError{
				field:  "ServerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ServerAccess_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerAccess_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerAccess_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccess_RequestMultiError) AllErrors() []error { return m }

// ServerAccess_RequestValidationError is the validation error returned by
// ServerAccess_Request.Validate if the designated constraints aren't met.
type ServerAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccess_RequestValidationError) ErrorName() string {
	return "ServerAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccess_RequestValidationError{}

// Validate checks the field values on ServerAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccess_ResponseMultiError, or nil if none found.
func (m *ServerAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Auth

	// no validation rules for Password

	// no validation rules for PublicKey

	// no validation rules for PrivateKey

	// no validation rules for PasswordKey

	// no validation rules for FingeprintKey

	if len(errors) > 0 {
		return ServerAccess_ResponseMultiError(errors)
	}

	return nil
}

// ServerAccess_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerAccess_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccess_ResponseMultiError) AllErrors() []error { return m }

// ServerAccess_ResponseValidationError is the validation error returned by
// ServerAccess_Response.Validate if the designated constraints aren't met.
type ServerAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccess_ResponseValidationError) ErrorName() string {
	return "ServerAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccess_ResponseValidationError{}

// Validate checks the field values on UpdateServerAccess_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerAccess_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerAccess_RequestMultiError, or nil if none found.
func (m *UpdateServerAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerAccess_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServerAccess_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() != "" {

		if err := m._validateUuid(m.GetServerId()); err != nil {
			err = UpdateServerAccess_RequestValidationError{
				field:  "ServerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Auth

	// no validation rules for Password

	// no validation rules for PublicKey

	// no validation rules for KeyUuid

	if len(errors) > 0 {
		return UpdateServerAccess_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerAccess_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerAccess_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerAccess_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerAccess_RequestMultiError) AllErrors() []error { return m }

// UpdateServerAccess_RequestValidationError is the validation error returned
// by UpdateServerAccess_Request.Validate if the designated constraints aren't met.
type UpdateServerAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerAccess_RequestValidationError) ErrorName() string {
	return "UpdateServerAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerAccess_RequestValidationError{}

// Validate checks the field values on UpdateServerAccess_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerAccess_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerAccess_ResponseMultiError, or nil if none found.
func (m *UpdateServerAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerAccess_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerAccess_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerAccess_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerAccess_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerAccess_ResponseValidationError is the validation error returned
// by UpdateServerAccess_Response.Validate if the designated constraints
// aren't met.
type UpdateServerAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerAccess_ResponseValidationError) ErrorName() string {
	return "UpdateServerAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerAccess_ResponseValidationError{}

// Validate checks the field values on ServerActivity_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerActivity_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerActivity_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerActivity_RequestMultiError, or nil if none found.
func (m *ServerActivity_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerActivity_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerActivity_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerActivity_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServerId

	if len(errors) > 0 {
		return ServerActivity_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerActivity_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerActivity_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerActivity_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerActivity_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerActivity_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerActivity_RequestMultiError) AllErrors() []error { return m }

// ServerActivity_RequestValidationError is the validation error returned by
// ServerActivity_Request.Validate if the designated constraints aren't met.
type ServerActivity_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerActivity_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerActivity_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerActivity_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerActivity_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerActivity_RequestValidationError) ErrorName() string {
	return "ServerActivity_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerActivity_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerActivity_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerActivity_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerActivity_RequestValidationError{}

// Validate checks the field values on ServerActivity_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerActivity_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerActivity_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerActivity_ResponseMultiError, or nil if none found.
func (m *ServerActivity_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerActivity_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerActivity_ResponseMultiError(errors)
	}

	return nil
}

// ServerActivity_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerActivity_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerActivity_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerActivity_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerActivity_ResponseMultiError) AllErrors() []error { return m }

// ServerActivity_ResponseValidationError is the validation error returned by
// ServerActivity_Response.Validate if the designated constraints aren't met.
type ServerActivity_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerActivity_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerActivity_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerActivity_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerActivity_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerActivity_ResponseValidationError) ErrorName() string {
	return "ServerActivity_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerActivity_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerActivity_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerActivity_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerActivity_ResponseValidationError{}

// Validate checks the field values on UpdateServerActivity_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActivity_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActivity_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActivity_RequestMultiError, or nil if none found.
func (m *UpdateServerActivity_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActivity_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerActivity_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServerActivity_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServerId

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServerActivity_RequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServerActivity_RequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServerActivity_RequestValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateServerActivity_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerActivity_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerActivity_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerActivity_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerActivity_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActivity_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActivity_RequestMultiError) AllErrors() []error { return m }

// UpdateServerActivity_RequestValidationError is the validation error returned
// by UpdateServerActivity_Request.Validate if the designated constraints
// aren't met.
type UpdateServerActivity_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActivity_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActivity_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActivity_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActivity_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActivity_RequestValidationError) ErrorName() string {
	return "UpdateServerActivity_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActivity_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActivity_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActivity_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActivity_RequestValidationError{}

// Validate checks the field values on UpdateServerActivity_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActivity_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActivity_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServerActivity_ResponseMultiError, or nil if none found.
func (m *UpdateServerActivity_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActivity_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActivity_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerActivity_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerActivity_Response.ValidateAll()
// if the designated constraints aren't met.
type UpdateServerActivity_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActivity_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActivity_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerActivity_ResponseValidationError is the validation error
// returned by UpdateServerActivity_Response.Validate if the designated
// constraints aren't met.
type UpdateServerActivity_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActivity_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActivity_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActivity_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActivity_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActivity_ResponseValidationError) ErrorName() string {
	return "UpdateServerActivity_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActivity_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActivity_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActivity_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActivity_ResponseValidationError{}

// Validate checks the field values on UpdateServerActive_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActive_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActive_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActive_RequestMultiError, or nil if none found.
func (m *UpdateServerActive_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActive_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerActive_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerActive_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateServerActive_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerActive_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerActive_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerActive_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerActive_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActive_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActive_RequestMultiError) AllErrors() []error { return m }

// UpdateServerActive_RequestValidationError is the validation error returned
// by UpdateServerActive_Request.Validate if the designated constraints aren't met.
type UpdateServerActive_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActive_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActive_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActive_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActive_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActive_RequestValidationError) ErrorName() string {
	return "UpdateServerActive_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActive_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActive_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActive_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActive_RequestValidationError{}

// Validate checks the field values on UpdateServerActive_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerActive_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerActive_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerActive_ResponseMultiError, or nil if none found.
func (m *UpdateServerActive_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerActive_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerActive_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerActive_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerActive_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerActive_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerActive_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerActive_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerActive_ResponseValidationError is the validation error returned
// by UpdateServerActive_Response.Validate if the designated constraints
// aren't met.
type UpdateServerActive_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerActive_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerActive_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerActive_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerActive_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerActive_ResponseValidationError) ErrorName() string {
	return "UpdateServerActive_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerActive_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerActive_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerActive_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerActive_ResponseValidationError{}

// Validate checks the field values on UpdateServerHostKey_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerHostKey_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerHostKey_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerHostKey_RequestMultiError, or nil if none found.
func (m *UpdateServerHostKey_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerHostKey_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for Hostkey

	if len(errors) > 0 {
		return UpdateServerHostKey_RequestMultiError(errors)
	}

	return nil
}

// UpdateServerHostKey_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerHostKey_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerHostKey_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerHostKey_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerHostKey_RequestMultiError) AllErrors() []error { return m }

// UpdateServerHostKey_RequestValidationError is the validation error returned
// by UpdateServerHostKey_Request.Validate if the designated constraints
// aren't met.
type UpdateServerHostKey_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerHostKey_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerHostKey_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerHostKey_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerHostKey_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerHostKey_RequestValidationError) ErrorName() string {
	return "UpdateServerHostKey_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerHostKey_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerHostKey_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerHostKey_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerHostKey_RequestValidationError{}

// Validate checks the field values on UpdateServerHostKey_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerHostKey_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerHostKey_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerHostKey_ResponseMultiError, or nil if none found.
func (m *UpdateServerHostKey_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerHostKey_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerHostKey_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerHostKey_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerHostKey_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerHostKey_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerHostKey_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerHostKey_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerHostKey_ResponseValidationError is the validation error returned
// by UpdateServerHostKey_Response.Validate if the designated constraints
// aren't met.
type UpdateServerHostKey_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerHostKey_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerHostKey_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerHostKey_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerHostKey_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerHostKey_ResponseValidationError) ErrorName() string {
	return "UpdateServerHostKey_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerHostKey_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerHostKey_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerHostKey_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerHostKey_ResponseValidationError{}

// Validate checks the field values on AddServerSession_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerSession_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerSession_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerSession_RequestMultiError, or nil if none found.
func (m *AddServerSession_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerSession_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddServerSession_RequestValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddServerSession_RequestValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddServerSession_RequestValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Uuid

	if len(errors) > 0 {
		return AddServerSession_RequestMultiError(errors)
	}

	return nil
}

// AddServerSession_RequestMultiError is an error wrapping multiple validation
// errors returned by AddServerSession_Request.ValidateAll() if the designated
// constraints aren't met.
type AddServerSession_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerSession_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerSession_RequestMultiError) AllErrors() []error { return m }

// AddServerSession_RequestValidationError is the validation error returned by
// AddServerSession_Request.Validate if the designated constraints aren't met.
type AddServerSession_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerSession_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerSession_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerSession_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerSession_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerSession_RequestValidationError) ErrorName() string {
	return "AddServerSession_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerSession_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerSession_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerSession_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerSession_RequestValidationError{}

// Validate checks the field values on AddServerSession_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerSession_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerSession_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerSession_ResponseMultiError, or nil if none found.
func (m *AddServerSession_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerSession_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return AddServerSession_ResponseMultiError(errors)
	}

	return nil
}

// AddServerSession_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddServerSession_Response.ValidateAll() if the
// designated constraints aren't met.
type AddServerSession_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerSession_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerSession_ResponseMultiError) AllErrors() []error { return m }

// AddServerSession_ResponseValidationError is the validation error returned by
// AddServerSession_Response.Validate if the designated constraints aren't met.
type AddServerSession_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerSession_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerSession_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerSession_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerSession_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerSession_ResponseValidationError) ErrorName() string {
	return "AddServerSession_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerSession_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerSession_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerSession_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerSession_ResponseValidationError{}

// Validate checks the field values on ServerNameByID_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerNameByID_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerNameByID_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerNameByID_RequestMultiError, or nil if none found.
func (m *ServerNameByID_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerNameByID_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerNameByID_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerNameByID_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectId() != "" {

		if err := m._validateUuid(m.GetProjectId()); err != nil {
			err = ServerNameByID_RequestValidationError{
				field:  "ProjectId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ServerNameByID_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerNameByID_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerNameByID_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerNameByID_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerNameByID_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerNameByID_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerNameByID_RequestMultiError) AllErrors() []error { return m }

// ServerNameByID_RequestValidationError is the validation error returned by
// ServerNameByID_Request.Validate if the designated constraints aren't met.
type ServerNameByID_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerNameByID_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerNameByID_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerNameByID_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerNameByID_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerNameByID_RequestValidationError) ErrorName() string {
	return "ServerNameByID_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerNameByID_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerNameByID_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerNameByID_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerNameByID_RequestValidationError{}

// Validate checks the field values on ServerNameByID_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerNameByID_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerNameByID_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerNameByID_ResponseMultiError, or nil if none found.
func (m *ServerNameByID_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerNameByID_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerName

	if len(errors) > 0 {
		return ServerNameByID_ResponseMultiError(errors)
	}

	return nil
}

// ServerNameByID_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerNameByID_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerNameByID_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerNameByID_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerNameByID_ResponseMultiError) AllErrors() []error { return m }

// ServerNameByID_ResponseValidationError is the validation error returned by
// ServerNameByID_Response.Validate if the designated constraints aren't met.
type ServerNameByID_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerNameByID_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerNameByID_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerNameByID_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerNameByID_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerNameByID_ResponseValidationError) ErrorName() string {
	return "ServerNameByID_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerNameByID_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerNameByID_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerNameByID_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerNameByID_ResponseValidationError{}

// Validate checks the field values on ListServersShareForUser_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServersShareForUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServersShareForUser_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServersShareForUser_RequestMultiError, or nil if none found.
func (m *ListServersShareForUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServersShareForUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ListServersShareForUser_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListServersShareForUser_RequestMultiError(errors)
	}

	return nil
}

func (m *ListServersShareForUser_Request) _validateUuid(uuid string) error {
	if matched := _server_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListServersShareForUser_RequestMultiError is an error wrapping multiple
// validation errors returned by ListServersShareForUser_Request.ValidateAll()
// if the designated constraints aren't met.
type ListServersShareForUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServersShareForUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServersShareForUser_RequestMultiError) AllErrors() []error { return m }

// ListServersShareForUser_RequestValidationError is the validation error
// returned by ListServersShareForUser_Request.Validate if the designated
// constraints aren't met.
type ListServersShareForUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServersShareForUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServersShareForUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServersShareForUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServersShareForUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServersShareForUser_RequestValidationError) ErrorName() string {
	return "ListServersShareForUser_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServersShareForUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServersShareForUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServersShareForUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServersShareForUser_RequestValidationError{}

// Validate checks the field values on ListServersShareForUser_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListServersShareForUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServersShareForUser_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServersShareForUser_ResponseMultiError, or nil if none found.
func (m *ListServersShareForUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServersShareForUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServersShareForUser_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServersShareForUser_ResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServersShareForUser_ResponseValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServersShareForUser_ResponseMultiError(errors)
	}

	return nil
}

// ListServersShareForUser_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListServersShareForUser_Response.ValidateAll() if the designated
// constraints aren't met.
type ListServersShareForUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServersShareForUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServersShareForUser_ResponseMultiError) AllErrors() []error { return m }

// ListServersShareForUser_ResponseValidationError is the validation error
// returned by ListServersShareForUser_Response.Validate if the designated
// constraints aren't met.
type ListServersShareForUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServersShareForUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServersShareForUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServersShareForUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServersShareForUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServersShareForUser_ResponseValidationError) ErrorName() string {
	return "ListServersShareForUser_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServersShareForUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServersShareForUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServersShareForUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServersShareForUser_ResponseValidationError{}

// Validate checks the field values on
// ListServersShareForUser_Response_SharedServer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListServersShareForUser_Response_SharedServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListServersShareForUser_Response_SharedServer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListServersShareForUser_Response_SharedServerMultiError, or nil if none found.
func (m *ListServersShareForUser_Response_SharedServer) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServersShareForUser_Response_SharedServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserLogin

	// no validation rules for ProjectLogin

	// no validation rules for ServerToken

	// no validation rules for ServerId

	// no validation rules for ServerOnline

	// no validation rules for ServerTitle

	// no validation rules for ServerDescription

	if len(errors) > 0 {
		return ListServersShareForUser_Response_SharedServerMultiError(errors)
	}

	return nil
}

// ListServersShareForUser_Response_SharedServerMultiError is an error wrapping
// multiple validation errors returned by
// ListServersShareForUser_Response_SharedServer.ValidateAll() if the
// designated constraints aren't met.
type ListServersShareForUser_Response_SharedServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServersShareForUser_Response_SharedServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServersShareForUser_Response_SharedServerMultiError) AllErrors() []error { return m }

// ListServersShareForUser_Response_SharedServerValidationError is the
// validation error returned by
// ListServersShareForUser_Response_SharedServer.Validate if the designated
// constraints aren't met.
type ListServersShareForUser_Response_SharedServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServersShareForUser_Response_SharedServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServersShareForUser_Response_SharedServerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListServersShareForUser_Response_SharedServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServersShareForUser_Response_SharedServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServersShareForUser_Response_SharedServerValidationError) ErrorName() string {
	return "ListServersShareForUser_Response_SharedServerValidationError"
}

// Error satisfies the builtin error interface
func (e ListServersShareForUser_Response_SharedServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServersShareForUser_Response_SharedServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServersShareForUser_Response_SharedServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServersShareForUser_Response_SharedServerValidationError{}

// Validate checks the field values on AddServerShareForUser_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerShareForUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerShareForUser_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddServerShareForUser_RequestMultiError, or nil if none found.
func (m *AddServerShareForUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerShareForUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProjectId

	// no validation rules for ServerId

	if len(errors) > 0 {
		return AddServerShareForUser_RequestMultiError(errors)
	}

	return nil
}

// AddServerShareForUser_RequestMultiError is an error wrapping multiple
// validation errors returned by AddServerShareForUser_Request.ValidateAll()
// if the designated constraints aren't met.
type AddServerShareForUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerShareForUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerShareForUser_RequestMultiError) AllErrors() []error { return m }

// AddServerShareForUser_RequestValidationError is the validation error
// returned by AddServerShareForUser_Request.Validate if the designated
// constraints aren't met.
type AddServerShareForUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerShareForUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerShareForUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerShareForUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerShareForUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerShareForUser_RequestValidationError) ErrorName() string {
	return "AddServerShareForUser_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerShareForUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerShareForUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerShareForUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerShareForUser_RequestValidationError{}

// Validate checks the field values on AddServerShareForUser_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerShareForUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerShareForUser_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddServerShareForUser_ResponseMultiError, or nil if none found.
func (m *AddServerShareForUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerShareForUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerShareForUser_ResponseMultiError(errors)
	}

	return nil
}

// AddServerShareForUser_ResponseMultiError is an error wrapping multiple
// validation errors returned by AddServerShareForUser_Response.ValidateAll()
// if the designated constraints aren't met.
type AddServerShareForUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerShareForUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerShareForUser_ResponseMultiError) AllErrors() []error { return m }

// AddServerShareForUser_ResponseValidationError is the validation error
// returned by AddServerShareForUser_Response.Validate if the designated
// constraints aren't met.
type AddServerShareForUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerShareForUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerShareForUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerShareForUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerShareForUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerShareForUser_ResponseValidationError) ErrorName() string {
	return "AddServerShareForUser_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerShareForUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerShareForUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerShareForUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerShareForUser_ResponseValidationError{}

// Validate checks the field values on UpdateServerShareForUser_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerShareForUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerShareForUser_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServerShareForUser_RequestMultiError, or nil if none found.
func (m *UpdateServerShareForUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerShareForUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProjectId

	// no validation rules for ShareId

	if len(errors) > 0 {
		return UpdateServerShareForUser_RequestMultiError(errors)
	}

	return nil
}

// UpdateServerShareForUser_RequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerShareForUser_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerShareForUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerShareForUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerShareForUser_RequestMultiError) AllErrors() []error { return m }

// UpdateServerShareForUser_RequestValidationError is the validation error
// returned by UpdateServerShareForUser_Request.Validate if the designated
// constraints aren't met.
type UpdateServerShareForUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerShareForUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerShareForUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerShareForUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerShareForUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerShareForUser_RequestValidationError) ErrorName() string {
	return "UpdateServerShareForUser_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerShareForUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerShareForUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerShareForUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerShareForUser_RequestValidationError{}

// Validate checks the field values on UpdateServerShareForUser_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServerShareForUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerShareForUser_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateServerShareForUser_ResponseMultiError, or nil if none found.
func (m *UpdateServerShareForUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerShareForUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerShareForUser_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerShareForUser_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServerShareForUser_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerShareForUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerShareForUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerShareForUser_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerShareForUser_ResponseValidationError is the validation error
// returned by UpdateServerShareForUser_Response.Validate if the designated
// constraints aren't met.
type UpdateServerShareForUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerShareForUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerShareForUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerShareForUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerShareForUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerShareForUser_ResponseValidationError) ErrorName() string {
	return "UpdateServerShareForUser_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerShareForUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerShareForUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerShareForUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerShareForUser_ResponseValidationError{}

// Validate checks the field values on DeleteServerShareForUser_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteServerShareForUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerShareForUser_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteServerShareForUser_RequestMultiError, or nil if none found.
func (m *DeleteServerShareForUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerShareForUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProjectId

	// no validation rules for ShareId

	if len(errors) > 0 {
		return DeleteServerShareForUser_RequestMultiError(errors)
	}

	return nil
}

// DeleteServerShareForUser_RequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteServerShareForUser_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerShareForUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerShareForUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerShareForUser_RequestMultiError) AllErrors() []error { return m }

// DeleteServerShareForUser_RequestValidationError is the validation error
// returned by DeleteServerShareForUser_Request.Validate if the designated
// constraints aren't met.
type DeleteServerShareForUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerShareForUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerShareForUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerShareForUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerShareForUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerShareForUser_RequestValidationError) ErrorName() string {
	return "DeleteServerShareForUser_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerShareForUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerShareForUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerShareForUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerShareForUser_RequestValidationError{}

// Validate checks the field values on DeleteServerShareForUser_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteServerShareForUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerShareForUser_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteServerShareForUser_ResponseMultiError, or nil if none found.
func (m *DeleteServerShareForUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerShareForUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerShareForUser_ResponseMultiError(errors)
	}

	return nil
}

// DeleteServerShareForUser_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteServerShareForUser_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerShareForUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerShareForUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerShareForUser_ResponseMultiError) AllErrors() []error { return m }

// DeleteServerShareForUser_ResponseValidationError is the validation error
// returned by DeleteServerShareForUser_Response.Validate if the designated
// constraints aren't met.
type DeleteServerShareForUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerShareForUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerShareForUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerShareForUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerShareForUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerShareForUser_ResponseValidationError) ErrorName() string {
	return "DeleteServerShareForUser_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerShareForUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerShareForUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerShareForUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerShareForUser_ResponseValidationError{}

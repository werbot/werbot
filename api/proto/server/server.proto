syntax = "proto3";

package server;

option go_package = "github.com/werbot/werbot/api/proto/server";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service ServerHandlers {
    rpc ListServers(ListServers.Request) returns (ListServers.Response) {}
    rpc Server(Server.Request) returns (Server.Response) {}
    rpc AddServer(AddServer.Request) returns (AddServer.Response) {}
    rpc UpdateServer(UpdateServer.Request) returns (UpdateServer.Response) {}
    rpc DeleteServer(DeleteServer.Request) returns (DeleteServer.Response) {}

    // TODO: replace to UpdateServerStatus
    rpc UpdateServerOnlineStatus(UpdateServerOnlineStatus.Request) returns (UpdateServerOnlineStatus.Response) {}
    rpc UpdateServerActiveStatus(UpdateServerActiveStatus.Request) returns (UpdateServerActiveStatus.Response) {}
    // --------

    rpc ServerAccess(ServerAccess.Request) returns (ServerAccess.Response) {}
    rpc UpdateServerAccess(UpdateServerAccess.Request) returns (UpdateServerAccess.Response) {}

    rpc ServerActivity(ServerActivity.Request) returns (ServerActivity.Response) {}
    rpc UpdateServerActivity(UpdateServerActivity.Request) returns (UpdateServerActivity.Response) {}

    rpc UpdateServerHostKey(UpdateServerHostKey.Request) returns (UpdateServerHostKey.Response) {}

    rpc AddServerSession(AddServerSession.Request) returns (AddServerSession.Response) {}

    rpc ServerNameByID(ServerNameByID.Request) returns (ServerNameByID.Response) {}

    // share server
    rpc ListServersShareForUser(ListServersShareForUser.Request) returns (ListServersShareForUser.Response) {}
    rpc AddServerShareForUser(AddServerShareForUser.Request) returns (AddServerShareForUser.Response) {}
    rpc UpdateServerShareForUser(UpdateServerShareForUser.Request) returns (UpdateServerShareForUser.Response) {}
    rpc DeleteServerShareForUser(DeleteServerShareForUser.Request) returns (DeleteServerShareForUser.Response) {}
}

enum ServerAuth {
    SERVER_UNSPECIFIED = 0;
    PASSWORD = 1;
    KEY = 2;
    AGENT = 3;
}

enum ServerScheme {
    SERVER_SCHEME_UNSPECIFIED = 0;
    TCP = 1;
    UDP = 2;
    SSH = 3;
    TELNET = 4;
    RDP = 5;
}

enum SessionStatus {
    SESSION_STATUS_UNSPECIFIED = 0;
	OPENED = 1;
    CLOSED = 2;
}

enum UserType {
    USER_TYPE_UNSPECIFIED = 0;
    HEALTHCHECK = 1;
	SHELL = 2;
    BASTION = 3;
    INVITE = 4;
}

// -----------------------------------------------------
// use in API in body request
message ActivityRequest {
    string user_id = 1    [(validate.rules).string.uuid = true]; // @gotags: query:"user_id"
    string project_id = 2 [(validate.rules).string.uuid = true]; // @gotags: query:"project_id"
    ServerActivity.Response activity = 3;
}
// -----------------------------------------------------


// rpc ListServers
message ListServers {
    message Request {
        int32 limit = 1;
        int32 offset = 2;
        string sort_by = 3;
        string query = 4;
    }

    message Response{
        int32 total = 1;
        repeated Server.Response servers = 2;
    }
}
// -----------------------------------------------------


// rpc Server
message Server {
    message Request {
        string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
        string server_id = 2  [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"server_id" params:"server_id"
        string project_id = 3 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"project_id" params:"project_id"
    }

    message Response {
        string server_id = 1;
        string project_id = 2;
        string project_login = 3;
        string address = 4;
        int32 port = 5;
        string token = 6;
        string login = 7;
        string password = 8;
        string title = 9;
        bool audit =10;
        bool online = 11;
        string key_public = 12;
        string key_private = 13;
        string key_password = 14;
        string account_id = 15;
        string auth = 16;
        string scheme = 17;
        bytes host_key = 18;
        string private_description = 19;
        string public_description = 20;
        bool active = 21;
        int32 count_members = 22;
    }
}
// -----------------------------------------------------


// rpc AddServer
message AddServer {
    message Request {
        string user_id = 1      [(validate.rules).string = {ignore_empty: true, uuid: true}];
        string project_id = 2   [(validate.rules).string.uuid = true];
        string address = 3      [(validate.rules).string.address = true];
        int32 port = 4          [(validate.rules).int32 = {gte: 1, lt: 65536}];
        string login = 5        [(validate.rules).string = {pattern: '^[a-z0-9]+$', min_len: 3, max_len: 20}];
        string title = 6        [(validate.rules).string = {min_len: 3, max_len: 128}];
        ServerAuth auth = 7     [(validate.rules).enum.defined_only = true];
        ServerScheme scheme = 8 [(validate.rules).enum.defined_only = true];
        bool audit = 9;
        bool active = 10;
        string private_description = 11;
        string public_description = 12;
        string password = 13;
        string public_key = 14;
        string key_uuid = 15;
    }

    message Response {
        string server_id = 1;
        string key_public = 2;
    }
}

// -----------------------------------------------------

// rpc UpdateServer
message UpdateServer {
    message Request {
        string user_id = 1     [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
        string server_id = 2   [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"server_id" params:"server_id"
        string project_id = 3  [(validate.rules).string.uuid=true]; // @gotags: query:"project_id" params:"project_id"
        string address = 4     [(validate.rules).string.address = true]; // @gotags: query:"address" params:"address"
        int32 port = 5         [(validate.rules).int32 = {gte: 1, lt: 65536}]; // @gotags: query:"port" params:"port"
        string login = 6       [(validate.rules).string = {pattern: '^[a-z0-9]+$', min_len: 3, max_len: 20}]; // @gotags: query:"login" params:"login"
        string title = 7       [(validate.rules).string = {min_len: 3, max_len: 128}]; // @gotags: query:"title" params:"title"
        string private_description = 8;
        string public_description = 9;
        bool audit =10;
        bool active = 11;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc DeleteServer
message DeleteServer {
    message Request {
        string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
        string project_id = 2 [(validate.rules).string.uuid = true]; // @gotags: query:"project_id" params:"project_id"
        string server_id = 3  [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"server_id" params:"server_id"
    }

    message Response {}
}
// -----------------------------------------------------


// rpc UpdateServerOnlineStatus
message UpdateServerOnlineStatus {
    message Request {
        string user_id = 1   [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
        string server_id = 2 [(validate.rules).string.uuid = true]; // @gotags: query:"server_id"
        bool status = 3;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc UpdateServerActiveStatus
message UpdateServerActiveStatus {
    message Request {
        string user_id = 1   [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
        string server_id = 2 [(validate.rules).string.uuid = true];; // @gotags: query:"server_id"
        bool status = 3;
    }

    message Response {}
}
// -----------------------------------------------------




// rpc ServerAccess
message ServerAccess {
    message Request {
        string user_id = 1     [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
        string project_id = 2  [(validate.rules).string.uuid = true]; // @gotags: query:"project_id" params:"project_id"
        string server_id = 3   [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"server_id" params:"server_id"
    }

    message Response {
        ServerAuth auth = 1;
        string password = 2;
        string public_key = 3;
        string private_key = 4;
        string password_key = 5;
        string fingeprint_key = 6;
    }
}
// -----------------------------------------------------


// rpc UpdateServerAccess
message UpdateServerAccess {
    message Request {
        string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
        string project_id = 2 [(validate.rules).string.uuid = true]; // @gotags: query:"project_id"
        string server_id = 3  [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"server_id"

        ServerAuth auth = 4;
        string password = 5;
        string public_key = 6;
        string key_uuid = 7;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc ServerActivity
message ServerActivity {
    message Request {
        string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
        string project_id = 2 [(validate.rules).string.uuid = true];// @gotags: query:"project_id"
        string server_id = 3;
    }

    message Response {
        repeated int32 monday = 1;
        repeated int32 tuesday = 2;
        repeated int32 wednesday = 3;
        repeated int32 thursday = 4;
        repeated int32 friday = 5;
        repeated int32 saturday = 6;
        repeated int32 sunday = 7;
    }
}
// -----------------------------------------------------


// rpc UpdateServerActivity
message UpdateServerActivity {
    message Request {
        string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
        string project_id = 2 [(validate.rules).string.uuid = true]; // @gotags: query:"project_id"
        string server_id = 3;
        ServerActivity.Response activity = 4;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc UpdateServerActive
message UpdateServerActive {
    message Request {
        string user_id = 1   [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
        string server_id = 2 [(validate.rules).string.uuid = true]; // @gotags: query:"server_id"
        bool status = 3;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc UpdateServerHostKey
message UpdateServerHostKey {
    message Request {
        string server_id = 1;
        bytes hostkey = 2;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc AddServerSession
message AddServerSession {
    message Request {
        string account_id = 1;
        SessionStatus status = 2;
        google.protobuf.Timestamp created = 3;
        string message = 4;
        string uuid = 5;
    }

    message Response {
        string session_id = 1;
    }
}
// -----------------------------------------------------


// rpc ServerNameByID
message ServerNameByID {
    message Request {
        string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
        string server_id = 2  [(validate.rules).string.uuid = true]; // @gotags: query:"server_id" params:"server_id"
        string project_id = 3 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"project_id" params:"project_id"
    }

    message Response {
        string server_name = 1;
    }
}
// -----------------------------------------------------


// rpc ListServersShareForUser
message ListServersShareForUser {
    message Request {
        int32 limit = 1;
        int32 offset = 2;
        string sort_by = 3;
        string user_id = 4 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
    }

    message Response {
        message SharedServer {
            string user_login = 1;
            string project_login = 2;
            string server_token = 3;
            string server_id = 4;
            bool server_online = 5;
            string server_title = 6;
            string server_description = 7;
        }

        int32 total = 1;
        repeated SharedServer servers = 2;
    }
}
// -----------------------------------------------------


// rpc AddServerShareForUser
message AddServerShareForUser {
    message Request{
        string user_id = 1;
        string project_id = 2;
        string server_id = 3;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc UpdateServerShareForUser
message UpdateServerShareForUser {
    message Request{
        string user_id = 1;
        string project_id = 2;
        string share_id = 3;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc DeleteServerShareForUser
message DeleteServerShareForUser {
    message Request{
        string user_id = 1;
        string project_id = 2;
        string share_id = 3;
    }

    message Response {}
}
// -----------------------------------------------------

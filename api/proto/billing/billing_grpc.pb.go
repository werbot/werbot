// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: billing.proto

package billing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingHandlersClient is the client API for BillingHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingHandlersClient interface {
	UpdateProduct(ctx context.Context, in *UpdateProduct_Request, opts ...grpc.CallOption) (*UpdateProduct_Response, error)
}

type billingHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingHandlersClient(cc grpc.ClientConnInterface) BillingHandlersClient {
	return &billingHandlersClient{cc}
}

func (c *billingHandlersClient) UpdateProduct(ctx context.Context, in *UpdateProduct_Request, opts ...grpc.CallOption) (*UpdateProduct_Response, error) {
	out := new(UpdateProduct_Response)
	err := c.cc.Invoke(ctx, "/billing.BillingHandlers/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingHandlersServer is the server API for BillingHandlers service.
// All implementations must embed UnimplementedBillingHandlersServer
// for forward compatibility
type BillingHandlersServer interface {
	UpdateProduct(context.Context, *UpdateProduct_Request) (*UpdateProduct_Response, error)
	mustEmbedUnimplementedBillingHandlersServer()
}

// UnimplementedBillingHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedBillingHandlersServer struct {
}

func (UnimplementedBillingHandlersServer) UpdateProduct(context.Context, *UpdateProduct_Request) (*UpdateProduct_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedBillingHandlersServer) mustEmbedUnimplementedBillingHandlersServer() {}

// UnsafeBillingHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingHandlersServer will
// result in compilation errors.
type UnsafeBillingHandlersServer interface {
	mustEmbedUnimplementedBillingHandlersServer()
}

func RegisterBillingHandlersServer(s grpc.ServiceRegistrar, srv BillingHandlersServer) {
	s.RegisterService(&BillingHandlers_ServiceDesc, srv)
}

func _BillingHandlers_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProduct_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingHandlersServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingHandlers/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingHandlersServer).UpdateProduct(ctx, req.(*UpdateProduct_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingHandlers_ServiceDesc is the grpc.ServiceDesc for BillingHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingHandlers",
	HandlerType: (*BillingHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProduct",
			Handler:    _BillingHandlers_UpdateProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

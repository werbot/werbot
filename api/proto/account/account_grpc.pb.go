// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountHandlersClient is the client API for AccountHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountHandlersClient interface {
	// Account section
	ListAccounts(ctx context.Context, in *ListAccounts_Request, opts ...grpc.CallOption) (*ListAccounts_Response, error)
	Account(ctx context.Context, in *Account_Request, opts ...grpc.CallOption) (*Account_Response, error)
	AddAccount(ctx context.Context, in *AddAccount_Request, opts ...grpc.CallOption) (*AddAccount_Response, error)
	UpdateAccount(ctx context.Context, in *UpdateAccount_Request, opts ...grpc.CallOption) (*UpdateAccount_Response, error)
	DeleteAccount(ctx context.Context, in *DeleteAccount_Request, opts ...grpc.CallOption) (*DeleteAccount_Response, error)
	AccountIDByName(ctx context.Context, in *AccountIDByName_Request, opts ...grpc.CallOption) (*AccountIDByName_Response, error)
	UpdateStatus(ctx context.Context, in *UpdateStatus_Request, opts ...grpc.CallOption) (*UpdateStatus_Response, error)
	SessionAccount(ctx context.Context, in *SessionAccount_Request, opts ...grpc.CallOption) (*SessionAccount_Response, error)
	FindByTokenAccount(ctx context.Context, in *FindByTokenAccount_Request, opts ...grpc.CallOption) (*FindByTokenAccount_Response, error)
}

type accountHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountHandlersClient(cc grpc.ClientConnInterface) AccountHandlersClient {
	return &accountHandlersClient{cc}
}

func (c *accountHandlersClient) ListAccounts(ctx context.Context, in *ListAccounts_Request, opts ...grpc.CallOption) (*ListAccounts_Response, error) {
	out := new(ListAccounts_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) Account(ctx context.Context, in *Account_Request, opts ...grpc.CallOption) (*Account_Response, error) {
	out := new(Account_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) AddAccount(ctx context.Context, in *AddAccount_Request, opts ...grpc.CallOption) (*AddAccount_Response, error) {
	out := new(AddAccount_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) UpdateAccount(ctx context.Context, in *UpdateAccount_Request, opts ...grpc.CallOption) (*UpdateAccount_Response, error) {
	out := new(UpdateAccount_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) DeleteAccount(ctx context.Context, in *DeleteAccount_Request, opts ...grpc.CallOption) (*DeleteAccount_Response, error) {
	out := new(DeleteAccount_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) AccountIDByName(ctx context.Context, in *AccountIDByName_Request, opts ...grpc.CallOption) (*AccountIDByName_Response, error) {
	out := new(AccountIDByName_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/AccountIDByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) UpdateStatus(ctx context.Context, in *UpdateStatus_Request, opts ...grpc.CallOption) (*UpdateStatus_Response, error) {
	out := new(UpdateStatus_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) SessionAccount(ctx context.Context, in *SessionAccount_Request, opts ...grpc.CallOption) (*SessionAccount_Response, error) {
	out := new(SessionAccount_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/SessionAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHandlersClient) FindByTokenAccount(ctx context.Context, in *FindByTokenAccount_Request, opts ...grpc.CallOption) (*FindByTokenAccount_Response, error) {
	out := new(FindByTokenAccount_Response)
	err := c.cc.Invoke(ctx, "/account.AccountHandlers/FindByTokenAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountHandlersServer is the server API for AccountHandlers service.
// All implementations must embed UnimplementedAccountHandlersServer
// for forward compatibility
type AccountHandlersServer interface {
	// Account section
	ListAccounts(context.Context, *ListAccounts_Request) (*ListAccounts_Response, error)
	Account(context.Context, *Account_Request) (*Account_Response, error)
	AddAccount(context.Context, *AddAccount_Request) (*AddAccount_Response, error)
	UpdateAccount(context.Context, *UpdateAccount_Request) (*UpdateAccount_Response, error)
	DeleteAccount(context.Context, *DeleteAccount_Request) (*DeleteAccount_Response, error)
	AccountIDByName(context.Context, *AccountIDByName_Request) (*AccountIDByName_Response, error)
	UpdateStatus(context.Context, *UpdateStatus_Request) (*UpdateStatus_Response, error)
	SessionAccount(context.Context, *SessionAccount_Request) (*SessionAccount_Response, error)
	FindByTokenAccount(context.Context, *FindByTokenAccount_Request) (*FindByTokenAccount_Response, error)
	mustEmbedUnimplementedAccountHandlersServer()
}

// UnimplementedAccountHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedAccountHandlersServer struct {
}

func (UnimplementedAccountHandlersServer) ListAccounts(context.Context, *ListAccounts_Request) (*ListAccounts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountHandlersServer) Account(context.Context, *Account_Request) (*Account_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (UnimplementedAccountHandlersServer) AddAccount(context.Context, *AddAccount_Request) (*AddAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedAccountHandlersServer) UpdateAccount(context.Context, *UpdateAccount_Request) (*UpdateAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountHandlersServer) DeleteAccount(context.Context, *DeleteAccount_Request) (*DeleteAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountHandlersServer) AccountIDByName(context.Context, *AccountIDByName_Request) (*AccountIDByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountIDByName not implemented")
}
func (UnimplementedAccountHandlersServer) UpdateStatus(context.Context, *UpdateStatus_Request) (*UpdateStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedAccountHandlersServer) SessionAccount(context.Context, *SessionAccount_Request) (*SessionAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionAccount not implemented")
}
func (UnimplementedAccountHandlersServer) FindByTokenAccount(context.Context, *FindByTokenAccount_Request) (*FindByTokenAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTokenAccount not implemented")
}
func (UnimplementedAccountHandlersServer) mustEmbedUnimplementedAccountHandlersServer() {}

// UnsafeAccountHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountHandlersServer will
// result in compilation errors.
type UnsafeAccountHandlersServer interface {
	mustEmbedUnimplementedAccountHandlersServer()
}

func RegisterAccountHandlersServer(s grpc.ServiceRegistrar, srv AccountHandlersServer) {
	s.RegisterService(&AccountHandlers_ServiceDesc, srv)
}

func _AccountHandlers_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccounts_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).ListAccounts(ctx, req.(*ListAccounts_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).Account(ctx, req.(*Account_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).AddAccount(ctx, req.(*AddAccount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).UpdateAccount(ctx, req.(*UpdateAccount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).DeleteAccount(ctx, req.(*DeleteAccount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_AccountIDByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIDByName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).AccountIDByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/AccountIDByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).AccountIDByName(ctx, req.(*AccountIDByName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).UpdateStatus(ctx, req.(*UpdateStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_SessionAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionAccount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).SessionAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/SessionAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).SessionAccount(ctx, req.(*SessionAccount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHandlers_FindByTokenAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByTokenAccount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHandlersServer).FindByTokenAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountHandlers/FindByTokenAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHandlersServer).FindByTokenAccount(ctx, req.(*FindByTokenAccount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountHandlers_ServiceDesc is the grpc.ServiceDesc for AccountHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountHandlers",
	HandlerType: (*AccountHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _AccountHandlers_ListAccounts_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _AccountHandlers_Account_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _AccountHandlers_AddAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountHandlers_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountHandlers_DeleteAccount_Handler,
		},
		{
			MethodName: "AccountIDByName",
			Handler:    _AccountHandlers_AccountIDByName_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _AccountHandlers_UpdateStatus_Handler,
		},
		{
			MethodName: "SessionAccount",
			Handler:    _AccountHandlers_SessionAccount_Handler,
		},
		{
			MethodName: "FindByTokenAccount",
			Handler:    _AccountHandlers_FindByTokenAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

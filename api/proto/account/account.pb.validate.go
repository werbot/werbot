// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _account_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListAccounts with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccounts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccounts with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccountsMultiError, or
// nil if none found.
func (m *ListAccounts) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccounts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAccountsMultiError(errors)
	}

	return nil
}

// ListAccountsMultiError is an error wrapping multiple validation errors
// returned by ListAccounts.ValidateAll() if the designated constraints aren't met.
type ListAccountsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsMultiError) AllErrors() []error { return m }

// ListAccountsValidationError is the validation error returned by
// ListAccounts.Validate if the designated constraints aren't met.
type ListAccountsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsValidationError) ErrorName() string { return "ListAccountsValidationError" }

// Error satisfies the builtin error interface
func (e ListAccountsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccounts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on AccountIDByName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccountIDByName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountIDByName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountIDByNameMultiError, or nil if none found.
func (m *AccountIDByName) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountIDByName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountIDByNameMultiError(errors)
	}

	return nil
}

// AccountIDByNameMultiError is an error wrapping multiple validation errors
// returned by AccountIDByName.ValidateAll() if the designated constraints
// aren't met.
type AccountIDByNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountIDByNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountIDByNameMultiError) AllErrors() []error { return m }

// AccountIDByNameValidationError is the validation error returned by
// AccountIDByName.Validate if the designated constraints aren't met.
type AccountIDByNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIDByNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIDByNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIDByNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIDByNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIDByNameValidationError) ErrorName() string { return "AccountIDByNameValidationError" }

// Error satisfies the builtin error interface
func (e AccountIDByNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountIDByName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIDByNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIDByNameValidationError{}

// Validate checks the field values on UpdateAccountStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountStatusMultiError, or nil if none found.
func (m *UpdateAccountStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccountStatusMultiError(errors)
	}

	return nil
}

// UpdateAccountStatusMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountStatus.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountStatusMultiError) AllErrors() []error { return m }

// UpdateAccountStatusValidationError is the validation error returned by
// UpdateAccountStatus.Validate if the designated constraints aren't met.
type UpdateAccountStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountStatusValidationError) ErrorName() string {
	return "UpdateAccountStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountStatusValidationError{}

// Validate checks the field values on SessionAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SessionAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SessionAccountMultiError,
// or nil if none found.
func (m *SessionAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SessionAccountMultiError(errors)
	}

	return nil
}

// SessionAccountMultiError is an error wrapping multiple validation errors
// returned by SessionAccount.ValidateAll() if the designated constraints
// aren't met.
type SessionAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionAccountMultiError) AllErrors() []error { return m }

// SessionAccountValidationError is the validation error returned by
// SessionAccount.Validate if the designated constraints aren't met.
type SessionAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionAccountValidationError) ErrorName() string { return "SessionAccountValidationError" }

// Error satisfies the builtin error interface
func (e SessionAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionAccountValidationError{}

// Validate checks the field values on FindByTokenAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByTokenAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByTokenAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByTokenAccountMultiError, or nil if none found.
func (m *FindByTokenAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTokenAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindByTokenAccountMultiError(errors)
	}

	return nil
}

// FindByTokenAccountMultiError is an error wrapping multiple validation errors
// returned by FindByTokenAccount.ValidateAll() if the designated constraints
// aren't met.
type FindByTokenAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTokenAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTokenAccountMultiError) AllErrors() []error { return m }

// FindByTokenAccountValidationError is the validation error returned by
// FindByTokenAccount.Validate if the designated constraints aren't met.
type FindByTokenAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTokenAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTokenAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTokenAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTokenAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTokenAccountValidationError) ErrorName() string {
	return "FindByTokenAccountValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTokenAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTokenAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTokenAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTokenAccountValidationError{}

// Validate checks the field values on ListAccounts_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccounts_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccounts_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccounts_RequestMultiError, or nil if none found.
func (m *ListAccounts_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccounts_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListAccounts_RequestMultiError(errors)
	}

	return nil
}

// ListAccounts_RequestMultiError is an error wrapping multiple validation
// errors returned by ListAccounts_Request.ValidateAll() if the designated
// constraints aren't met.
type ListAccounts_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccounts_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccounts_RequestMultiError) AllErrors() []error { return m }

// ListAccounts_RequestValidationError is the validation error returned by
// ListAccounts_Request.Validate if the designated constraints aren't met.
type ListAccounts_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccounts_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccounts_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccounts_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccounts_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccounts_RequestValidationError) ErrorName() string {
	return "ListAccounts_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccounts_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccounts_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccounts_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccounts_RequestValidationError{}

// Validate checks the field values on ListAccounts_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccounts_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccounts_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccounts_ResponseMultiError, or nil if none found.
func (m *ListAccounts_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccounts_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccounts_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccounts_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccounts_ResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccounts_ResponseMultiError(errors)
	}

	return nil
}

// ListAccounts_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListAccounts_Response.ValidateAll() if the designated
// constraints aren't met.
type ListAccounts_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccounts_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccounts_ResponseMultiError) AllErrors() []error { return m }

// ListAccounts_ResponseValidationError is the validation error returned by
// ListAccounts_Response.Validate if the designated constraints aren't met.
type ListAccounts_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccounts_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccounts_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccounts_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccounts_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccounts_ResponseValidationError) ErrorName() string {
	return "ListAccounts_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccounts_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccounts_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccounts_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccounts_ResponseValidationError{}

// Validate checks the field values on Account_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Account_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Account_RequestMultiError, or nil if none found.
func (m *Account_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Account_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = Account_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Account_RequestMultiError(errors)
	}

	return nil
}

func (m *Account_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Account_RequestMultiError is an error wrapping multiple validation errors
// returned by Account_Request.ValidateAll() if the designated constraints
// aren't met.
type Account_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Account_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Account_RequestMultiError) AllErrors() []error { return m }

// Account_RequestValidationError is the validation error returned by
// Account_Request.Validate if the designated constraints aren't met.
type Account_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Account_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Account_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Account_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Account_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Account_RequestValidationError) ErrorName() string { return "Account_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Account_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Account_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Account_RequestValidationError{}

// Validate checks the field values on Account_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Account_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Account_ResponseMultiError, or nil if none found.
func (m *Account_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Account_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Online

	// no validation rules for Active

	// no validation rules for UserFio

	if all {
		switch v := interface{}(m.GetLastActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Account_ResponseValidationError{
					field:  "LastActivity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Account_ResponseValidationError{
					field:  "LastActivity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Account_ResponseValidationError{
				field:  "LastActivity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnectionLogin

	if len(errors) > 0 {
		return Account_ResponseMultiError(errors)
	}

	return nil
}

// Account_ResponseMultiError is an error wrapping multiple validation errors
// returned by Account_Response.ValidateAll() if the designated constraints
// aren't met.
type Account_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Account_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Account_ResponseMultiError) AllErrors() []error { return m }

// Account_ResponseValidationError is the validation error returned by
// Account_Response.Validate if the designated constraints aren't met.
type Account_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Account_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Account_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Account_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Account_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Account_ResponseValidationError) ErrorName() string { return "Account_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Account_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Account_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Account_ResponseValidationError{}

// Validate checks the field values on AccountIDByName_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountIDByName_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountIDByName_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountIDByName_RequestMultiError, or nil if none found.
func (m *AccountIDByName_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountIDByName_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Fingerprint

	if ip := net.ParseIP(m.GetClientIp()); ip == nil {
		err := AccountIDByName_RequestValidationError{
			field:  "ClientIp",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccountIDByName_RequestMultiError(errors)
	}

	return nil
}

// AccountIDByName_RequestMultiError is an error wrapping multiple validation
// errors returned by AccountIDByName_Request.ValidateAll() if the designated
// constraints aren't met.
type AccountIDByName_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountIDByName_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountIDByName_RequestMultiError) AllErrors() []error { return m }

// AccountIDByName_RequestValidationError is the validation error returned by
// AccountIDByName_Request.Validate if the designated constraints aren't met.
type AccountIDByName_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIDByName_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIDByName_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIDByName_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIDByName_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIDByName_RequestValidationError) ErrorName() string {
	return "AccountIDByName_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountIDByName_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountIDByName_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIDByName_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIDByName_RequestValidationError{}

// Validate checks the field values on AccountIDByName_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountIDByName_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountIDByName_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountIDByName_ResponseMultiError, or nil if none found.
func (m *AccountIDByName_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountIDByName_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return AccountIDByName_ResponseMultiError(errors)
	}

	return nil
}

// AccountIDByName_ResponseMultiError is an error wrapping multiple validation
// errors returned by AccountIDByName_Response.ValidateAll() if the designated
// constraints aren't met.
type AccountIDByName_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountIDByName_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountIDByName_ResponseMultiError) AllErrors() []error { return m }

// AccountIDByName_ResponseValidationError is the validation error returned by
// AccountIDByName_Response.Validate if the designated constraints aren't met.
type AccountIDByName_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIDByName_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIDByName_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIDByName_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIDByName_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIDByName_ResponseValidationError) ErrorName() string {
	return "AccountIDByName_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountIDByName_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountIDByName_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIDByName_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIDByName_ResponseValidationError{}

// Validate checks the field values on UpdateAccountStatus_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountStatus_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountStatus_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountStatus_RequestMultiError, or nil if none found.
func (m *UpdateAccountStatus_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountStatus_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = UpdateAccountStatus_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateAccountStatus_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateAccountStatus_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateAccountStatus_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountStatus_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccountStatus_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountStatus_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountStatus_RequestMultiError) AllErrors() []error { return m }

// UpdateAccountStatus_RequestValidationError is the validation error returned
// by UpdateAccountStatus_Request.Validate if the designated constraints
// aren't met.
type UpdateAccountStatus_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountStatus_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountStatus_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountStatus_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountStatus_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountStatus_RequestValidationError) ErrorName() string {
	return "UpdateAccountStatus_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountStatus_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountStatus_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountStatus_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountStatus_RequestValidationError{}

// Validate checks the field values on UpdateAccountStatus_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountStatus_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountStatus_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountStatus_ResponseMultiError, or nil if none found.
func (m *UpdateAccountStatus_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountStatus_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAccountStatus_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAccountStatus_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAccountStatus_ResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAccountStatus_ResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountStatus_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountStatus_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccountStatus_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountStatus_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountStatus_ResponseMultiError) AllErrors() []error { return m }

// UpdateAccountStatus_ResponseValidationError is the validation error returned
// by UpdateAccountStatus_Response.Validate if the designated constraints
// aren't met.
type UpdateAccountStatus_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountStatus_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountStatus_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountStatus_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountStatus_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountStatus_ResponseValidationError) ErrorName() string {
	return "UpdateAccountStatus_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountStatus_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountStatus_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountStatus_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountStatus_ResponseValidationError{}

// Validate checks the field values on SessionAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionAccount_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionAccount_RequestMultiError, or nil if none found.
func (m *SessionAccount_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionAccount_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return SessionAccount_RequestMultiError(errors)
	}

	return nil
}

// SessionAccount_RequestMultiError is an error wrapping multiple validation
// errors returned by SessionAccount_Request.ValidateAll() if the designated
// constraints aren't met.
type SessionAccount_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionAccount_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionAccount_RequestMultiError) AllErrors() []error { return m }

// SessionAccount_RequestValidationError is the validation error returned by
// SessionAccount_Request.Validate if the designated constraints aren't met.
type SessionAccount_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionAccount_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionAccount_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionAccount_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionAccount_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionAccount_RequestValidationError) ErrorName() string {
	return "SessionAccount_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SessionAccount_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionAccount_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionAccount_RequestValidationError{}

// Validate checks the field values on SessionAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionAccount_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionAccount_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionAccount_ResponseMultiError, or nil if none found.
func (m *SessionAccount_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionAccount_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionAccount_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionAccount_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionAccount_ResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SessionAccount_ResponseMultiError(errors)
	}

	return nil
}

// SessionAccount_ResponseMultiError is an error wrapping multiple validation
// errors returned by SessionAccount_Response.ValidateAll() if the designated
// constraints aren't met.
type SessionAccount_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionAccount_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionAccount_ResponseMultiError) AllErrors() []error { return m }

// SessionAccount_ResponseValidationError is the validation error returned by
// SessionAccount_Response.Validate if the designated constraints aren't met.
type SessionAccount_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionAccount_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionAccount_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionAccount_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionAccount_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionAccount_ResponseValidationError) ErrorName() string {
	return "SessionAccount_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SessionAccount_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionAccount_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionAccount_ResponseValidationError{}

// Validate checks the field values on FindByTokenAccount_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByTokenAccount_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByTokenAccount_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByTokenAccount_RequestMultiError, or nil if none found.
func (m *FindByTokenAccount_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTokenAccount_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return FindByTokenAccount_RequestMultiError(errors)
	}

	return nil
}

// FindByTokenAccount_RequestMultiError is an error wrapping multiple
// validation errors returned by FindByTokenAccount_Request.ValidateAll() if
// the designated constraints aren't met.
type FindByTokenAccount_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTokenAccount_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTokenAccount_RequestMultiError) AllErrors() []error { return m }

// FindByTokenAccount_RequestValidationError is the validation error returned
// by FindByTokenAccount_Request.Validate if the designated constraints aren't met.
type FindByTokenAccount_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTokenAccount_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTokenAccount_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTokenAccount_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTokenAccount_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTokenAccount_RequestValidationError) ErrorName() string {
	return "FindByTokenAccount_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTokenAccount_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTokenAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTokenAccount_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTokenAccount_RequestValidationError{}

// Validate checks the field values on FindByTokenAccount_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByTokenAccount_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByTokenAccount_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByTokenAccount_ResponseMultiError, or nil if none found.
func (m *FindByTokenAccount_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTokenAccount_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindByTokenAccount_ResponseMultiError(errors)
	}

	return nil
}

// FindByTokenAccount_ResponseMultiError is an error wrapping multiple
// validation errors returned by FindByTokenAccount_Response.ValidateAll() if
// the designated constraints aren't met.
type FindByTokenAccount_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTokenAccount_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTokenAccount_ResponseMultiError) AllErrors() []error { return m }

// FindByTokenAccount_ResponseValidationError is the validation error returned
// by FindByTokenAccount_Response.Validate if the designated constraints
// aren't met.
type FindByTokenAccount_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTokenAccount_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTokenAccount_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTokenAccount_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTokenAccount_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTokenAccount_ResponseValidationError) ErrorName() string {
	return "FindByTokenAccount_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTokenAccount_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTokenAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTokenAccount_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTokenAccount_ResponseValidationError{}

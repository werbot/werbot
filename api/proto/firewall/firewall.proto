syntax = "proto3";

package firewall;

option go_package = "github.com/werbot/werbot/api/proto/firewall";

import "validate/validate.proto";

service FirewallHandlers {
  rpc IPAccess(IPAccess.Request) returns (IPAccess.Response) {}

  // Server firewall section
  rpc ServerFirewall(ServerFirewall.Request) returns (ServerFirewall.Response) {}
  rpc AddServerFirewall(AddServerFirewall.Request) returns (AddServerFirewall.Response) {}
  rpc UpdateServerFirewall(UpdateServerFirewall.Request) returns (UpdateServerFirewall.Response) {}
  rpc DeleteServerFirewall(DeleteServerFirewall.Request) returns (DeleteServerFirewall.Response) {}

  // Server access section
  rpc ServerAccess(ServerAccess.Request) returns (ServerAccess.Response) {}
  rpc ServerAccessUser(ServerAccessUser.Request) returns (ServerAccessUser.Response) {}
  rpc ServerAccessTime(ServerAccessTime.Request) returns (ServerAccessTime.Response) {}
  rpc ServerAccessIP(ServerAccessIP.Request) returns (ServerAccessIP.Response) {}
  rpc ServerAccessCountry(ServerAccessCountry.Request) returns (ServerAccessCountry.Response) {}
}

enum Rules {
  unspecified = 0;
  country = 1;
  ip = 2;
}

// -----------------------------------------------------
// global messages
message Country {
  string id = 1;
  string server_id = 2;
  string country_name = 3;
  string country_code = 4;
}

message Network {
  string id = 1;
  string server_id = 2;
  string start_ip = 3;
  string end_ip = 4;
}

message AccessList{
  string server_id = 1;
  bool country = 2;
  bool network= 3;
}

message IpMask{
  string start_ip = 1;
  string end_ip = 2;
}

// end global messages
// -----------------------------------------------------


// rpc ServerFirewall
message ServerFirewall {
  message Request {
    string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
    string project_id = 2 [(validate.rules).string.uuid = true];                        // @gotags: query:"project_id"
    string server_id = 3  [(validate.rules).string.uuid = true];                        // @gotags: query:"server_id"
}

  message Response {
    message Countries {
      bool wite_list = 1;
      repeated Country list = 2;
    }

    message Networks {
      bool wite_list = 1;
      repeated Network list = 2;
    }

    Countries country = 1;
    Networks network = 2;
  }
}
// -----------------------------------------------------


// rpc AddServerFirewall
message AddServerFirewall{
  message Request {
    string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}];
    string project_id = 2 [(validate.rules).string.uuid = true];
    string server_id = 3  [(validate.rules).string.uuid = true];
    oneof record {
      IpMask ip = 4;
      string country_code = 5 [(validate.rules).string.len = 2];
    }
  }

  message Response {
    string id = 1;
  }
}
// -----------------------------------------------------


// rpc UpdateServerFirewall
message UpdateServerFirewall {
  message Request {
    string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}];
    string project_id = 2 [(validate.rules).string.uuid = true];
    string server_id = 3  [(validate.rules).string.uuid = true];
    Rules rule = 4;
    bool status = 5;
  }

  message Response {}
}
// -----------------------------------------------------


// rpc DeleteServerFirewall
message DeleteServerFirewall{
  message Request {
    string user_id = 1    [(validate.rules).string = {ignore_empty: true, uuid: true}];
    string project_id = 2 [(validate.rules).string.uuid = true];
    string server_id = 3  [(validate.rules).string.uuid = true];
    Rules rule = 4;
    string record_id = 5  [(validate.rules).string.uuid = true];
  }

  message Response {}
}
// -----------------------------------------------------


// rpc IPAccess
message IPAccess {
  message Request {
    string client_ip = 1 [(validate.rules).string.ip = true];
  }
  message Response {}
}
// -----------------------------------------------------


// rpc ServerAccess
message ServerAccess {
  message Request {
    string user_id = 1      [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id"
    string server_id = 2    [(validate.rules).string.uuid = true];                        // @gotags: query:"server_id"
    string member_ip = 3    [(validate.rules).string.ip = true];                          // @gotags: query:"member_ip"
  }
  message Response {}
}
// -----------------------------------------------------


// rpc ServerAccessUser
message ServerAccessUser {
  message Request {
    string user_id = 1   [(validate.rules).string = {ignore_empty: true, uuid: true}];
    string server_id = 2 [(validate.rules).string.uuid = true];
  }
  message Response {}
}
// -----------------------------------------------------


// rpc ServerAccessTime
message ServerAccessTime {
  message Request {
    string server_id = 1 [(validate.rules).string.uuid = true];
  }
  message Response {}
}
// -----------------------------------------------------


// rpc ServerAccessIP
message ServerAccessIP {
  message Request {
    string server_id = 1 [(validate.rules).string.uuid = true];
    string member_ip = 2 [(validate.rules).string.ip = true];
  }
  message Response {}
}
// -----------------------------------------------------


// rpc ServerAccessCountry
message ServerAccessCountry {
  message Request {
    string server_id = 1 [(validate.rules).string.uuid = true];
    string member_ip = 2 [(validate.rules).string.ip = true];
  }
  message Response {}
}
// -----------------------------------------------------

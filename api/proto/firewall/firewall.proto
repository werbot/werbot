syntax = "proto3";

package firewall;

option go_package = "github.com/werbot/werbot/api/proto/firewall";

service FirewallHandlers {
    rpc ServerFirewall(ServerFirewall.Request) returns (ServerFirewall.Response) {}
    rpc CreateServerFirewall(CreateServerFirewall.Request) returns (CreateServerFirewall.Response) {}
    rpc DeleteServerFirewall(DeleteServerFirewall.Request) returns (DeleteServerFirewall.Response) {}

    rpc UpdateAccessPolicy(UpdateAccessPolicy.Request) returns (UpdateAccessPolicy.Response) {}
    
    rpc CheckIPAccess(CheckIPAccess.Request) returns (CheckIPAccess.Response) {}
    rpc CheckServerAccess(CheckServerAccess.Request) returns (CheckServerAccess.Response) {}
}

enum Rules {
    unspecified = 0;
    country = 1;
    ip = 2;
}

// -----------------------------------------------------
// global messages
message Country {
    string id = 1;
    string server_id = 2;
    string country_name = 3;
    string country_code = 4;
}

message Network {
    string id = 1;
    string server_id = 2;
    string start_ip = 3;
    string end_ip = 4;
}

message AccessList{
    string server_id = 1;
    bool country = 2;
    bool network= 3;
}

message IpMask{
    string start_ip = 1;
    string end_ip = 2;
}

message CountryCode{
    string code = 1;
}
// end global messages
// -----------------------------------------------------


// rpc ServerFirewall
message ServerFirewall {
    message Request {
        string user_id = 1;    // @gotags: validate:"uuid" query:"user_id"
        string project_id = 2; // @gotags: validate:"required,uuid" query:"project_id"
        string server_id = 3;  // @gotags: validate:"uuid"
    }

    message Response {
        message Countries {
            bool wite_list = 1;
            repeated Country list = 2;
        }

        message Networks {
            bool wite_list = 1;
            repeated Network list = 2;        
        }

        Countries country = 1;
        Networks network = 2;
    }
}
// -----------------------------------------------------


// rpc CreateServerFirewall
message CreateServerFirewall{
    message Request {
        string user_id = 1;    // @gotags: validate:"uuid"
        string project_id = 2; // @gotags: validate:"required,uuid"
        string server_id = 3;  // @gotags: validate:"uuid"

        oneof record {
            IpMask ip = 4;
            CountryCode country = 5;
        }
    }

    message Response {
        string id = 1;
    }
}
// -----------------------------------------------------


// rpc DeleteServerFirewall
message DeleteServerFirewall{
    message Request {
        string user_id = 1;    // @gotags: validate:"uuid"
        string project_id = 2; // @gotags: validate:"required,uuid"
        string server_id = 3;  // @gotags: validate:"uuid"
        Rules rule = 4;
        string record_id = 5;  // @gotags: validate:"uuid"
    }

    message Response {}
}
// -----------------------------------------------------


// rpc UpdateAccessPolicy
message UpdateAccessPolicy {
    message Request {
        string user_id = 1;    // @gotags: validate:"uuid"
        string project_id = 2; // @gotags: validate:"required,uuid"
        string server_id = 3;  // @gotags: validate:"uuid"
        Rules rule = 4;
        bool status = 5;
    }

    message Response {}
}
// -----------------------------------------------------


// rpc CheckIPAccess
message CheckIPAccess {
    message Request {
        string client_ip = 1;
    }
    message Response {
        bool access = 1;
        string country = 2;
    }
}
// -----------------------------------------------------


// rpc CheckServerAccess
message CheckServerAccess {
    message Request {
        string client_ip = 1;
        string country = 2;
        string account_id = 3;
        string user_id = 4;
    }
    message Response {
        bool access = 1;
    }
}
// -----------------------------------------------------
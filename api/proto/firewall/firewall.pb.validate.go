// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: firewall.proto

package firewall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _firewall_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Country with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Country with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CountryMultiError, or nil if none found.
func (m *Country) ValidateAll() error {
	return m.validate(true)
}

func (m *Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for CountryName

	// no validation rules for CountryCode

	if len(errors) > 0 {
		return CountryMultiError(errors)
	}

	return nil
}

// CountryMultiError is an error wrapping multiple validation errors returned
// by Country.ValidateAll() if the designated constraints aren't met.
type CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryMultiError) AllErrors() []error { return m }

// CountryValidationError is the validation error returned by Country.Validate
// if the designated constraints aren't met.
type CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryValidationError) ErrorName() string { return "CountryValidationError" }

// Error satisfies the builtin error interface
func (e CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryValidationError{}

// Validate checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Network) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NetworkMultiError, or nil if none found.
func (m *Network) ValidateAll() error {
	return m.validate(true)
}

func (m *Network) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for StartIp

	// no validation rules for EndIp

	if len(errors) > 0 {
		return NetworkMultiError(errors)
	}

	return nil
}

// NetworkMultiError is an error wrapping multiple validation errors returned
// by Network.ValidateAll() if the designated constraints aren't met.
type NetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkMultiError) AllErrors() []error { return m }

// NetworkValidationError is the validation error returned by Network.Validate
// if the designated constraints aren't met.
type NetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkValidationError) ErrorName() string { return "NetworkValidationError" }

// Error satisfies the builtin error interface
func (e NetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkValidationError{}

// Validate checks the field values on AccessList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessListMultiError, or
// nil if none found.
func (m *AccessList) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for Country

	// no validation rules for Network

	if len(errors) > 0 {
		return AccessListMultiError(errors)
	}

	return nil
}

// AccessListMultiError is an error wrapping multiple validation errors
// returned by AccessList.ValidateAll() if the designated constraints aren't met.
type AccessListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessListMultiError) AllErrors() []error { return m }

// AccessListValidationError is the validation error returned by
// AccessList.Validate if the designated constraints aren't met.
type AccessListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessListValidationError) ErrorName() string { return "AccessListValidationError" }

// Error satisfies the builtin error interface
func (e AccessListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessListValidationError{}

// Validate checks the field values on IpMask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IpMask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IpMask with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IpMaskMultiError, or nil if none found.
func (m *IpMask) ValidateAll() error {
	return m.validate(true)
}

func (m *IpMask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartIp

	// no validation rules for EndIp

	if len(errors) > 0 {
		return IpMaskMultiError(errors)
	}

	return nil
}

// IpMaskMultiError is an error wrapping multiple validation errors returned by
// IpMask.ValidateAll() if the designated constraints aren't met.
type IpMaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IpMaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IpMaskMultiError) AllErrors() []error { return m }

// IpMaskValidationError is the validation error returned by IpMask.Validate if
// the designated constraints aren't met.
type IpMaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IpMaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IpMaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IpMaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IpMaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IpMaskValidationError) ErrorName() string { return "IpMaskValidationError" }

// Error satisfies the builtin error interface
func (e IpMaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIpMask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IpMaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IpMaskValidationError{}

// Validate checks the field values on ServerFirewall with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerFirewall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerFirewallMultiError,
// or nil if none found.
func (m *ServerFirewall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerFirewallMultiError(errors)
	}

	return nil
}

// ServerFirewallMultiError is an error wrapping multiple validation errors
// returned by ServerFirewall.ValidateAll() if the designated constraints
// aren't met.
type ServerFirewallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewallMultiError) AllErrors() []error { return m }

// ServerFirewallValidationError is the validation error returned by
// ServerFirewall.Validate if the designated constraints aren't met.
type ServerFirewallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewallValidationError) ErrorName() string { return "ServerFirewallValidationError" }

// Error satisfies the builtin error interface
func (e ServerFirewallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewallValidationError{}

// Validate checks the field values on AddServerFirewall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServerFirewall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerFirewallMultiError, or nil if none found.
func (m *AddServerFirewall) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerFirewall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerFirewallMultiError(errors)
	}

	return nil
}

// AddServerFirewallMultiError is an error wrapping multiple validation errors
// returned by AddServerFirewall.ValidateAll() if the designated constraints
// aren't met.
type AddServerFirewallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerFirewallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerFirewallMultiError) AllErrors() []error { return m }

// AddServerFirewallValidationError is the validation error returned by
// AddServerFirewall.Validate if the designated constraints aren't met.
type AddServerFirewallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerFirewallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerFirewallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerFirewallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerFirewallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerFirewallValidationError) ErrorName() string {
	return "AddServerFirewallValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerFirewallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerFirewall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerFirewallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerFirewallValidationError{}

// Validate checks the field values on UpdateServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerFirewall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerFirewallMultiError, or nil if none found.
func (m *UpdateServerFirewall) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerFirewall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerFirewallMultiError(errors)
	}

	return nil
}

// UpdateServerFirewallMultiError is an error wrapping multiple validation
// errors returned by UpdateServerFirewall.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerFirewallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerFirewallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerFirewallMultiError) AllErrors() []error { return m }

// UpdateServerFirewallValidationError is the validation error returned by
// UpdateServerFirewall.Validate if the designated constraints aren't met.
type UpdateServerFirewallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerFirewallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerFirewallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerFirewallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerFirewallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerFirewallValidationError) ErrorName() string {
	return "UpdateServerFirewallValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerFirewallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerFirewall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerFirewallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerFirewallValidationError{}

// Validate checks the field values on DeleteServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerFirewall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerFirewallMultiError, or nil if none found.
func (m *DeleteServerFirewall) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerFirewall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerFirewallMultiError(errors)
	}

	return nil
}

// DeleteServerFirewallMultiError is an error wrapping multiple validation
// errors returned by DeleteServerFirewall.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerFirewallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerFirewallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerFirewallMultiError) AllErrors() []error { return m }

// DeleteServerFirewallValidationError is the validation error returned by
// DeleteServerFirewall.Validate if the designated constraints aren't met.
type DeleteServerFirewallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerFirewallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerFirewallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerFirewallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerFirewallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerFirewallValidationError) ErrorName() string {
	return "DeleteServerFirewallValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerFirewallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerFirewall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerFirewallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerFirewallValidationError{}

// Validate checks the field values on IPAccess with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IPAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IPAccessMultiError, or nil
// if none found.
func (m *IPAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *IPAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IPAccessMultiError(errors)
	}

	return nil
}

// IPAccessMultiError is an error wrapping multiple validation errors returned
// by IPAccess.ValidateAll() if the designated constraints aren't met.
type IPAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPAccessMultiError) AllErrors() []error { return m }

// IPAccessValidationError is the validation error returned by
// IPAccess.Validate if the designated constraints aren't met.
type IPAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPAccessValidationError) ErrorName() string { return "IPAccessValidationError" }

// Error satisfies the builtin error interface
func (e IPAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPAccessValidationError{}

// Validate checks the field values on ServerAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerAccessMultiError, or
// nil if none found.
func (m *ServerAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessMultiError(errors)
	}

	return nil
}

// ServerAccessMultiError is an error wrapping multiple validation errors
// returned by ServerAccess.ValidateAll() if the designated constraints aren't met.
type ServerAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessMultiError) AllErrors() []error { return m }

// ServerAccessValidationError is the validation error returned by
// ServerAccess.Validate if the designated constraints aren't met.
type ServerAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessValidationError) ErrorName() string { return "ServerAccessValidationError" }

// Error satisfies the builtin error interface
func (e ServerAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessValidationError{}

// Validate checks the field values on ServerAccessUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessUserMultiError, or nil if none found.
func (m *ServerAccessUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessUserMultiError(errors)
	}

	return nil
}

// ServerAccessUserMultiError is an error wrapping multiple validation errors
// returned by ServerAccessUser.ValidateAll() if the designated constraints
// aren't met.
type ServerAccessUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessUserMultiError) AllErrors() []error { return m }

// ServerAccessUserValidationError is the validation error returned by
// ServerAccessUser.Validate if the designated constraints aren't met.
type ServerAccessUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessUserValidationError) ErrorName() string { return "ServerAccessUserValidationError" }

// Error satisfies the builtin error interface
func (e ServerAccessUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessUserValidationError{}

// Validate checks the field values on ServerAccessTime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessTime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessTimeMultiError, or nil if none found.
func (m *ServerAccessTime) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessTimeMultiError(errors)
	}

	return nil
}

// ServerAccessTimeMultiError is an error wrapping multiple validation errors
// returned by ServerAccessTime.ValidateAll() if the designated constraints
// aren't met.
type ServerAccessTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessTimeMultiError) AllErrors() []error { return m }

// ServerAccessTimeValidationError is the validation error returned by
// ServerAccessTime.Validate if the designated constraints aren't met.
type ServerAccessTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessTimeValidationError) ErrorName() string { return "ServerAccessTimeValidationError" }

// Error satisfies the builtin error interface
func (e ServerAccessTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessTimeValidationError{}

// Validate checks the field values on ServerAccessIP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerAccessIP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessIP with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerAccessIPMultiError,
// or nil if none found.
func (m *ServerAccessIP) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessIP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessIPMultiError(errors)
	}

	return nil
}

// ServerAccessIPMultiError is an error wrapping multiple validation errors
// returned by ServerAccessIP.ValidateAll() if the designated constraints
// aren't met.
type ServerAccessIPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessIPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessIPMultiError) AllErrors() []error { return m }

// ServerAccessIPValidationError is the validation error returned by
// ServerAccessIP.Validate if the designated constraints aren't met.
type ServerAccessIPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessIPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessIPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessIPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessIPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessIPValidationError) ErrorName() string { return "ServerAccessIPValidationError" }

// Error satisfies the builtin error interface
func (e ServerAccessIPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessIP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessIPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessIPValidationError{}

// Validate checks the field values on ServerAccessCountry with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessCountry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessCountry with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessCountryMultiError, or nil if none found.
func (m *ServerAccessCountry) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessCountry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessCountryMultiError(errors)
	}

	return nil
}

// ServerAccessCountryMultiError is an error wrapping multiple validation
// errors returned by ServerAccessCountry.ValidateAll() if the designated
// constraints aren't met.
type ServerAccessCountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessCountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessCountryMultiError) AllErrors() []error { return m }

// ServerAccessCountryValidationError is the validation error returned by
// ServerAccessCountry.Validate if the designated constraints aren't met.
type ServerAccessCountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessCountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessCountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessCountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessCountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessCountryValidationError) ErrorName() string {
	return "ServerAccessCountryValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessCountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessCountry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessCountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessCountryValidationError{}

// Validate checks the field values on ServerFirewall_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerFirewall_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerFirewall_RequestMultiError, or nil if none found.
func (m *ServerFirewall_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerFirewall_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerFirewall_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerFirewall_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerFirewall_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerFirewall_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerFirewall_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerFirewall_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_RequestMultiError) AllErrors() []error { return m }

// ServerFirewall_RequestValidationError is the validation error returned by
// ServerFirewall_Request.Validate if the designated constraints aren't met.
type ServerFirewall_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_RequestValidationError) ErrorName() string {
	return "ServerFirewall_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_RequestValidationError{}

// Validate checks the field values on ServerFirewall_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerFirewall_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerFirewall_ResponseMultiError, or nil if none found.
func (m *ServerFirewall_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerFirewall_ResponseValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNetwork()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetwork()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerFirewall_ResponseValidationError{
				field:  "Network",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerFirewall_ResponseMultiError(errors)
	}

	return nil
}

// ServerFirewall_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerFirewall_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_ResponseMultiError) AllErrors() []error { return m }

// ServerFirewall_ResponseValidationError is the validation error returned by
// ServerFirewall_Response.Validate if the designated constraints aren't met.
type ServerFirewall_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_ResponseValidationError) ErrorName() string {
	return "ServerFirewall_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_ResponseValidationError{}

// Validate checks the field values on ServerFirewall_Response_Countries with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerFirewall_Response_Countries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Response_Countries
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerFirewall_Response_CountriesMultiError, or nil if none found.
func (m *ServerFirewall_Response_Countries) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Response_Countries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WiteList

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerFirewall_Response_CountriesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerFirewall_Response_CountriesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerFirewall_Response_CountriesValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServerFirewall_Response_CountriesMultiError(errors)
	}

	return nil
}

// ServerFirewall_Response_CountriesMultiError is an error wrapping multiple
// validation errors returned by
// ServerFirewall_Response_Countries.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_Response_CountriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_Response_CountriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_Response_CountriesMultiError) AllErrors() []error { return m }

// ServerFirewall_Response_CountriesValidationError is the validation error
// returned by ServerFirewall_Response_Countries.Validate if the designated
// constraints aren't met.
type ServerFirewall_Response_CountriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_Response_CountriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_Response_CountriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_Response_CountriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_Response_CountriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_Response_CountriesValidationError) ErrorName() string {
	return "ServerFirewall_Response_CountriesValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_Response_CountriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Response_Countries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_Response_CountriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_Response_CountriesValidationError{}

// Validate checks the field values on ServerFirewall_Response_Networks with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerFirewall_Response_Networks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Response_Networks with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ServerFirewall_Response_NetworksMultiError, or nil if none found.
func (m *ServerFirewall_Response_Networks) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Response_Networks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WiteList

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerFirewall_Response_NetworksValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerFirewall_Response_NetworksValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerFirewall_Response_NetworksValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServerFirewall_Response_NetworksMultiError(errors)
	}

	return nil
}

// ServerFirewall_Response_NetworksMultiError is an error wrapping multiple
// validation errors returned by
// ServerFirewall_Response_Networks.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_Response_NetworksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_Response_NetworksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_Response_NetworksMultiError) AllErrors() []error { return m }

// ServerFirewall_Response_NetworksValidationError is the validation error
// returned by ServerFirewall_Response_Networks.Validate if the designated
// constraints aren't met.
type ServerFirewall_Response_NetworksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_Response_NetworksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_Response_NetworksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_Response_NetworksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_Response_NetworksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_Response_NetworksValidationError) ErrorName() string {
	return "ServerFirewall_Response_NetworksValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_Response_NetworksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Response_Networks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_Response_NetworksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_Response_NetworksValidationError{}

// Validate checks the field values on AddServerFirewall_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerFirewall_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerFirewall_RequestMultiError, or nil if none found.
func (m *AddServerFirewall_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerFirewall_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = AddServerFirewall_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddServerFirewall_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = AddServerFirewall_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Record.(type) {
	case *AddServerFirewall_Request_Ip:
		if v == nil {
			err := AddServerFirewall_RequestValidationError{
				field:  "Record",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServerFirewall_RequestValidationError{
						field:  "Ip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServerFirewall_RequestValidationError{
						field:  "Ip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServerFirewall_RequestValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServerFirewall_Request_CountryCode:
		if v == nil {
			err := AddServerFirewall_RequestValidationError{
				field:  "Record",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetCountryCode()) != 2 {
			err := AddServerFirewall_RequestValidationError{
				field:  "CountryCode",
				reason: "value length must be 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddServerFirewall_RequestMultiError(errors)
	}

	return nil
}

func (m *AddServerFirewall_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddServerFirewall_RequestMultiError is an error wrapping multiple validation
// errors returned by AddServerFirewall_Request.ValidateAll() if the
// designated constraints aren't met.
type AddServerFirewall_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerFirewall_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerFirewall_RequestMultiError) AllErrors() []error { return m }

// AddServerFirewall_RequestValidationError is the validation error returned by
// AddServerFirewall_Request.Validate if the designated constraints aren't met.
type AddServerFirewall_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerFirewall_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerFirewall_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerFirewall_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerFirewall_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerFirewall_RequestValidationError) ErrorName() string {
	return "AddServerFirewall_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerFirewall_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerFirewall_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerFirewall_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerFirewall_RequestValidationError{}

// Validate checks the field values on AddServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerFirewall_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerFirewall_ResponseMultiError, or nil if none found.
func (m *AddServerFirewall_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerFirewall_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddServerFirewall_ResponseMultiError(errors)
	}

	return nil
}

// AddServerFirewall_ResponseMultiError is an error wrapping multiple
// validation errors returned by AddServerFirewall_Response.ValidateAll() if
// the designated constraints aren't met.
type AddServerFirewall_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerFirewall_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerFirewall_ResponseMultiError) AllErrors() []error { return m }

// AddServerFirewall_ResponseValidationError is the validation error returned
// by AddServerFirewall_Response.Validate if the designated constraints aren't met.
type AddServerFirewall_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerFirewall_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerFirewall_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerFirewall_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerFirewall_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerFirewall_ResponseValidationError) ErrorName() string {
	return "AddServerFirewall_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerFirewall_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerFirewall_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerFirewall_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerFirewall_ResponseValidationError{}

// Validate checks the field values on UpdateServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerFirewall_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerFirewall_RequestMultiError, or nil if none found.
func (m *UpdateServerFirewall_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerFirewall_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = UpdateServerFirewall_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateServerFirewall_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateServerFirewall_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Rule

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateServerFirewall_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateServerFirewall_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateServerFirewall_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServerFirewall_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServerFirewall_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerFirewall_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerFirewall_RequestMultiError) AllErrors() []error { return m }

// UpdateServerFirewall_RequestValidationError is the validation error returned
// by UpdateServerFirewall_Request.Validate if the designated constraints
// aren't met.
type UpdateServerFirewall_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerFirewall_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerFirewall_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerFirewall_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerFirewall_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerFirewall_RequestValidationError) ErrorName() string {
	return "UpdateServerFirewall_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerFirewall_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerFirewall_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerFirewall_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerFirewall_RequestValidationError{}

// Validate checks the field values on UpdateServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerFirewall_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerFirewall_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServerFirewall_ResponseMultiError, or nil if none found.
func (m *UpdateServerFirewall_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerFirewall_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerFirewall_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServerFirewall_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServerFirewall_Response.ValidateAll()
// if the designated constraints aren't met.
type UpdateServerFirewall_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerFirewall_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerFirewall_ResponseMultiError) AllErrors() []error { return m }

// UpdateServerFirewall_ResponseValidationError is the validation error
// returned by UpdateServerFirewall_Response.Validate if the designated
// constraints aren't met.
type UpdateServerFirewall_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerFirewall_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerFirewall_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerFirewall_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerFirewall_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerFirewall_ResponseValidationError) ErrorName() string {
	return "UpdateServerFirewall_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerFirewall_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerFirewall_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerFirewall_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerFirewall_ResponseValidationError{}

// Validate checks the field values on DeleteServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerFirewall_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerFirewall_RequestMultiError, or nil if none found.
func (m *DeleteServerFirewall_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerFirewall_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = DeleteServerFirewall_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteServerFirewall_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = DeleteServerFirewall_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Rule

	if err := m._validateUuid(m.GetRecordId()); err != nil {
		err = DeleteServerFirewall_RequestValidationError{
			field:  "RecordId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServerFirewall_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteServerFirewall_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteServerFirewall_RequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServerFirewall_Request.ValidateAll() if
// the designated constraints aren't met.
type DeleteServerFirewall_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerFirewall_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerFirewall_RequestMultiError) AllErrors() []error { return m }

// DeleteServerFirewall_RequestValidationError is the validation error returned
// by DeleteServerFirewall_Request.Validate if the designated constraints
// aren't met.
type DeleteServerFirewall_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerFirewall_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerFirewall_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerFirewall_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerFirewall_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerFirewall_RequestValidationError) ErrorName() string {
	return "DeleteServerFirewall_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerFirewall_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerFirewall_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerFirewall_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerFirewall_RequestValidationError{}

// Validate checks the field values on DeleteServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerFirewall_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerFirewall_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteServerFirewall_ResponseMultiError, or nil if none found.
func (m *DeleteServerFirewall_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerFirewall_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerFirewall_ResponseMultiError(errors)
	}

	return nil
}

// DeleteServerFirewall_ResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteServerFirewall_Response.ValidateAll()
// if the designated constraints aren't met.
type DeleteServerFirewall_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerFirewall_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerFirewall_ResponseMultiError) AllErrors() []error { return m }

// DeleteServerFirewall_ResponseValidationError is the validation error
// returned by DeleteServerFirewall_Response.Validate if the designated
// constraints aren't met.
type DeleteServerFirewall_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerFirewall_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerFirewall_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerFirewall_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerFirewall_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerFirewall_ResponseValidationError) ErrorName() string {
	return "DeleteServerFirewall_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerFirewall_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerFirewall_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerFirewall_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerFirewall_ResponseValidationError{}

// Validate checks the field values on IPAccess_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IPAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPAccess_RequestMultiError, or nil if none found.
func (m *IPAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *IPAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if ip := net.ParseIP(m.GetClientIp()); ip == nil {
		err := IPAccess_RequestValidationError{
			field:  "ClientIp",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IPAccess_RequestMultiError(errors)
	}

	return nil
}

// IPAccess_RequestMultiError is an error wrapping multiple validation errors
// returned by IPAccess_Request.ValidateAll() if the designated constraints
// aren't met.
type IPAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPAccess_RequestMultiError) AllErrors() []error { return m }

// IPAccess_RequestValidationError is the validation error returned by
// IPAccess_Request.Validate if the designated constraints aren't met.
type IPAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPAccess_RequestValidationError) ErrorName() string { return "IPAccess_RequestValidationError" }

// Error satisfies the builtin error interface
func (e IPAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPAccess_RequestValidationError{}

// Validate checks the field values on IPAccess_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IPAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPAccess_ResponseMultiError, or nil if none found.
func (m *IPAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *IPAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IPAccess_ResponseMultiError(errors)
	}

	return nil
}

// IPAccess_ResponseMultiError is an error wrapping multiple validation errors
// returned by IPAccess_Response.ValidateAll() if the designated constraints
// aren't met.
type IPAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPAccess_ResponseMultiError) AllErrors() []error { return m }

// IPAccess_ResponseValidationError is the validation error returned by
// IPAccess_Response.Validate if the designated constraints aren't met.
type IPAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPAccess_ResponseValidationError) ErrorName() string {
	return "IPAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IPAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPAccess_ResponseValidationError{}

// Validate checks the field values on ServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccess_RequestMultiError, or nil if none found.
func (m *ServerAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerAccess_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerAccess_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetMemberIp()); ip == nil {
		err := ServerAccess_RequestValidationError{
			field:  "MemberIp",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerAccess_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerAccess_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerAccess_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccess_RequestMultiError) AllErrors() []error { return m }

// ServerAccess_RequestValidationError is the validation error returned by
// ServerAccess_Request.Validate if the designated constraints aren't met.
type ServerAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccess_RequestValidationError) ErrorName() string {
	return "ServerAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccess_RequestValidationError{}

// Validate checks the field values on ServerAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccess_ResponseMultiError, or nil if none found.
func (m *ServerAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccess_ResponseMultiError(errors)
	}

	return nil
}

// ServerAccess_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerAccess_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccess_ResponseMultiError) AllErrors() []error { return m }

// ServerAccess_ResponseValidationError is the validation error returned by
// ServerAccess_Response.Validate if the designated constraints aren't met.
type ServerAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccess_ResponseValidationError) ErrorName() string {
	return "ServerAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccess_ResponseValidationError{}

// Validate checks the field values on ServerAccessUser_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessUser_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessUser_RequestMultiError, or nil if none found.
func (m *ServerAccessUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ServerAccessUser_RequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerAccessUser_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerAccessUser_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerAccessUser_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerAccessUser_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerAccessUser_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerAccessUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessUser_RequestMultiError) AllErrors() []error { return m }

// ServerAccessUser_RequestValidationError is the validation error returned by
// ServerAccessUser_Request.Validate if the designated constraints aren't met.
type ServerAccessUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessUser_RequestValidationError) ErrorName() string {
	return "ServerAccessUser_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessUser_RequestValidationError{}

// Validate checks the field values on ServerAccessUser_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessUser_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessUser_ResponseMultiError, or nil if none found.
func (m *ServerAccessUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessUser_ResponseMultiError(errors)
	}

	return nil
}

// ServerAccessUser_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerAccessUser_Response.ValidateAll() if the
// designated constraints aren't met.
type ServerAccessUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessUser_ResponseMultiError) AllErrors() []error { return m }

// ServerAccessUser_ResponseValidationError is the validation error returned by
// ServerAccessUser_Response.Validate if the designated constraints aren't met.
type ServerAccessUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessUser_ResponseValidationError) ErrorName() string {
	return "ServerAccessUser_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessUser_ResponseValidationError{}

// Validate checks the field values on ServerAccessTime_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessTime_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessTime_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessTime_RequestMultiError, or nil if none found.
func (m *ServerAccessTime_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessTime_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerAccessTime_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerAccessTime_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerAccessTime_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerAccessTime_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerAccessTime_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerAccessTime_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessTime_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessTime_RequestMultiError) AllErrors() []error { return m }

// ServerAccessTime_RequestValidationError is the validation error returned by
// ServerAccessTime_Request.Validate if the designated constraints aren't met.
type ServerAccessTime_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessTime_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessTime_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessTime_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessTime_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessTime_RequestValidationError) ErrorName() string {
	return "ServerAccessTime_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessTime_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessTime_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessTime_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessTime_RequestValidationError{}

// Validate checks the field values on ServerAccessTime_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessTime_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessTime_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessTime_ResponseMultiError, or nil if none found.
func (m *ServerAccessTime_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessTime_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessTime_ResponseMultiError(errors)
	}

	return nil
}

// ServerAccessTime_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerAccessTime_Response.ValidateAll() if the
// designated constraints aren't met.
type ServerAccessTime_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessTime_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessTime_ResponseMultiError) AllErrors() []error { return m }

// ServerAccessTime_ResponseValidationError is the validation error returned by
// ServerAccessTime_Response.Validate if the designated constraints aren't met.
type ServerAccessTime_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessTime_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessTime_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessTime_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessTime_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessTime_ResponseValidationError) ErrorName() string {
	return "ServerAccessTime_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessTime_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessTime_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessTime_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessTime_ResponseValidationError{}

// Validate checks the field values on ServerAccessIP_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessIP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessIP_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessIP_RequestMultiError, or nil if none found.
func (m *ServerAccessIP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessIP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerAccessIP_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetMemberIp()); ip == nil {
		err := ServerAccessIP_RequestValidationError{
			field:  "MemberIp",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerAccessIP_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerAccessIP_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerAccessIP_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerAccessIP_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerAccessIP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessIP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessIP_RequestMultiError) AllErrors() []error { return m }

// ServerAccessIP_RequestValidationError is the validation error returned by
// ServerAccessIP_Request.Validate if the designated constraints aren't met.
type ServerAccessIP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessIP_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessIP_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessIP_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessIP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessIP_RequestValidationError) ErrorName() string {
	return "ServerAccessIP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessIP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessIP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessIP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessIP_RequestValidationError{}

// Validate checks the field values on ServerAccessIP_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessIP_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessIP_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessIP_ResponseMultiError, or nil if none found.
func (m *ServerAccessIP_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessIP_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessIP_ResponseMultiError(errors)
	}

	return nil
}

// ServerAccessIP_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerAccessIP_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerAccessIP_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessIP_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessIP_ResponseMultiError) AllErrors() []error { return m }

// ServerAccessIP_ResponseValidationError is the validation error returned by
// ServerAccessIP_Response.Validate if the designated constraints aren't met.
type ServerAccessIP_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessIP_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessIP_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessIP_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessIP_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessIP_ResponseValidationError) ErrorName() string {
	return "ServerAccessIP_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessIP_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessIP_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessIP_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessIP_ResponseValidationError{}

// Validate checks the field values on ServerAccessCountry_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessCountry_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessCountry_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessCountry_RequestMultiError, or nil if none found.
func (m *ServerAccessCountry_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessCountry_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerAccessCountry_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetMemberIp()); ip == nil {
		err := ServerAccessCountry_RequestValidationError{
			field:  "MemberIp",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerAccessCountry_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerAccessCountry_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerAccessCountry_RequestMultiError is an error wrapping multiple
// validation errors returned by ServerAccessCountry_Request.ValidateAll() if
// the designated constraints aren't met.
type ServerAccessCountry_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessCountry_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessCountry_RequestMultiError) AllErrors() []error { return m }

// ServerAccessCountry_RequestValidationError is the validation error returned
// by ServerAccessCountry_Request.Validate if the designated constraints
// aren't met.
type ServerAccessCountry_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessCountry_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessCountry_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessCountry_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessCountry_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessCountry_RequestValidationError) ErrorName() string {
	return "ServerAccessCountry_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessCountry_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessCountry_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessCountry_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessCountry_RequestValidationError{}

// Validate checks the field values on ServerAccessCountry_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerAccessCountry_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerAccessCountry_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerAccessCountry_ResponseMultiError, or nil if none found.
func (m *ServerAccessCountry_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerAccessCountry_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerAccessCountry_ResponseMultiError(errors)
	}

	return nil
}

// ServerAccessCountry_ResponseMultiError is an error wrapping multiple
// validation errors returned by ServerAccessCountry_Response.ValidateAll() if
// the designated constraints aren't met.
type ServerAccessCountry_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerAccessCountry_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerAccessCountry_ResponseMultiError) AllErrors() []error { return m }

// ServerAccessCountry_ResponseValidationError is the validation error returned
// by ServerAccessCountry_Response.Validate if the designated constraints
// aren't met.
type ServerAccessCountry_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerAccessCountry_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerAccessCountry_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerAccessCountry_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerAccessCountry_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerAccessCountry_ResponseValidationError) ErrorName() string {
	return "ServerAccessCountry_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerAccessCountry_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerAccessCountry_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerAccessCountry_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerAccessCountry_ResponseValidationError{}

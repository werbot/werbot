// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: firewall.proto

package firewall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _firewall_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Country with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Country with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CountryMultiError, or nil if none found.
func (m *Country) ValidateAll() error {
	return m.validate(true)
}

func (m *Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for CountryName

	// no validation rules for CountryCode

	if len(errors) > 0 {
		return CountryMultiError(errors)
	}

	return nil
}

// CountryMultiError is an error wrapping multiple validation errors returned
// by Country.ValidateAll() if the designated constraints aren't met.
type CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryMultiError) AllErrors() []error { return m }

// CountryValidationError is the validation error returned by Country.Validate
// if the designated constraints aren't met.
type CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryValidationError) ErrorName() string { return "CountryValidationError" }

// Error satisfies the builtin error interface
func (e CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryValidationError{}

// Validate checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Network) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NetworkMultiError, or nil if none found.
func (m *Network) ValidateAll() error {
	return m.validate(true)
}

func (m *Network) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for StartIp

	// no validation rules for EndIp

	if len(errors) > 0 {
		return NetworkMultiError(errors)
	}

	return nil
}

// NetworkMultiError is an error wrapping multiple validation errors returned
// by Network.ValidateAll() if the designated constraints aren't met.
type NetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkMultiError) AllErrors() []error { return m }

// NetworkValidationError is the validation error returned by Network.Validate
// if the designated constraints aren't met.
type NetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkValidationError) ErrorName() string { return "NetworkValidationError" }

// Error satisfies the builtin error interface
func (e NetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkValidationError{}

// Validate checks the field values on AccessList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessListMultiError, or
// nil if none found.
func (m *AccessList) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for Country

	// no validation rules for Network

	if len(errors) > 0 {
		return AccessListMultiError(errors)
	}

	return nil
}

// AccessListMultiError is an error wrapping multiple validation errors
// returned by AccessList.ValidateAll() if the designated constraints aren't met.
type AccessListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessListMultiError) AllErrors() []error { return m }

// AccessListValidationError is the validation error returned by
// AccessList.Validate if the designated constraints aren't met.
type AccessListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessListValidationError) ErrorName() string { return "AccessListValidationError" }

// Error satisfies the builtin error interface
func (e AccessListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessListValidationError{}

// Validate checks the field values on IpMask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IpMask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IpMask with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IpMaskMultiError, or nil if none found.
func (m *IpMask) ValidateAll() error {
	return m.validate(true)
}

func (m *IpMask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartIp

	// no validation rules for EndIp

	if len(errors) > 0 {
		return IpMaskMultiError(errors)
	}

	return nil
}

// IpMaskMultiError is an error wrapping multiple validation errors returned by
// IpMask.ValidateAll() if the designated constraints aren't met.
type IpMaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IpMaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IpMaskMultiError) AllErrors() []error { return m }

// IpMaskValidationError is the validation error returned by IpMask.Validate if
// the designated constraints aren't met.
type IpMaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IpMaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IpMaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IpMaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IpMaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IpMaskValidationError) ErrorName() string { return "IpMaskValidationError" }

// Error satisfies the builtin error interface
func (e IpMaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIpMask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IpMaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IpMaskValidationError{}

// Validate checks the field values on CountryCode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CountryCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryCode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CountryCodeMultiError, or
// nil if none found.
func (m *CountryCode) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return CountryCodeMultiError(errors)
	}

	return nil
}

// CountryCodeMultiError is an error wrapping multiple validation errors
// returned by CountryCode.ValidateAll() if the designated constraints aren't met.
type CountryCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryCodeMultiError) AllErrors() []error { return m }

// CountryCodeValidationError is the validation error returned by
// CountryCode.Validate if the designated constraints aren't met.
type CountryCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryCodeValidationError) ErrorName() string { return "CountryCodeValidationError" }

// Error satisfies the builtin error interface
func (e CountryCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryCodeValidationError{}

// Validate checks the field values on ServerFirewall with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerFirewall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerFirewallMultiError,
// or nil if none found.
func (m *ServerFirewall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerFirewallMultiError(errors)
	}

	return nil
}

// ServerFirewallMultiError is an error wrapping multiple validation errors
// returned by ServerFirewall.ValidateAll() if the designated constraints
// aren't met.
type ServerFirewallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewallMultiError) AllErrors() []error { return m }

// ServerFirewallValidationError is the validation error returned by
// ServerFirewall.Validate if the designated constraints aren't met.
type ServerFirewallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewallValidationError) ErrorName() string { return "ServerFirewallValidationError" }

// Error satisfies the builtin error interface
func (e ServerFirewallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewallValidationError{}

// Validate checks the field values on AddServerFirewall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServerFirewall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerFirewallMultiError, or nil if none found.
func (m *AddServerFirewall) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerFirewall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddServerFirewallMultiError(errors)
	}

	return nil
}

// AddServerFirewallMultiError is an error wrapping multiple validation errors
// returned by AddServerFirewall.ValidateAll() if the designated constraints
// aren't met.
type AddServerFirewallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerFirewallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerFirewallMultiError) AllErrors() []error { return m }

// AddServerFirewallValidationError is the validation error returned by
// AddServerFirewall.Validate if the designated constraints aren't met.
type AddServerFirewallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerFirewallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerFirewallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerFirewallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerFirewallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerFirewallValidationError) ErrorName() string {
	return "AddServerFirewallValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerFirewallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerFirewall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerFirewallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerFirewallValidationError{}

// Validate checks the field values on DeleteServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerFirewall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerFirewall with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerFirewallMultiError, or nil if none found.
func (m *DeleteServerFirewall) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerFirewall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerFirewallMultiError(errors)
	}

	return nil
}

// DeleteServerFirewallMultiError is an error wrapping multiple validation
// errors returned by DeleteServerFirewall.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerFirewallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerFirewallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerFirewallMultiError) AllErrors() []error { return m }

// DeleteServerFirewallValidationError is the validation error returned by
// DeleteServerFirewall.Validate if the designated constraints aren't met.
type DeleteServerFirewallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerFirewallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerFirewallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerFirewallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerFirewallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerFirewallValidationError) ErrorName() string {
	return "DeleteServerFirewallValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerFirewallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerFirewall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerFirewallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerFirewallValidationError{}

// Validate checks the field values on UpdateAccessPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccessPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccessPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccessPolicyMultiError, or nil if none found.
func (m *UpdateAccessPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccessPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccessPolicyMultiError(errors)
	}

	return nil
}

// UpdateAccessPolicyMultiError is an error wrapping multiple validation errors
// returned by UpdateAccessPolicy.ValidateAll() if the designated constraints
// aren't met.
type UpdateAccessPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccessPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccessPolicyMultiError) AllErrors() []error { return m }

// UpdateAccessPolicyValidationError is the validation error returned by
// UpdateAccessPolicy.Validate if the designated constraints aren't met.
type UpdateAccessPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccessPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccessPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccessPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccessPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccessPolicyValidationError) ErrorName() string {
	return "UpdateAccessPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccessPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccessPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccessPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccessPolicyValidationError{}

// Validate checks the field values on CheckIPAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckIPAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIPAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckIPAccessMultiError, or
// nil if none found.
func (m *CheckIPAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIPAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckIPAccessMultiError(errors)
	}

	return nil
}

// CheckIPAccessMultiError is an error wrapping multiple validation errors
// returned by CheckIPAccess.ValidateAll() if the designated constraints
// aren't met.
type CheckIPAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIPAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIPAccessMultiError) AllErrors() []error { return m }

// CheckIPAccessValidationError is the validation error returned by
// CheckIPAccess.Validate if the designated constraints aren't met.
type CheckIPAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIPAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIPAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIPAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIPAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIPAccessValidationError) ErrorName() string { return "CheckIPAccessValidationError" }

// Error satisfies the builtin error interface
func (e CheckIPAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIPAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIPAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIPAccessValidationError{}

// Validate checks the field values on CheckServerAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckServerAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckServerAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckServerAccessMultiError, or nil if none found.
func (m *CheckServerAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckServerAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckServerAccessMultiError(errors)
	}

	return nil
}

// CheckServerAccessMultiError is an error wrapping multiple validation errors
// returned by CheckServerAccess.ValidateAll() if the designated constraints
// aren't met.
type CheckServerAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckServerAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckServerAccessMultiError) AllErrors() []error { return m }

// CheckServerAccessValidationError is the validation error returned by
// CheckServerAccess.Validate if the designated constraints aren't met.
type CheckServerAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckServerAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckServerAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckServerAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckServerAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckServerAccessValidationError) ErrorName() string {
	return "CheckServerAccessValidationError"
}

// Error satisfies the builtin error interface
func (e CheckServerAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckServerAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckServerAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckServerAccessValidationError{}

// Validate checks the field values on ServerFirewall_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerFirewall_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerFirewall_RequestMultiError, or nil if none found.
func (m *ServerFirewall_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ServerFirewall_RequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = ServerFirewall_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ServerFirewall_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerFirewall_RequestMultiError(errors)
	}

	return nil
}

func (m *ServerFirewall_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServerFirewall_RequestMultiError is an error wrapping multiple validation
// errors returned by ServerFirewall_Request.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_RequestMultiError) AllErrors() []error { return m }

// ServerFirewall_RequestValidationError is the validation error returned by
// ServerFirewall_Request.Validate if the designated constraints aren't met.
type ServerFirewall_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_RequestValidationError) ErrorName() string {
	return "ServerFirewall_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_RequestValidationError{}

// Validate checks the field values on ServerFirewall_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerFirewall_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerFirewall_ResponseMultiError, or nil if none found.
func (m *ServerFirewall_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerFirewall_ResponseValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNetwork()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerFirewall_ResponseValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetwork()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerFirewall_ResponseValidationError{
				field:  "Network",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerFirewall_ResponseMultiError(errors)
	}

	return nil
}

// ServerFirewall_ResponseMultiError is an error wrapping multiple validation
// errors returned by ServerFirewall_Response.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_ResponseMultiError) AllErrors() []error { return m }

// ServerFirewall_ResponseValidationError is the validation error returned by
// ServerFirewall_Response.Validate if the designated constraints aren't met.
type ServerFirewall_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_ResponseValidationError) ErrorName() string {
	return "ServerFirewall_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_ResponseValidationError{}

// Validate checks the field values on ServerFirewall_Response_Countries with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerFirewall_Response_Countries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Response_Countries
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerFirewall_Response_CountriesMultiError, or nil if none found.
func (m *ServerFirewall_Response_Countries) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Response_Countries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WiteList

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerFirewall_Response_CountriesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerFirewall_Response_CountriesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerFirewall_Response_CountriesValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServerFirewall_Response_CountriesMultiError(errors)
	}

	return nil
}

// ServerFirewall_Response_CountriesMultiError is an error wrapping multiple
// validation errors returned by
// ServerFirewall_Response_Countries.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_Response_CountriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_Response_CountriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_Response_CountriesMultiError) AllErrors() []error { return m }

// ServerFirewall_Response_CountriesValidationError is the validation error
// returned by ServerFirewall_Response_Countries.Validate if the designated
// constraints aren't met.
type ServerFirewall_Response_CountriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_Response_CountriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_Response_CountriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_Response_CountriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_Response_CountriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_Response_CountriesValidationError) ErrorName() string {
	return "ServerFirewall_Response_CountriesValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_Response_CountriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Response_Countries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_Response_CountriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_Response_CountriesValidationError{}

// Validate checks the field values on ServerFirewall_Response_Networks with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerFirewall_Response_Networks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerFirewall_Response_Networks with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ServerFirewall_Response_NetworksMultiError, or nil if none found.
func (m *ServerFirewall_Response_Networks) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerFirewall_Response_Networks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WiteList

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerFirewall_Response_NetworksValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerFirewall_Response_NetworksValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerFirewall_Response_NetworksValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServerFirewall_Response_NetworksMultiError(errors)
	}

	return nil
}

// ServerFirewall_Response_NetworksMultiError is an error wrapping multiple
// validation errors returned by
// ServerFirewall_Response_Networks.ValidateAll() if the designated
// constraints aren't met.
type ServerFirewall_Response_NetworksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerFirewall_Response_NetworksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerFirewall_Response_NetworksMultiError) AllErrors() []error { return m }

// ServerFirewall_Response_NetworksValidationError is the validation error
// returned by ServerFirewall_Response_Networks.Validate if the designated
// constraints aren't met.
type ServerFirewall_Response_NetworksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerFirewall_Response_NetworksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerFirewall_Response_NetworksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerFirewall_Response_NetworksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerFirewall_Response_NetworksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerFirewall_Response_NetworksValidationError) ErrorName() string {
	return "ServerFirewall_Response_NetworksValidationError"
}

// Error satisfies the builtin error interface
func (e ServerFirewall_Response_NetworksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerFirewall_Response_Networks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerFirewall_Response_NetworksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerFirewall_Response_NetworksValidationError{}

// Validate checks the field values on AddServerFirewall_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerFirewall_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerFirewall_RequestMultiError, or nil if none found.
func (m *AddServerFirewall_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerFirewall_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = AddServerFirewall_RequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = AddServerFirewall_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = AddServerFirewall_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Record.(type) {
	case *AddServerFirewall_Request_Ip:
		if v == nil {
			err := AddServerFirewall_RequestValidationError{
				field:  "Record",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServerFirewall_RequestValidationError{
						field:  "Ip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServerFirewall_RequestValidationError{
						field:  "Ip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServerFirewall_RequestValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServerFirewall_Request_Country:
		if v == nil {
			err := AddServerFirewall_RequestValidationError{
				field:  "Record",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCountry()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServerFirewall_RequestValidationError{
						field:  "Country",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServerFirewall_RequestValidationError{
						field:  "Country",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServerFirewall_RequestValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddServerFirewall_RequestMultiError(errors)
	}

	return nil
}

func (m *AddServerFirewall_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddServerFirewall_RequestMultiError is an error wrapping multiple validation
// errors returned by AddServerFirewall_Request.ValidateAll() if the
// designated constraints aren't met.
type AddServerFirewall_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerFirewall_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerFirewall_RequestMultiError) AllErrors() []error { return m }

// AddServerFirewall_RequestValidationError is the validation error returned by
// AddServerFirewall_Request.Validate if the designated constraints aren't met.
type AddServerFirewall_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerFirewall_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerFirewall_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerFirewall_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerFirewall_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerFirewall_RequestValidationError) ErrorName() string {
	return "AddServerFirewall_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerFirewall_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerFirewall_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerFirewall_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerFirewall_RequestValidationError{}

// Validate checks the field values on AddServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServerFirewall_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerFirewall_ResponseMultiError, or nil if none found.
func (m *AddServerFirewall_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerFirewall_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddServerFirewall_ResponseMultiError(errors)
	}

	return nil
}

// AddServerFirewall_ResponseMultiError is an error wrapping multiple
// validation errors returned by AddServerFirewall_Response.ValidateAll() if
// the designated constraints aren't met.
type AddServerFirewall_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerFirewall_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerFirewall_ResponseMultiError) AllErrors() []error { return m }

// AddServerFirewall_ResponseValidationError is the validation error returned
// by AddServerFirewall_Response.Validate if the designated constraints aren't met.
type AddServerFirewall_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerFirewall_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerFirewall_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerFirewall_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerFirewall_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerFirewall_ResponseValidationError) ErrorName() string {
	return "AddServerFirewall_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServerFirewall_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerFirewall_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerFirewall_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerFirewall_ResponseValidationError{}

// Validate checks the field values on DeleteServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerFirewall_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerFirewall_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerFirewall_RequestMultiError, or nil if none found.
func (m *DeleteServerFirewall_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerFirewall_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteServerFirewall_RequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = DeleteServerFirewall_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = DeleteServerFirewall_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Rule

	if err := m._validateUuid(m.GetRecordId()); err != nil {
		err = DeleteServerFirewall_RequestValidationError{
			field:  "RecordId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServerFirewall_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteServerFirewall_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteServerFirewall_RequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServerFirewall_Request.ValidateAll() if
// the designated constraints aren't met.
type DeleteServerFirewall_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerFirewall_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerFirewall_RequestMultiError) AllErrors() []error { return m }

// DeleteServerFirewall_RequestValidationError is the validation error returned
// by DeleteServerFirewall_Request.Validate if the designated constraints
// aren't met.
type DeleteServerFirewall_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerFirewall_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerFirewall_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerFirewall_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerFirewall_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerFirewall_RequestValidationError) ErrorName() string {
	return "DeleteServerFirewall_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerFirewall_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerFirewall_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerFirewall_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerFirewall_RequestValidationError{}

// Validate checks the field values on DeleteServerFirewall_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerFirewall_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerFirewall_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteServerFirewall_ResponseMultiError, or nil if none found.
func (m *DeleteServerFirewall_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerFirewall_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerFirewall_ResponseMultiError(errors)
	}

	return nil
}

// DeleteServerFirewall_ResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteServerFirewall_Response.ValidateAll()
// if the designated constraints aren't met.
type DeleteServerFirewall_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerFirewall_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerFirewall_ResponseMultiError) AllErrors() []error { return m }

// DeleteServerFirewall_ResponseValidationError is the validation error
// returned by DeleteServerFirewall_Response.Validate if the designated
// constraints aren't met.
type DeleteServerFirewall_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerFirewall_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerFirewall_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerFirewall_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerFirewall_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerFirewall_ResponseValidationError) ErrorName() string {
	return "DeleteServerFirewall_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerFirewall_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerFirewall_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerFirewall_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerFirewall_ResponseValidationError{}

// Validate checks the field values on UpdateAccessPolicy_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccessPolicy_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccessPolicy_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccessPolicy_RequestMultiError, or nil if none found.
func (m *UpdateAccessPolicy_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccessPolicy_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateAccessPolicy_RequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = UpdateAccessPolicy_RequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = UpdateAccessPolicy_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Rule

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateAccessPolicy_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateAccessPolicy_Request) _validateUuid(uuid string) error {
	if matched := _firewall_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateAccessPolicy_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAccessPolicy_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccessPolicy_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccessPolicy_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccessPolicy_RequestMultiError) AllErrors() []error { return m }

// UpdateAccessPolicy_RequestValidationError is the validation error returned
// by UpdateAccessPolicy_Request.Validate if the designated constraints aren't met.
type UpdateAccessPolicy_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccessPolicy_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccessPolicy_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccessPolicy_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccessPolicy_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccessPolicy_RequestValidationError) ErrorName() string {
	return "UpdateAccessPolicy_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccessPolicy_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccessPolicy_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccessPolicy_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccessPolicy_RequestValidationError{}

// Validate checks the field values on UpdateAccessPolicy_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccessPolicy_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccessPolicy_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccessPolicy_ResponseMultiError, or nil if none found.
func (m *UpdateAccessPolicy_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccessPolicy_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccessPolicy_ResponseMultiError(errors)
	}

	return nil
}

// UpdateAccessPolicy_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAccessPolicy_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccessPolicy_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccessPolicy_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccessPolicy_ResponseMultiError) AllErrors() []error { return m }

// UpdateAccessPolicy_ResponseValidationError is the validation error returned
// by UpdateAccessPolicy_Response.Validate if the designated constraints
// aren't met.
type UpdateAccessPolicy_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccessPolicy_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccessPolicy_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccessPolicy_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccessPolicy_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccessPolicy_ResponseValidationError) ErrorName() string {
	return "UpdateAccessPolicy_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccessPolicy_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccessPolicy_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccessPolicy_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccessPolicy_ResponseValidationError{}

// Validate checks the field values on CheckIPAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIPAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIPAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckIPAccess_RequestMultiError, or nil if none found.
func (m *CheckIPAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIPAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientIp

	if len(errors) > 0 {
		return CheckIPAccess_RequestMultiError(errors)
	}

	return nil
}

// CheckIPAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by CheckIPAccess_Request.ValidateAll() if the designated
// constraints aren't met.
type CheckIPAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIPAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIPAccess_RequestMultiError) AllErrors() []error { return m }

// CheckIPAccess_RequestValidationError is the validation error returned by
// CheckIPAccess_Request.Validate if the designated constraints aren't met.
type CheckIPAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIPAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIPAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIPAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIPAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIPAccess_RequestValidationError) ErrorName() string {
	return "CheckIPAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIPAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIPAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIPAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIPAccess_RequestValidationError{}

// Validate checks the field values on CheckIPAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIPAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIPAccess_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckIPAccess_ResponseMultiError, or nil if none found.
func (m *CheckIPAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIPAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Access

	// no validation rules for Country

	if len(errors) > 0 {
		return CheckIPAccess_ResponseMultiError(errors)
	}

	return nil
}

// CheckIPAccess_ResponseMultiError is an error wrapping multiple validation
// errors returned by CheckIPAccess_Response.ValidateAll() if the designated
// constraints aren't met.
type CheckIPAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIPAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIPAccess_ResponseMultiError) AllErrors() []error { return m }

// CheckIPAccess_ResponseValidationError is the validation error returned by
// CheckIPAccess_Response.Validate if the designated constraints aren't met.
type CheckIPAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIPAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIPAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIPAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIPAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIPAccess_ResponseValidationError) ErrorName() string {
	return "CheckIPAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIPAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIPAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIPAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIPAccess_ResponseValidationError{}

// Validate checks the field values on CheckServerAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckServerAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckServerAccess_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckServerAccess_RequestMultiError, or nil if none found.
func (m *CheckServerAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckServerAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientIp

	// no validation rules for Country

	// no validation rules for AccountId

	// no validation rules for UserId

	if len(errors) > 0 {
		return CheckServerAccess_RequestMultiError(errors)
	}

	return nil
}

// CheckServerAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by CheckServerAccess_Request.ValidateAll() if the
// designated constraints aren't met.
type CheckServerAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckServerAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckServerAccess_RequestMultiError) AllErrors() []error { return m }

// CheckServerAccess_RequestValidationError is the validation error returned by
// CheckServerAccess_Request.Validate if the designated constraints aren't met.
type CheckServerAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckServerAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckServerAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckServerAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckServerAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckServerAccess_RequestValidationError) ErrorName() string {
	return "CheckServerAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckServerAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckServerAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckServerAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckServerAccess_RequestValidationError{}

// Validate checks the field values on CheckServerAccess_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckServerAccess_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckServerAccess_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckServerAccess_ResponseMultiError, or nil if none found.
func (m *CheckServerAccess_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckServerAccess_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Access

	if len(errors) > 0 {
		return CheckServerAccess_ResponseMultiError(errors)
	}

	return nil
}

// CheckServerAccess_ResponseMultiError is an error wrapping multiple
// validation errors returned by CheckServerAccess_Response.ValidateAll() if
// the designated constraints aren't met.
type CheckServerAccess_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckServerAccess_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckServerAccess_ResponseMultiError) AllErrors() []error { return m }

// CheckServerAccess_ResponseValidationError is the validation error returned
// by CheckServerAccess_Response.Validate if the designated constraints aren't met.
type CheckServerAccess_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckServerAccess_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckServerAccess_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckServerAccess_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckServerAccess_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckServerAccess_ResponseValidationError) ErrorName() string {
	return "CheckServerAccess_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckServerAccess_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckServerAccess_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckServerAccess_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckServerAccess_ResponseValidationError{}

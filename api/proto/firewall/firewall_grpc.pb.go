// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: firewall.proto

package firewall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FirewallHandlersClient is the client API for FirewallHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirewallHandlersClient interface {
	ServerFirewall(ctx context.Context, in *ServerFirewall_Request, opts ...grpc.CallOption) (*ServerFirewall_Response, error)
	AddServerFirewall(ctx context.Context, in *AddServerFirewall_Request, opts ...grpc.CallOption) (*AddServerFirewall_Response, error)
	DeleteServerFirewall(ctx context.Context, in *DeleteServerFirewall_Request, opts ...grpc.CallOption) (*DeleteServerFirewall_Response, error)
	UpdateAccessPolicy(ctx context.Context, in *UpdateAccessPolicy_Request, opts ...grpc.CallOption) (*UpdateAccessPolicy_Response, error)
	CheckIPAccess(ctx context.Context, in *CheckIPAccess_Request, opts ...grpc.CallOption) (*CheckIPAccess_Response, error)
	CheckServerAccess(ctx context.Context, in *CheckServerAccess_Request, opts ...grpc.CallOption) (*CheckServerAccess_Response, error)
}

type firewallHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewFirewallHandlersClient(cc grpc.ClientConnInterface) FirewallHandlersClient {
	return &firewallHandlersClient{cc}
}

func (c *firewallHandlersClient) ServerFirewall(ctx context.Context, in *ServerFirewall_Request, opts ...grpc.CallOption) (*ServerFirewall_Response, error) {
	out := new(ServerFirewall_Response)
	err := c.cc.Invoke(ctx, "/firewall.FirewallHandlers/ServerFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallHandlersClient) AddServerFirewall(ctx context.Context, in *AddServerFirewall_Request, opts ...grpc.CallOption) (*AddServerFirewall_Response, error) {
	out := new(AddServerFirewall_Response)
	err := c.cc.Invoke(ctx, "/firewall.FirewallHandlers/AddServerFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallHandlersClient) DeleteServerFirewall(ctx context.Context, in *DeleteServerFirewall_Request, opts ...grpc.CallOption) (*DeleteServerFirewall_Response, error) {
	out := new(DeleteServerFirewall_Response)
	err := c.cc.Invoke(ctx, "/firewall.FirewallHandlers/DeleteServerFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallHandlersClient) UpdateAccessPolicy(ctx context.Context, in *UpdateAccessPolicy_Request, opts ...grpc.CallOption) (*UpdateAccessPolicy_Response, error) {
	out := new(UpdateAccessPolicy_Response)
	err := c.cc.Invoke(ctx, "/firewall.FirewallHandlers/UpdateAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallHandlersClient) CheckIPAccess(ctx context.Context, in *CheckIPAccess_Request, opts ...grpc.CallOption) (*CheckIPAccess_Response, error) {
	out := new(CheckIPAccess_Response)
	err := c.cc.Invoke(ctx, "/firewall.FirewallHandlers/CheckIPAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallHandlersClient) CheckServerAccess(ctx context.Context, in *CheckServerAccess_Request, opts ...grpc.CallOption) (*CheckServerAccess_Response, error) {
	out := new(CheckServerAccess_Response)
	err := c.cc.Invoke(ctx, "/firewall.FirewallHandlers/CheckServerAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirewallHandlersServer is the server API for FirewallHandlers service.
// All implementations must embed UnimplementedFirewallHandlersServer
// for forward compatibility
type FirewallHandlersServer interface {
	ServerFirewall(context.Context, *ServerFirewall_Request) (*ServerFirewall_Response, error)
	AddServerFirewall(context.Context, *AddServerFirewall_Request) (*AddServerFirewall_Response, error)
	DeleteServerFirewall(context.Context, *DeleteServerFirewall_Request) (*DeleteServerFirewall_Response, error)
	UpdateAccessPolicy(context.Context, *UpdateAccessPolicy_Request) (*UpdateAccessPolicy_Response, error)
	CheckIPAccess(context.Context, *CheckIPAccess_Request) (*CheckIPAccess_Response, error)
	CheckServerAccess(context.Context, *CheckServerAccess_Request) (*CheckServerAccess_Response, error)
	mustEmbedUnimplementedFirewallHandlersServer()
}

// UnimplementedFirewallHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedFirewallHandlersServer struct {
}

func (UnimplementedFirewallHandlersServer) ServerFirewall(context.Context, *ServerFirewall_Request) (*ServerFirewall_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerFirewall not implemented")
}
func (UnimplementedFirewallHandlersServer) AddServerFirewall(context.Context, *AddServerFirewall_Request) (*AddServerFirewall_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServerFirewall not implemented")
}
func (UnimplementedFirewallHandlersServer) DeleteServerFirewall(context.Context, *DeleteServerFirewall_Request) (*DeleteServerFirewall_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServerFirewall not implemented")
}
func (UnimplementedFirewallHandlersServer) UpdateAccessPolicy(context.Context, *UpdateAccessPolicy_Request) (*UpdateAccessPolicy_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessPolicy not implemented")
}
func (UnimplementedFirewallHandlersServer) CheckIPAccess(context.Context, *CheckIPAccess_Request) (*CheckIPAccess_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIPAccess not implemented")
}
func (UnimplementedFirewallHandlersServer) CheckServerAccess(context.Context, *CheckServerAccess_Request) (*CheckServerAccess_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServerAccess not implemented")
}
func (UnimplementedFirewallHandlersServer) mustEmbedUnimplementedFirewallHandlersServer() {}

// UnsafeFirewallHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirewallHandlersServer will
// result in compilation errors.
type UnsafeFirewallHandlersServer interface {
	mustEmbedUnimplementedFirewallHandlersServer()
}

func RegisterFirewallHandlersServer(s grpc.ServiceRegistrar, srv FirewallHandlersServer) {
	s.RegisterService(&FirewallHandlers_ServiceDesc, srv)
}

func _FirewallHandlers_ServerFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerFirewall_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).ServerFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallHandlers/ServerFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).ServerFirewall(ctx, req.(*ServerFirewall_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallHandlers_AddServerFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerFirewall_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).AddServerFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallHandlers/AddServerFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).AddServerFirewall(ctx, req.(*AddServerFirewall_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallHandlers_DeleteServerFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerFirewall_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).DeleteServerFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallHandlers/DeleteServerFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).DeleteServerFirewall(ctx, req.(*DeleteServerFirewall_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallHandlers_UpdateAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessPolicy_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).UpdateAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallHandlers/UpdateAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).UpdateAccessPolicy(ctx, req.(*UpdateAccessPolicy_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallHandlers_CheckIPAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIPAccess_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).CheckIPAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallHandlers/CheckIPAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).CheckIPAccess(ctx, req.(*CheckIPAccess_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallHandlers_CheckServerAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServerAccess_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).CheckServerAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallHandlers/CheckServerAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).CheckServerAccess(ctx, req.(*CheckServerAccess_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FirewallHandlers_ServiceDesc is the grpc.ServiceDesc for FirewallHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirewallHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "firewall.FirewallHandlers",
	HandlerType: (*FirewallHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerFirewall",
			Handler:    _FirewallHandlers_ServerFirewall_Handler,
		},
		{
			MethodName: "AddServerFirewall",
			Handler:    _FirewallHandlers_AddServerFirewall_Handler,
		},
		{
			MethodName: "DeleteServerFirewall",
			Handler:    _FirewallHandlers_DeleteServerFirewall_Handler,
		},
		{
			MethodName: "UpdateAccessPolicy",
			Handler:    _FirewallHandlers_UpdateAccessPolicy_Handler,
		},
		{
			MethodName: "CheckIPAccess",
			Handler:    _FirewallHandlers_CheckIPAccess_Handler,
		},
		{
			MethodName: "CheckServerAccess",
			Handler:    _FirewallHandlers_CheckServerAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "firewall.proto",
}

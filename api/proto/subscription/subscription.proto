syntax = "proto3";

package subscription;

option go_package = "github.com/werbot/werbot/api/proto/subscription";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service SubscriptionHandlers {
  // Subscription section
  rpc ListSubscriptions(ListSubscriptions.Request) returns (ListSubscriptions.Response) {}
  rpc Subscription(Subscription.Request) returns (Subscription.Response) {}
  rpc AddSubscription(AddSubscription.Request) returns (AddSubscription.Response) {}
  rpc UpdateSubscription(UpdateSubscription.Request) returns (UpdateSubscription.Response) {}
  rpc DeleteSubscription(DeleteSubscription.Request) returns (DeleteSubscription.Response) {}

  // Plan section
  rpc ListPlans(ListPlans.Request) returns (ListPlans.Response) {}
  rpc Plan(Plan.Request) returns (Plan.Response) {}
  rpc UpdatePlan(UpdatePlan.Request) returns (UpdatePlan.Response) {}

  // Customer section
  rpc ListCustomers(ListCustomers.Request) returns (ListCustomers.Response) {}
  rpc Customer(Customer.Request) returns (Customer.Response) {}
  rpc AddCustomer(AddCustomer.Request) returns (AddCustomer.Response) {}
  rpc UpdateCustomer(UpdateCustomer.Request) returns (UpdateCustomer.Response) {}
  rpc DeleteCustomer(DeleteCustomer.Request) returns (DeleteCustomer.Response) {}

  // Change section
  rpc ListChanges(ListChanges.Request) returns (ListChanges.Response) {}
  rpc Change(Change.Request) returns (Change.Response) {}

  // Invoice invoice
  rpc ListInvoices(ListInvoices.Request) returns (ListInvoices.Response) {}
  rpc Invoice(Invoice.Request) returns (Invoice.Response) {}
}

enum Sections {
  section_unspecified = 0;
	servers = 1;
	members = 2;
  invites = 3;
  ldap = 4;
  tasks = 5;
  security = 6;
  log_activities = 7;
}


// use only on http answer to ROLE_USER
message PlansLite {
  message PlanLite{
    string plan_id = 1;
    int32 cost = 2;
    int32 period = 3;
    string title = 4;
    string image = 5;
    int32 trial_period = 6;
    int32 limits_servers = 7;
    int32 limits_users = 8;
    int32 limits_companies = 9;
    int32 limits_connections = 10;
  }
  int32 total = 1;
  repeated PlanLite plans = 2;
}
// -----------------------------------------------------


// rpc ListSubscriptions
message ListSubscriptions {
  message Request {
    int32 limit = 1;
    int32 offset = 2;
    string sort_by = 3;
    string query = 4;
    string user_id = 5 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
  }

  message Response {
    int32 total = 1;
    repeated Subscription.Response subscriptions = 2;
  }
}
// -----------------------------------------------------


// rpc Subscription
message Subscription {
  message Request {
    string subscription_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"subscription_id" params:"subscription_id"
  }

  message Response {
    string subscription_id = 1;
    string customer_id = 2;
    string customer_name = 3;
    string plan_id = 4;
    string plan_name = 5;
    google.protobuf.Timestamp start_date = 6;
    google.protobuf.Timestamp end_date = 7;
    string state = 8;
    string stripe_id = 9;
  }
}
// -----------------------------------------------------


// rpc AddSubscription
message AddSubscription {
  message Request {
    string subscription_id = 1 [(validate.rules).string.uuid = true];                  // @gotags: query:"subscription_id" params:"subscription_id"
    string customer_id = 2     [(validate.rules).string.uuid = true];                  // @gotags: query:"customer_id" params:"customer_id"
    string customer_name = 3   [(validate.rules).string = {min_len: 3, max_len: 128}]; // @gotags: query:"customer_name" params:"customer_name"
    string plan_id = 4         [(validate.rules).string.uuid = true];                  // @gotags: query:"plan_id" params:"plan_id"
    string plan_name = 5       [(validate.rules).string = {min_len: 3, max_len: 128}]; // @gotags: query:"plan_name" params:"plan_name"
    google.protobuf.Timestamp start_date = 6;
    google.protobuf.Timestamp end_date = 7;
    string state = 8;
    string stripe_id = 9;
  }

  message Response {
    string subscription_id = 1;
  }
}
// -----------------------------------------------------


// rpc UpdateSubscription
message UpdateSubscription {
  message Request {
    string subscription_id = 1 [(validate.rules).string.uuid = true];                  // @gotags: query:"subscription_id" params:"subscription_id"
    string customer_id = 2     [(validate.rules).string.uuid = true];                  // @gotags: query:"customer_id" params:"customer_id"
    string customer_name = 3   [(validate.rules).string = {min_len: 3, max_len: 128}]; // @gotags: query:"customer_name" params:"customer_name"
    string plan_id = 4         [(validate.rules).string.uuid = true];                  // @gotags: query:"plan_id" params:"plan_id"
    string plan_name = 5       [(validate.rules).string = {min_len: 3, max_len: 128}]; // @gotags: query:"plan_name" params:"plan_name"
    google.protobuf.Timestamp start_date = 6;
    google.protobuf.Timestamp end_date = 7;
    string state = 8;
    string stripe_id = 9;
  }

  message Response {}
}
// -----------------------------------------------------


// rpc DeleteSubscription
message DeleteSubscription {
  message Request {
    string subscription_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"subscription_id" params:"subscription_id"
  }

  message Response {}
}
// -----------------------------------------------------



// rpc ListPlans
message ListPlans {
  message Request {
    int32 limit = 1;
    int32 offset = 2;
    string sort_by = 3;
    string query = 4;
    string user_id = 5 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
  }

  message Response {
    int32 total = 1;
    repeated PlanInfo plans = 2;
  }

  message PlanInfo {
    int32 subscription_count = 1;
    Plan.Response plan = 2;
  }
}
// -----------------------------------------------------


// rpc Plan
message Plan {
  message Request {
    string plan_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"plan_id" params:"plan_id"
  }

  message Response {
    string plan_id = 1;
    int32 cost = 2;
    int32 period = 3;
    string title = 4;
    string stripe_id = 5;
    repeated string allowed_sections = 6;
    map<int32, string>  benefits = 7;
    string image = 8;
    bool active = 9;
    bool trial = 10;
    int32 trial_period = 11;
    int32 limits_servers = 12;
    int32 limits_users = 13;
    int32 limits_companies = 14;
    int32 limits_connections = 15;
    bool default = 16;
  }
}
// -----------------------------------------------------


// rpc UpdatePlan
message UpdatePlan {
  message Request {
    string plan_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"plan_id" params:"plan_id"
    int32 cost = 2;
    int32 period = 3;
    string title = 4;
    string stripe_id = 5;
    repeated string allowed_sections = 6;
    map<int32, string>  benefits = 7;
    string image = 8;
    bool active = 9;
    bool trial = 10;
    int32 trial_period = 11;
    int32 limits_servers = 12;
    int32 limits_users = 13;
    int32 limits_companies = 14;
    int32 limits_connections = 15;
    bool default = 16;
  }

  message Response {}
}
// -----------------------------------------------------


// rpc ListCustomers
message ListCustomers {
  message Request {
    int32 limit = 1;
    int32 offset = 2;
    string sort_by = 3;
  }

  message Response {
    int32 total = 1;
    repeated Customer.Response customers = 2;
  }
}
// -----------------------------------------------------


// rpc Customer
message Customer {
  message Request {
    string user_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"user_id" params:"user_id"
  }

  message Response {
    string user_id = 1;
    string stripe_id = 2;
  }
}
// -----------------------------------------------------


// rpc AddCustomer
message AddCustomer {
  message Request {
    string user_id = 1    [(validate.rules).string.uuid = true]; // @gotags: query:"user_id" params:"user_id"
    string stripe_id = 2;
  }

  message Response {
    string customer_id = 1;
  }
}
// -----------------------------------------------------


// rpc UpdateCustomer
message UpdateCustomer {
  message Request {
    string user_id = 1   [(validate.rules).string.uuid = true]; // @gotags: query:"user_id" params:"user_id"
    string stripe_id = 2;
  }

  message Response {}
}
// -----------------------------------------------------


// rpc DeleteCustomer
message DeleteCustomer {
  message Request {
    string user_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"user_id" params:"user_id"
  }

  message Response {}
}
// -----------------------------------------------------


// rpc ListChanges
message ListChanges {
  message Request {
    int32 limit = 1;
    int32 offset = 2;
    string sort_by = 3;
    string query = 4;
  }

  message Response {
    int32 total = 1;
    repeated Change.Request change = 2;
  }
}
// -----------------------------------------------------


// rpc Change
message Change {
  message Request {
    string change_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"change_id" params:"change_id"
  }

  message Response {
    string change_id = 1;
    string subscription_id = 2;
    string plan_id = 3;
    google.protobuf.Timestamp date = 4;
  }
}
// -----------------------------------------------------



// rpc ListInvoices
message ListInvoices {
  message Request {
    int32 limit = 1;
    int32 offset = 2;
    string sort_by = 3;
    string query = 4;
  }

  message Response {
    int32 total = 1;
    repeated Invoice.Response invoice = 2;
  }
}
// -----------------------------------------------------


// rpc Invoice
message Invoice {
  message Request {
    string invoice_id = 1 [(validate.rules).string.uuid = true]; // @gotags: query:"invoice_id" params:"invoice_id"
  }

  message Response {
    string invoice_id = 1;
    string subscription_id = 2;
    string plan_id = 3;
    string stripe_id = 4;
    string url = 5;
    string status = 6;
    google.protobuf.Timestamp date = 7;
    int32 amount = 8;
    string currency = 9;
    google.protobuf.Timestamp period_start = 10;
    google.protobuf.Timestamp period_end = 11;
  }
}
// -----------------------------------------------------

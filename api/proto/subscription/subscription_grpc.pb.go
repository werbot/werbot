// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: subscription.proto

package subscription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionHandlersClient is the client API for SubscriptionHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionHandlersClient interface {
	// Subscription section
	ListSubscriptions(ctx context.Context, in *ListSubscriptions_Request, opts ...grpc.CallOption) (*ListSubscriptions_Response, error)
	Subscription(ctx context.Context, in *Subscription_Request, opts ...grpc.CallOption) (*Subscription_Response, error)
	AddSubscription(ctx context.Context, in *AddSubscription_Request, opts ...grpc.CallOption) (*AddSubscription_Response, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscription_Request, opts ...grpc.CallOption) (*UpdateSubscription_Response, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscription_Request, opts ...grpc.CallOption) (*DeleteSubscription_Response, error)
	// Plan section
	ListPlans(ctx context.Context, in *ListPlans_Request, opts ...grpc.CallOption) (*ListPlans_Response, error)
	Plan(ctx context.Context, in *Plan_Request, opts ...grpc.CallOption) (*Plan_Response, error)
	UpdatePlan(ctx context.Context, in *UpdatePlan_Request, opts ...grpc.CallOption) (*UpdatePlan_Response, error)
	// Customer section
	ListCustomers(ctx context.Context, in *ListCustomers_Request, opts ...grpc.CallOption) (*ListCustomers_Response, error)
	Customer(ctx context.Context, in *Customer_Request, opts ...grpc.CallOption) (*Customer_Response, error)
	AddCustomer(ctx context.Context, in *AddCustomer_Request, opts ...grpc.CallOption) (*AddCustomer_Response, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomer_Request, opts ...grpc.CallOption) (*UpdateCustomer_Response, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomer_Request, opts ...grpc.CallOption) (*DeleteCustomer_Response, error)
	// Change section
	ListChanges(ctx context.Context, in *ListChanges_Request, opts ...grpc.CallOption) (*ListChanges_Response, error)
	Change(ctx context.Context, in *Change_Request, opts ...grpc.CallOption) (*Change_Response, error)
	// Invoice invoice
	ListInvoices(ctx context.Context, in *ListInvoices_Request, opts ...grpc.CallOption) (*ListInvoices_Response, error)
	Invoice(ctx context.Context, in *Invoice_Request, opts ...grpc.CallOption) (*Invoice_Response, error)
}

type subscriptionHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionHandlersClient(cc grpc.ClientConnInterface) SubscriptionHandlersClient {
	return &subscriptionHandlersClient{cc}
}

func (c *subscriptionHandlersClient) ListSubscriptions(ctx context.Context, in *ListSubscriptions_Request, opts ...grpc.CallOption) (*ListSubscriptions_Response, error) {
	out := new(ListSubscriptions_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) Subscription(ctx context.Context, in *Subscription_Request, opts ...grpc.CallOption) (*Subscription_Response, error) {
	out := new(Subscription_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/Subscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) AddSubscription(ctx context.Context, in *AddSubscription_Request, opts ...grpc.CallOption) (*AddSubscription_Response, error) {
	out := new(AddSubscription_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/AddSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) UpdateSubscription(ctx context.Context, in *UpdateSubscription_Request, opts ...grpc.CallOption) (*UpdateSubscription_Response, error) {
	out := new(UpdateSubscription_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) DeleteSubscription(ctx context.Context, in *DeleteSubscription_Request, opts ...grpc.CallOption) (*DeleteSubscription_Response, error) {
	out := new(DeleteSubscription_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) ListPlans(ctx context.Context, in *ListPlans_Request, opts ...grpc.CallOption) (*ListPlans_Response, error) {
	out := new(ListPlans_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) Plan(ctx context.Context, in *Plan_Request, opts ...grpc.CallOption) (*Plan_Response, error) {
	out := new(Plan_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/Plan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) UpdatePlan(ctx context.Context, in *UpdatePlan_Request, opts ...grpc.CallOption) (*UpdatePlan_Response, error) {
	out := new(UpdatePlan_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/UpdatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) ListCustomers(ctx context.Context, in *ListCustomers_Request, opts ...grpc.CallOption) (*ListCustomers_Response, error) {
	out := new(ListCustomers_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/ListCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) Customer(ctx context.Context, in *Customer_Request, opts ...grpc.CallOption) (*Customer_Response, error) {
	out := new(Customer_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/Customer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) AddCustomer(ctx context.Context, in *AddCustomer_Request, opts ...grpc.CallOption) (*AddCustomer_Response, error) {
	out := new(AddCustomer_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/AddCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) UpdateCustomer(ctx context.Context, in *UpdateCustomer_Request, opts ...grpc.CallOption) (*UpdateCustomer_Response, error) {
	out := new(UpdateCustomer_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) DeleteCustomer(ctx context.Context, in *DeleteCustomer_Request, opts ...grpc.CallOption) (*DeleteCustomer_Response, error) {
	out := new(DeleteCustomer_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) ListChanges(ctx context.Context, in *ListChanges_Request, opts ...grpc.CallOption) (*ListChanges_Response, error) {
	out := new(ListChanges_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/ListChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) Change(ctx context.Context, in *Change_Request, opts ...grpc.CallOption) (*Change_Response, error) {
	out := new(Change_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/Change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) ListInvoices(ctx context.Context, in *ListInvoices_Request, opts ...grpc.CallOption) (*ListInvoices_Response, error) {
	out := new(ListInvoices_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/ListInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionHandlersClient) Invoice(ctx context.Context, in *Invoice_Request, opts ...grpc.CallOption) (*Invoice_Response, error) {
	out := new(Invoice_Response)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionHandlers/Invoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionHandlersServer is the server API for SubscriptionHandlers service.
// All implementations must embed UnimplementedSubscriptionHandlersServer
// for forward compatibility
type SubscriptionHandlersServer interface {
	// Subscription section
	ListSubscriptions(context.Context, *ListSubscriptions_Request) (*ListSubscriptions_Response, error)
	Subscription(context.Context, *Subscription_Request) (*Subscription_Response, error)
	AddSubscription(context.Context, *AddSubscription_Request) (*AddSubscription_Response, error)
	UpdateSubscription(context.Context, *UpdateSubscription_Request) (*UpdateSubscription_Response, error)
	DeleteSubscription(context.Context, *DeleteSubscription_Request) (*DeleteSubscription_Response, error)
	// Plan section
	ListPlans(context.Context, *ListPlans_Request) (*ListPlans_Response, error)
	Plan(context.Context, *Plan_Request) (*Plan_Response, error)
	UpdatePlan(context.Context, *UpdatePlan_Request) (*UpdatePlan_Response, error)
	// Customer section
	ListCustomers(context.Context, *ListCustomers_Request) (*ListCustomers_Response, error)
	Customer(context.Context, *Customer_Request) (*Customer_Response, error)
	AddCustomer(context.Context, *AddCustomer_Request) (*AddCustomer_Response, error)
	UpdateCustomer(context.Context, *UpdateCustomer_Request) (*UpdateCustomer_Response, error)
	DeleteCustomer(context.Context, *DeleteCustomer_Request) (*DeleteCustomer_Response, error)
	// Change section
	ListChanges(context.Context, *ListChanges_Request) (*ListChanges_Response, error)
	Change(context.Context, *Change_Request) (*Change_Response, error)
	// Invoice invoice
	ListInvoices(context.Context, *ListInvoices_Request) (*ListInvoices_Response, error)
	Invoice(context.Context, *Invoice_Request) (*Invoice_Response, error)
	mustEmbedUnimplementedSubscriptionHandlersServer()
}

// UnimplementedSubscriptionHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionHandlersServer struct {
}

func (UnimplementedSubscriptionHandlersServer) ListSubscriptions(context.Context, *ListSubscriptions_Request) (*ListSubscriptions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedSubscriptionHandlersServer) Subscription(context.Context, *Subscription_Request) (*Subscription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}
func (UnimplementedSubscriptionHandlersServer) AddSubscription(context.Context, *AddSubscription_Request) (*AddSubscription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscription not implemented")
}
func (UnimplementedSubscriptionHandlersServer) UpdateSubscription(context.Context, *UpdateSubscription_Request) (*UpdateSubscription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedSubscriptionHandlersServer) DeleteSubscription(context.Context, *DeleteSubscription_Request) (*DeleteSubscription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedSubscriptionHandlersServer) ListPlans(context.Context, *ListPlans_Request) (*ListPlans_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedSubscriptionHandlersServer) Plan(context.Context, *Plan_Request) (*Plan_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Plan not implemented")
}
func (UnimplementedSubscriptionHandlersServer) UpdatePlan(context.Context, *UpdatePlan_Request) (*UpdatePlan_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedSubscriptionHandlersServer) ListCustomers(context.Context, *ListCustomers_Request) (*ListCustomers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomers not implemented")
}
func (UnimplementedSubscriptionHandlersServer) Customer(context.Context, *Customer_Request) (*Customer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Customer not implemented")
}
func (UnimplementedSubscriptionHandlersServer) AddCustomer(context.Context, *AddCustomer_Request) (*AddCustomer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomer not implemented")
}
func (UnimplementedSubscriptionHandlersServer) UpdateCustomer(context.Context, *UpdateCustomer_Request) (*UpdateCustomer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedSubscriptionHandlersServer) DeleteCustomer(context.Context, *DeleteCustomer_Request) (*DeleteCustomer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedSubscriptionHandlersServer) ListChanges(context.Context, *ListChanges_Request) (*ListChanges_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChanges not implemented")
}
func (UnimplementedSubscriptionHandlersServer) Change(context.Context, *Change_Request) (*Change_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedSubscriptionHandlersServer) ListInvoices(context.Context, *ListInvoices_Request) (*ListInvoices_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedSubscriptionHandlersServer) Invoice(context.Context, *Invoice_Request) (*Invoice_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoice not implemented")
}
func (UnimplementedSubscriptionHandlersServer) mustEmbedUnimplementedSubscriptionHandlersServer() {}

// UnsafeSubscriptionHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionHandlersServer will
// result in compilation errors.
type UnsafeSubscriptionHandlersServer interface {
	mustEmbedUnimplementedSubscriptionHandlersServer()
}

func RegisterSubscriptionHandlersServer(s grpc.ServiceRegistrar, srv SubscriptionHandlersServer) {
	s.RegisterService(&SubscriptionHandlers_ServiceDesc, srv)
}

func _SubscriptionHandlers_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).ListSubscriptions(ctx, req.(*ListSubscriptions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_Subscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).Subscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/Subscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).Subscription(ctx, req.(*Subscription_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_AddSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubscription_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).AddSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/AddSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).AddSubscription(ctx, req.(*AddSubscription_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscription_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).UpdateSubscription(ctx, req.(*UpdateSubscription_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscription_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).DeleteSubscription(ctx, req.(*DeleteSubscription_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlans_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).ListPlans(ctx, req.(*ListPlans_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_Plan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).Plan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/Plan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).Plan(ctx, req.(*Plan_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlan_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/UpdatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).UpdatePlan(ctx, req.(*UpdatePlan_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_ListCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).ListCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/ListCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).ListCustomers(ctx, req.(*ListCustomers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_Customer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).Customer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/Customer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).Customer(ctx, req.(*Customer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_AddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).AddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/AddCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).AddCustomer(ctx, req.(*AddCustomer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).UpdateCustomer(ctx, req.(*UpdateCustomer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).DeleteCustomer(ctx, req.(*DeleteCustomer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_ListChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChanges_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).ListChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/ListChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).ListChanges(ctx, req.(*ListChanges_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Change_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).Change(ctx, req.(*Change_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoices_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/ListInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).ListInvoices(ctx, req.(*ListInvoices_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionHandlers_Invoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionHandlersServer).Invoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionHandlers/Invoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionHandlersServer).Invoice(ctx, req.(*Invoice_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionHandlers_ServiceDesc is the grpc.ServiceDesc for SubscriptionHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.SubscriptionHandlers",
	HandlerType: (*SubscriptionHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSubscriptions",
			Handler:    _SubscriptionHandlers_ListSubscriptions_Handler,
		},
		{
			MethodName: "Subscription",
			Handler:    _SubscriptionHandlers_Subscription_Handler,
		},
		{
			MethodName: "AddSubscription",
			Handler:    _SubscriptionHandlers_AddSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _SubscriptionHandlers_UpdateSubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _SubscriptionHandlers_DeleteSubscription_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _SubscriptionHandlers_ListPlans_Handler,
		},
		{
			MethodName: "Plan",
			Handler:    _SubscriptionHandlers_Plan_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _SubscriptionHandlers_UpdatePlan_Handler,
		},
		{
			MethodName: "ListCustomers",
			Handler:    _SubscriptionHandlers_ListCustomers_Handler,
		},
		{
			MethodName: "Customer",
			Handler:    _SubscriptionHandlers_Customer_Handler,
		},
		{
			MethodName: "AddCustomer",
			Handler:    _SubscriptionHandlers_AddCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _SubscriptionHandlers_UpdateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _SubscriptionHandlers_DeleteCustomer_Handler,
		},
		{
			MethodName: "ListChanges",
			Handler:    _SubscriptionHandlers_ListChanges_Handler,
		},
		{
			MethodName: "Change",
			Handler:    _SubscriptionHandlers_Change_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _SubscriptionHandlers_ListInvoices_Handler,
		},
		{
			MethodName: "Invoice",
			Handler:    _SubscriptionHandlers_Invoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription.proto",
}

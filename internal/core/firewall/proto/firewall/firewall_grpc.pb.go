// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// source: firewall.proto

package firewall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FirewallHandlers_IPAccess_FullMethodName               = "/firewall.FirewallHandlers/IPAccess"
	FirewallHandlers_UpdateFirewallListData_FullMethodName = "/firewall.FirewallHandlers/UpdateFirewallListData"
)

// FirewallHandlersClient is the client API for FirewallHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirewallHandlersClient interface {
	IPAccess(ctx context.Context, in *IPAccess_Request, opts ...grpc.CallOption) (*IPAccess_Response, error)
	UpdateFirewallListData(ctx context.Context, in *UpdateFirewallListData_Request, opts ...grpc.CallOption) (*UpdateFirewallListData_Response, error)
}

type firewallHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewFirewallHandlersClient(cc grpc.ClientConnInterface) FirewallHandlersClient {
	return &firewallHandlersClient{cc}
}

func (c *firewallHandlersClient) IPAccess(ctx context.Context, in *IPAccess_Request, opts ...grpc.CallOption) (*IPAccess_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAccess_Response)
	err := c.cc.Invoke(ctx, FirewallHandlers_IPAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallHandlersClient) UpdateFirewallListData(ctx context.Context, in *UpdateFirewallListData_Request, opts ...grpc.CallOption) (*UpdateFirewallListData_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFirewallListData_Response)
	err := c.cc.Invoke(ctx, FirewallHandlers_UpdateFirewallListData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirewallHandlersServer is the server API for FirewallHandlers service.
// All implementations must embed UnimplementedFirewallHandlersServer
// for forward compatibility.
type FirewallHandlersServer interface {
	IPAccess(context.Context, *IPAccess_Request) (*IPAccess_Response, error)
	UpdateFirewallListData(context.Context, *UpdateFirewallListData_Request) (*UpdateFirewallListData_Response, error)
	mustEmbedUnimplementedFirewallHandlersServer()
}

// UnimplementedFirewallHandlersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFirewallHandlersServer struct{}

func (UnimplementedFirewallHandlersServer) IPAccess(context.Context, *IPAccess_Request) (*IPAccess_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPAccess not implemented")
}
func (UnimplementedFirewallHandlersServer) UpdateFirewallListData(context.Context, *UpdateFirewallListData_Request) (*UpdateFirewallListData_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirewallListData not implemented")
}
func (UnimplementedFirewallHandlersServer) mustEmbedUnimplementedFirewallHandlersServer() {}
func (UnimplementedFirewallHandlersServer) testEmbeddedByValue()                          {}

// UnsafeFirewallHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirewallHandlersServer will
// result in compilation errors.
type UnsafeFirewallHandlersServer interface {
	mustEmbedUnimplementedFirewallHandlersServer()
}

func RegisterFirewallHandlersServer(s grpc.ServiceRegistrar, srv FirewallHandlersServer) {
	// If the following call pancis, it indicates UnimplementedFirewallHandlersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FirewallHandlers_ServiceDesc, srv)
}

func _FirewallHandlers_IPAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAccess_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).IPAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirewallHandlers_IPAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).IPAccess(ctx, req.(*IPAccess_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallHandlers_UpdateFirewallListData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirewallListData_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallHandlersServer).UpdateFirewallListData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirewallHandlers_UpdateFirewallListData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallHandlersServer).UpdateFirewallListData(ctx, req.(*UpdateFirewallListData_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FirewallHandlers_ServiceDesc is the grpc.ServiceDesc for FirewallHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirewallHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "firewall.FirewallHandlers",
	HandlerType: (*FirewallHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPAccess",
			Handler:    _FirewallHandlers_IPAccess_Handler,
		},
		{
			MethodName: "UpdateFirewallListData",
			Handler:    _FirewallHandlers_UpdateFirewallListData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "firewall.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentHandlers_Auth_FullMethodName      = "/agent.AgentHandlers/Auth"
	AgentHandlers_AddScheme_FullMethodName = "/agent.AgentHandlers/AddScheme"
)

// AgentHandlersClient is the client API for AgentHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentHandlersClient interface {
	Auth(ctx context.Context, in *Auth_Request, opts ...grpc.CallOption) (*Auth_Response, error)
	// Agent section
	AddScheme(ctx context.Context, in *AddScheme_Request, opts ...grpc.CallOption) (*AddScheme_Response, error)
}

type agentHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentHandlersClient(cc grpc.ClientConnInterface) AgentHandlersClient {
	return &agentHandlersClient{cc}
}

func (c *agentHandlersClient) Auth(ctx context.Context, in *Auth_Request, opts ...grpc.CallOption) (*Auth_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Response)
	err := c.cc.Invoke(ctx, AgentHandlers_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHandlersClient) AddScheme(ctx context.Context, in *AddScheme_Request, opts ...grpc.CallOption) (*AddScheme_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddScheme_Response)
	err := c.cc.Invoke(ctx, AgentHandlers_AddScheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentHandlersServer is the server API for AgentHandlers service.
// All implementations must embed UnimplementedAgentHandlersServer
// for forward compatibility.
type AgentHandlersServer interface {
	Auth(context.Context, *Auth_Request) (*Auth_Response, error)
	// Agent section
	AddScheme(context.Context, *AddScheme_Request) (*AddScheme_Response, error)
	mustEmbedUnimplementedAgentHandlersServer()
}

// UnimplementedAgentHandlersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentHandlersServer struct{}

func (UnimplementedAgentHandlersServer) Auth(context.Context, *Auth_Request) (*Auth_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAgentHandlersServer) AddScheme(context.Context, *AddScheme_Request) (*AddScheme_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScheme not implemented")
}
func (UnimplementedAgentHandlersServer) mustEmbedUnimplementedAgentHandlersServer() {}
func (UnimplementedAgentHandlersServer) testEmbeddedByValue()                       {}

// UnsafeAgentHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentHandlersServer will
// result in compilation errors.
type UnsafeAgentHandlersServer interface {
	mustEmbedUnimplementedAgentHandlersServer()
}

func RegisterAgentHandlersServer(s grpc.ServiceRegistrar, srv AgentHandlersServer) {
	// If the following call pancis, it indicates UnimplementedAgentHandlersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentHandlers_ServiceDesc, srv)
}

func _AgentHandlers_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHandlersServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHandlers_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHandlersServer).Auth(ctx, req.(*Auth_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHandlers_AddScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScheme_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHandlersServer).AddScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHandlers_AddScheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHandlersServer).AddScheme(ctx, req.(*AddScheme_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentHandlers_ServiceDesc is the grpc.ServiceDesc for AgentHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentHandlers",
	HandlerType: (*AgentHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AgentHandlers_Auth_Handler,
		},
		{
			MethodName: "AddScheme",
			Handler:    _AgentHandlers_AddScheme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

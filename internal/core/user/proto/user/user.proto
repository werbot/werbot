syntax = "proto3";

package user;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "pkg/utils/protoutils/ghoster/proto/ghoster.proto";

option go_package = "github.com/werbot/werbot/internal/core/user/proto/user";

service UserHandlers {
  // User section
  rpc Users(Users.Request) returns (Users.Response) {}
  rpc User(User.Request) returns (User.Response) {}

  rpc AddUser(AddUser.Request) returns (AddUser.Response) {}
  rpc UpdateUser(UpdateUser.Request) returns (UpdateUser.Response) {}
  rpc DeleteUser(DeleteUser.Request) returns (DeleteUser.Response) {}

  rpc UpdatePassword(UpdatePassword.Request) returns (UpdatePassword.Response) {}
}

enum Role {
  role_unspecified = 0;
  user = 1;
  manager = 2;
  admin = 3;
}

// rpc Users
message Users {
  message Request {
    bool is_admin = 1; // @gotags: json:"-"

    int32 limit = 4;
    int32 offset = 5;
    string sort_by = 6; // @gotags: json:"-"
  }

  message Response {
    int32 total = 1;
    repeated User.Response users = 2;
  }
}

// rpc User
message User {
  message Request {
    bool is_admin = 1; // @gotags: json:"-"

    string user_id = 2 [(buf.validate.field).string.uuid = true]; // @gotags: json:"-"
  }

  message Response {
    string user_id = 1;
    string alias = 2;
    string name = 3;
    string surname = 4;
    string email = 5;
    bool active = 6;
    bool confirmed = 7;
    Role role = 8 [(ghoster.secret) = true];
    string password = 9 [(ghoster.secret) = true];
    google.protobuf.Timestamp locked_at = 10 [(ghoster.secret) = true];
    google.protobuf.Timestamp archived_at = 11 [(ghoster.secret) = true];
    google.protobuf.Timestamp updated_at = 12 [(ghoster.secret) = true];
    google.protobuf.Timestamp created_at = 13;

    int32 schemes_count = 50;
    int32 projects_count = 51;
    int32 keys_count = 52;
  }
}
// -----------------------------------------------------

// rpc AddUser
message AddUser {
  message Request {
    bool is_admin = 1; // @gotags: json:"-"

    string alias = 2 [(buf.validate.field).string = { pattern: '^[a-z0-9]+$' min_len: 3 max_len: 32 }, (buf.validate.field).required = true];
    string email = 3 [(buf.validate.field).cel = { id: "valid_email" message: "must be a valid email" expression: "this.isEmail()" }, (buf.validate.field).required = true];
    string name = 4 [(buf.validate.field).string = { min_len: 3 max_len: 32 }, (buf.validate.field).required = true];
    string surname = 5 [(buf.validate.field).string = { min_len: 3 max_len: 32 }, (buf.validate.field).required = true];
    bool active = 6;
    bool confirmed = 7;
    string password = 8 [(buf.validate.field).string = { min_len: 8 max_len: 32 }, (buf.validate.field).required = true, (ghoster.secret) = true];
  }

  message Response {
    string user_id = 1;
  }
}
// -----------------------------------------------------

// rpc UpdateUser
message UpdateUser {
  message Request {
    bool is_admin = 1; // @gotags: json:"-"

    string user_id = 2 [(buf.validate.field).string.uuid = true]; // @gotags: json:"-"
    oneof setting {
      option (buf.validate.oneof).required = true;
      string name = 3 [(buf.validate.field).string = { min_len: 3 max_len: 32 }];
      string surname = 4 [(buf.validate.field).string = { min_len: 3 max_len: 32 }];

      // use only for admin
      string alias = 5 [(buf.validate.field).string = { pattern: '^[a-z0-9]+$' min_len: 3 max_len: 32 }, (buf.validate.field).ignore_empty = true];
      string email = 6 [
        (buf.validate.field).cel = { id: "valid_email" message: "must be a valid email" expression: "this.isEmail()" }
      ];
      bool active = 7;
      bool confirmed = 8;
      bool archived = 9;
    }
  }

  message Response {}
}
// -----------------------------------------------------

// rpc DeleteUser
message DeleteUser {
  message Request {
    string user_id = 1 [(buf.validate.field).string.uuid = true]; // @gotags: json:"-"
    oneof request {
      option (buf.validate.oneof).required = true;
      string password = 2 [(buf.validate.field).string = { min_len: 8 max_len: 32 }, (ghoster.secret) = true];
      string token = 3 [(buf.validate.field).string.uuid = true, (buf.validate.field).ignore_empty = true];
    }
  }

  message Response {}
}
// -----------------------------------------------------

// rpc UpdatePassword
message UpdatePassword {
  message Request {
    string user_id = 1 [(buf.validate.field).string.uuid = true]; // @gotags: json:"-"

    string old_password = 2 [(buf.validate.field).string = { min_len: 8 max_len: 32 }, (buf.validate.field).required = true, (ghoster.secret) = true];
    string new_password = 3 [(buf.validate.field).string = { min_len: 8 max_len: 32 }, (buf.validate.field).required = true, (ghoster.secret) = true];
  }

  message Response {
    string message = 1;
  }
}
// -----------------------------------------------------

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// source: profile.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileHandlers_SignIn_FullMethodName           = "/profile.ProfileHandlers/SignIn"
	ProfileHandlers_ResetPassword_FullMethodName    = "/profile.ProfileHandlers/ResetPassword"
	ProfileHandlers_Profiles_FullMethodName         = "/profile.ProfileHandlers/Profiles"
	ProfileHandlers_Profile_FullMethodName          = "/profile.ProfileHandlers/Profile"
	ProfileHandlers_AddProfile_FullMethodName       = "/profile.ProfileHandlers/AddProfile"
	ProfileHandlers_UpdateProfile_FullMethodName    = "/profile.ProfileHandlers/UpdateProfile"
	ProfileHandlers_DeleteProfile_FullMethodName    = "/profile.ProfileHandlers/DeleteProfile"
	ProfileHandlers_UpdatePassword_FullMethodName   = "/profile.ProfileHandlers/UpdatePassword"
	ProfileHandlers_ProfileIDByLogin_FullMethodName = "/profile.ProfileHandlers/ProfileIDByLogin"
	ProfileHandlers_UpdateStatus_FullMethodName     = "/profile.ProfileHandlers/UpdateStatus"
)

// ProfileHandlersClient is the client API for ProfileHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileHandlersClient interface {
	// Auth section
	SignIn(ctx context.Context, in *SignIn_Request, opts ...grpc.CallOption) (*Profile_Response, error)
	ResetPassword(ctx context.Context, in *ResetPassword_Request, opts ...grpc.CallOption) (*ResetPassword_Response, error)
	// Profile section
	Profiles(ctx context.Context, in *Profiles_Request, opts ...grpc.CallOption) (*Profiles_Response, error)
	Profile(ctx context.Context, in *Profile_Request, opts ...grpc.CallOption) (*Profile_Response, error)
	AddProfile(ctx context.Context, in *AddProfile_Request, opts ...grpc.CallOption) (*AddProfile_Response, error)
	UpdateProfile(ctx context.Context, in *UpdateProfile_Request, opts ...grpc.CallOption) (*UpdateProfile_Response, error)
	DeleteProfile(ctx context.Context, in *DeleteProfile_Request, opts ...grpc.CallOption) (*DeleteProfile_Response, error)
	UpdatePassword(ctx context.Context, in *UpdatePassword_Request, opts ...grpc.CallOption) (*UpdatePassword_Response, error)
	// Tools
	ProfileIDByLogin(ctx context.Context, in *ProfileIDByLogin_Request, opts ...grpc.CallOption) (*ProfileIDByLogin_Response, error)
	UpdateStatus(ctx context.Context, in *UpdateStatus_Request, opts ...grpc.CallOption) (*UpdateStatus_Response, error)
}

type profileHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileHandlersClient(cc grpc.ClientConnInterface) ProfileHandlersClient {
	return &profileHandlersClient{cc}
}

func (c *profileHandlersClient) SignIn(ctx context.Context, in *SignIn_Request, opts ...grpc.CallOption) (*Profile_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) ResetPassword(ctx context.Context, in *ResetPassword_Request, opts ...grpc.CallOption) (*ResetPassword_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPassword_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) Profiles(ctx context.Context, in *Profiles_Request, opts ...grpc.CallOption) (*Profiles_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profiles_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_Profiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) Profile(ctx context.Context, in *Profile_Request, opts ...grpc.CallOption) (*Profile_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_Profile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) AddProfile(ctx context.Context, in *AddProfile_Request, opts ...grpc.CallOption) (*AddProfile_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProfile_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_AddProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) UpdateProfile(ctx context.Context, in *UpdateProfile_Request, opts ...grpc.CallOption) (*UpdateProfile_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfile_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) DeleteProfile(ctx context.Context, in *DeleteProfile_Request, opts ...grpc.CallOption) (*DeleteProfile_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProfile_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_DeleteProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) UpdatePassword(ctx context.Context, in *UpdatePassword_Request, opts ...grpc.CallOption) (*UpdatePassword_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePassword_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) ProfileIDByLogin(ctx context.Context, in *ProfileIDByLogin_Request, opts ...grpc.CallOption) (*ProfileIDByLogin_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileIDByLogin_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_ProfileIDByLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileHandlersClient) UpdateStatus(ctx context.Context, in *UpdateStatus_Request, opts ...grpc.CallOption) (*UpdateStatus_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatus_Response)
	err := c.cc.Invoke(ctx, ProfileHandlers_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileHandlersServer is the server API for ProfileHandlers service.
// All implementations must embed UnimplementedProfileHandlersServer
// for forward compatibility.
type ProfileHandlersServer interface {
	// Auth section
	SignIn(context.Context, *SignIn_Request) (*Profile_Response, error)
	ResetPassword(context.Context, *ResetPassword_Request) (*ResetPassword_Response, error)
	// Profile section
	Profiles(context.Context, *Profiles_Request) (*Profiles_Response, error)
	Profile(context.Context, *Profile_Request) (*Profile_Response, error)
	AddProfile(context.Context, *AddProfile_Request) (*AddProfile_Response, error)
	UpdateProfile(context.Context, *UpdateProfile_Request) (*UpdateProfile_Response, error)
	DeleteProfile(context.Context, *DeleteProfile_Request) (*DeleteProfile_Response, error)
	UpdatePassword(context.Context, *UpdatePassword_Request) (*UpdatePassword_Response, error)
	// Tools
	ProfileIDByLogin(context.Context, *ProfileIDByLogin_Request) (*ProfileIDByLogin_Response, error)
	UpdateStatus(context.Context, *UpdateStatus_Request) (*UpdateStatus_Response, error)
	mustEmbedUnimplementedProfileHandlersServer()
}

// UnimplementedProfileHandlersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileHandlersServer struct{}

func (UnimplementedProfileHandlersServer) SignIn(context.Context, *SignIn_Request) (*Profile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedProfileHandlersServer) ResetPassword(context.Context, *ResetPassword_Request) (*ResetPassword_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedProfileHandlersServer) Profiles(context.Context, *Profiles_Request) (*Profiles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profiles not implemented")
}
func (UnimplementedProfileHandlersServer) Profile(context.Context, *Profile_Request) (*Profile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedProfileHandlersServer) AddProfile(context.Context, *AddProfile_Request) (*AddProfile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (UnimplementedProfileHandlersServer) UpdateProfile(context.Context, *UpdateProfile_Request) (*UpdateProfile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileHandlersServer) DeleteProfile(context.Context, *DeleteProfile_Request) (*DeleteProfile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedProfileHandlersServer) UpdatePassword(context.Context, *UpdatePassword_Request) (*UpdatePassword_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedProfileHandlersServer) ProfileIDByLogin(context.Context, *ProfileIDByLogin_Request) (*ProfileIDByLogin_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileIDByLogin not implemented")
}
func (UnimplementedProfileHandlersServer) UpdateStatus(context.Context, *UpdateStatus_Request) (*UpdateStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedProfileHandlersServer) mustEmbedUnimplementedProfileHandlersServer() {}
func (UnimplementedProfileHandlersServer) testEmbeddedByValue()                         {}

// UnsafeProfileHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileHandlersServer will
// result in compilation errors.
type UnsafeProfileHandlersServer interface {
	mustEmbedUnimplementedProfileHandlersServer()
}

func RegisterProfileHandlersServer(s grpc.ServiceRegistrar, srv ProfileHandlersServer) {
	// If the following call pancis, it indicates UnimplementedProfileHandlersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileHandlers_ServiceDesc, srv)
}

func _ProfileHandlers_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignIn_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).SignIn(ctx, req.(*SignIn_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPassword_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).ResetPassword(ctx, req.(*ResetPassword_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_Profiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profiles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).Profiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_Profiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).Profiles(ctx, req.(*Profiles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_Profile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).Profile(ctx, req.(*Profile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProfile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_AddProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).AddProfile(ctx, req.(*AddProfile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).UpdateProfile(ctx, req.(*UpdateProfile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).DeleteProfile(ctx, req.(*DeleteProfile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePassword_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).UpdatePassword(ctx, req.(*UpdatePassword_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_ProfileIDByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIDByLogin_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).ProfileIDByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_ProfileIDByLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).ProfileIDByLogin(ctx, req.(*ProfileIDByLogin_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileHandlers_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileHandlersServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileHandlers_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileHandlersServer).UpdateStatus(ctx, req.(*UpdateStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileHandlers_ServiceDesc is the grpc.ServiceDesc for ProfileHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileHandlers",
	HandlerType: (*ProfileHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _ProfileHandlers_SignIn_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _ProfileHandlers_ResetPassword_Handler,
		},
		{
			MethodName: "Profiles",
			Handler:    _ProfileHandlers_Profiles_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _ProfileHandlers_Profile_Handler,
		},
		{
			MethodName: "AddProfile",
			Handler:    _ProfileHandlers_AddProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileHandlers_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ProfileHandlers_DeleteProfile_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _ProfileHandlers_UpdatePassword_Handler,
		},
		{
			MethodName: "ProfileIDByLogin",
			Handler:    _ProfileHandlers_ProfileIDByLogin_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ProfileHandlers_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}

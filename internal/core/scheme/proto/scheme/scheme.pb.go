// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheme.proto

package scheme

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	firewall "github.com/werbot/werbot/internal/core/firewall/proto/firewall"
	access "github.com/werbot/werbot/internal/core/scheme/proto/access"
	auth "github.com/werbot/werbot/internal/core/scheme/proto/auth"
	_ "github.com/werbot/werbot/pkg/utils/protoutils/ghoster/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Address int32

const (
	Address_address_unspecified Address = 0
	Address_IPv4                Address = 1
	Address_IPv6                Address = 2
	Address_Hostname            Address = 3
)

// Enum value maps for Address.
var (
	Address_name = map[int32]string{
		0: "address_unspecified",
		1: "IPv4",
		2: "IPv6",
		3: "Hostname",
	}
	Address_value = map[string]int32{
		"address_unspecified": 0,
		"IPv4":                1,
		"IPv6":                2,
		"Hostname":            3,
	}
)

func (x Address) Enum() *Address {
	p := new(Address)
	*p = x
	return p
}

func (x Address) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Address) Descriptor() protoreflect.EnumDescriptor {
	return file_scheme_proto_enumTypes[0].Descriptor()
}

func (Address) Type() protoreflect.EnumType {
	return &file_scheme_proto_enumTypes[0]
}

func (x Address) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Address.Descriptor instead.
func (Address) EnumDescriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{0}
}

type Type int32

const (
	Type_type_unspecified Type = 0
	Type_healthcheck      Type = 1
	Type_shell            Type = 2
	Type_bastion          Type = 3
	Type_invite           Type = 4
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "type_unspecified",
		1: "healthcheck",
		2: "shell",
		3: "bastion",
		4: "invite",
	}
	Type_value = map[string]int32{
		"type_unspecified": 0,
		"healthcheck":      1,
		"shell":            2,
		"bastion":          3,
		"invite":           4,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_scheme_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_scheme_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{1}
}

// rpc Schemes
type Schemes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Schemes) Reset() {
	*x = Schemes{}
	mi := &file_scheme_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schemes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemes) ProtoMessage() {}

func (x *Schemes) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemes.ProtoReflect.Descriptor instead.
func (*Schemes) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{0}
}

// rpc Scheme
type Scheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Scheme) Reset() {
	*x = Scheme{}
	mi := &file_scheme_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme) ProtoMessage() {}

func (x *Scheme) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme.ProtoReflect.Descriptor instead.
func (*Scheme) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{1}
}

// rpc AddScheme
type AddScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddScheme) Reset() {
	*x = AddScheme{}
	mi := &file_scheme_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScheme) ProtoMessage() {}

func (x *AddScheme) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScheme.ProtoReflect.Descriptor instead.
func (*AddScheme) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{2}
}

// rpc UpdateScheme
type UpdateScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheme) Reset() {
	*x = UpdateScheme{}
	mi := &file_scheme_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheme) ProtoMessage() {}

func (x *UpdateScheme) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheme.ProtoReflect.Descriptor instead.
func (*UpdateScheme) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{3}
}

// rpc DeleteScheme
type DeleteScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteScheme) Reset() {
	*x = DeleteScheme{}
	mi := &file_scheme_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheme) ProtoMessage() {}

func (x *DeleteScheme) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheme.ProtoReflect.Descriptor instead.
func (*DeleteScheme) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{4}
}

// rpc SchemeAccess
type SchemeAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SchemeAccess) Reset() {
	*x = SchemeAccess{}
	mi := &file_scheme_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeAccess) ProtoMessage() {}

func (x *SchemeAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeAccess.ProtoReflect.Descriptor instead.
func (*SchemeAccess) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{5}
}

// rpc SchemeActivity
type SchemeActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SchemeActivity) Reset() {
	*x = SchemeActivity{}
	mi := &file_scheme_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeActivity) ProtoMessage() {}

func (x *SchemeActivity) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeActivity.ProtoReflect.Descriptor instead.
func (*SchemeActivity) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{6}
}

// rpc UpdateSchemeActivity
type UpdateSchemeActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSchemeActivity) Reset() {
	*x = UpdateSchemeActivity{}
	mi := &file_scheme_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSchemeActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemeActivity) ProtoMessage() {}

func (x *UpdateSchemeActivity) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemeActivity.ProtoReflect.Descriptor instead.
func (*UpdateSchemeActivity) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{7}
}

// rpc SchemeFirewall
type SchemeFirewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SchemeFirewall) Reset() {
	*x = SchemeFirewall{}
	mi := &file_scheme_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeFirewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeFirewall) ProtoMessage() {}

func (x *SchemeFirewall) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeFirewall.ProtoReflect.Descriptor instead.
func (*SchemeFirewall) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{8}
}

// rpc AddSchemeFirewall
type AddSchemeFirewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddSchemeFirewall) Reset() {
	*x = AddSchemeFirewall{}
	mi := &file_scheme_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSchemeFirewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSchemeFirewall) ProtoMessage() {}

func (x *AddSchemeFirewall) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSchemeFirewall.ProtoReflect.Descriptor instead.
func (*AddSchemeFirewall) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{9}
}

// rpc UpdateSchemeFirewall
type UpdateSchemeFirewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSchemeFirewall) Reset() {
	*x = UpdateSchemeFirewall{}
	mi := &file_scheme_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSchemeFirewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemeFirewall) ProtoMessage() {}

func (x *UpdateSchemeFirewall) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemeFirewall.ProtoReflect.Descriptor instead.
func (*UpdateSchemeFirewall) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{10}
}

// rpc DeleteSchemeFirewall
type DeleteSchemeFirewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSchemeFirewall) Reset() {
	*x = DeleteSchemeFirewall{}
	mi := &file_scheme_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchemeFirewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemeFirewall) ProtoMessage() {}

func (x *DeleteSchemeFirewall) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemeFirewall.ProtoReflect.Descriptor instead.
func (*DeleteSchemeFirewall) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{11}
}

// rpc ProfileSchemes
type ProfileSchemes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProfileSchemes) Reset() {
	*x = ProfileSchemes{}
	mi := &file_scheme_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileSchemes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileSchemes) ProtoMessage() {}

func (x *ProfileSchemes) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileSchemes.ProtoReflect.Descriptor instead.
func (*ProfileSchemes) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{12}
}

// rpc SystemSchemesByAlias
type SystemSchemesByAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemSchemesByAlias) Reset() {
	*x = SystemSchemesByAlias{}
	mi := &file_scheme_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemSchemesByAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSchemesByAlias) ProtoMessage() {}

func (x *SystemSchemesByAlias) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSchemesByAlias.ProtoReflect.Descriptor instead.
func (*SystemSchemesByAlias) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{13}
}

// SystemSchemeAccess
type SystemSchemeAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemSchemeAccess) Reset() {
	*x = SystemSchemeAccess{}
	mi := &file_scheme_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemSchemeAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSchemeAccess) ProtoMessage() {}

func (x *SystemSchemeAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSchemeAccess.ProtoReflect.Descriptor instead.
func (*SystemSchemeAccess) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{14}
}

// rpc SystemHostKey
type SystemHostKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemHostKey) Reset() {
	*x = SystemHostKey{}
	mi := &file_scheme_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemHostKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemHostKey) ProtoMessage() {}

func (x *SystemHostKey) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemHostKey.ProtoReflect.Descriptor instead.
func (*SystemHostKey) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{15}
}

// rpc SystemUpdateHostKey
type SystemUpdateHostKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemUpdateHostKey) Reset() {
	*x = SystemUpdateHostKey{}
	mi := &file_scheme_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemUpdateHostKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUpdateHostKey) ProtoMessage() {}

func (x *SystemUpdateHostKey) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUpdateHostKey.ProtoReflect.Descriptor instead.
func (*SystemUpdateHostKey) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{16}
}

type Schemes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdmin    bool              `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"-"`       
	OwnerId    string            `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId  string            `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeType access.SchemeType `protobuf:"varint,4,opt,name=scheme_type,json=schemeType,proto3,enum=access.SchemeType" json:"scheme_type,omitempty"`
	Limit      int32             `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32             `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	SortBy     string            `protobuf:"bytes,7,opt,name=sort_by,json=sortBy,proto3" json:"-"`  
}

func (x *Schemes_Request) Reset() {
	*x = Schemes_Request{}
	mi := &file_scheme_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schemes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemes_Request) ProtoMessage() {}

func (x *Schemes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemes_Request.ProtoReflect.Descriptor instead.
func (*Schemes_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Schemes_Request) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *Schemes_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Schemes_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Schemes_Request) GetSchemeType() access.SchemeType {
	if x != nil {
		return x.SchemeType
	}
	return access.SchemeType(0)
}

func (x *Schemes_Request) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Schemes_Request) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Schemes_Request) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type Schemes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Schemes []*Scheme_Response `protobuf:"bytes,2,rep,name=schemes,proto3" json:"schemes,omitempty"`
}

func (x *Schemes_Response) Reset() {
	*x = Schemes_Response{}
	mi := &file_scheme_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schemes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemes_Response) ProtoMessage() {}

func (x *Schemes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemes_Response.ProtoReflect.Descriptor instead.
func (*Schemes_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Schemes_Response) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Schemes_Response) GetSchemes() []*Scheme_Response {
	if x != nil {
		return x.Schemes
	}
	return nil
}

type Scheme_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdmin   bool   `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"-"`       
	OwnerId   string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,4,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
}

func (x *Scheme_Request) Reset() {
	*x = Scheme_Request{}
	mi := &file_scheme_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scheme_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme_Request) ProtoMessage() {}

func (x *Scheme_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme_Request.ProtoReflect.Descriptor instead.
func (*Scheme_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Scheme_Request) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *Scheme_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Scheme_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Scheme_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

type Scheme_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeId     string                 `protobuf:"bytes,1,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
	ProjectId    string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OwnerId      string                 `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Address      string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Alias        string                 `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	Title        string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description  string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Audit        bool                   `protobuf:"varint,8,opt,name=audit,proto3" json:"audit,omitempty"`
	Active       bool                   `protobuf:"varint,9,opt,name=active,proto3" json:"active,omitempty"`
	Online       bool                   `protobuf:"varint,10,opt,name=online,proto3" json:"online,omitempty"`
	AuthMethod   auth.AuthMethod        `protobuf:"varint,11,opt,name=auth_method,json=authMethod,proto3,enum=auth.AuthMethod" json:"auth_method,omitempty"`
	SchemeType   access.SchemeType      `protobuf:"varint,12,opt,name=scheme_type,json=schemeType,proto3,enum=access.SchemeType" json:"scheme_type,omitempty"`
	CountMembers int32                  `protobuf:"varint,13,opt,name=count_members,json=countMembers,proto3" json:"count_members,omitempty"`
	LockedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=locked_at,json=lockedAt,proto3" json:"locked_at,omitempty"`
	ArchivedAt   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=archived_at,json=archivedAt,proto3" json:"archived_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Scheme_Response) Reset() {
	*x = Scheme_Response{}
	mi := &file_scheme_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scheme_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme_Response) ProtoMessage() {}

func (x *Scheme_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme_Response.ProtoReflect.Descriptor instead.
func (*Scheme_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Scheme_Response) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *Scheme_Response) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Scheme_Response) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Scheme_Response) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Scheme_Response) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Scheme_Response) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Scheme_Response) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Scheme_Response) GetAudit() bool {
	if x != nil {
		return x.Audit
	}
	return false
}

func (x *Scheme_Response) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Scheme_Response) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Scheme_Response) GetAuthMethod() auth.AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return auth.AuthMethod(0)
}

func (x *Scheme_Response) GetSchemeType() access.SchemeType {
	if x != nil {
		return x.SchemeType
	}
	return access.SchemeType(0)
}

func (x *Scheme_Response) GetCountMembers() int32 {
	if x != nil {
		return x.CountMembers
	}
	return 0
}

func (x *Scheme_Response) GetLockedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LockedAt
	}
	return nil
}

func (x *Scheme_Response) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Scheme_Response) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Scheme_Response) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type AddScheme_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId     string               `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId   string               `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	Title       string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Audit       bool                 `protobuf:"varint,4,opt,name=audit,proto3" json:"audit,omitempty"`
	Active      bool                 `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Description string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Scheme      *access.AccessScheme `protobuf:"bytes,7,opt,name=scheme,proto3" json:"scheme,omitempty"`
}

func (x *AddScheme_Request) Reset() {
	*x = AddScheme_Request{}
	mi := &file_scheme_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddScheme_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScheme_Request) ProtoMessage() {}

func (x *AddScheme_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScheme_Request.ProtoReflect.Descriptor instead.
func (*AddScheme_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AddScheme_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *AddScheme_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddScheme_Request) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddScheme_Request) GetAudit() bool {
	if x != nil {
		return x.Audit
	}
	return false
}

func (x *AddScheme_Request) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *AddScheme_Request) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddScheme_Request) GetScheme() *access.AccessScheme {
	if x != nil {
		return x.Scheme
	}
	return nil
}

type AddScheme_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeId string `protobuf:"bytes,1,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
}

func (x *AddScheme_Response) Reset() {
	*x = AddScheme_Response{}
	mi := &file_scheme_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddScheme_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScheme_Response) ProtoMessage() {}

func (x *AddScheme_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScheme_Response.ProtoReflect.Descriptor instead.
func (*AddScheme_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{2, 1}
}

func (x *AddScheme_Response) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

type UpdateScheme_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
	// Types that are assignable to Setting:
	//
	//	*UpdateScheme_Request_Title
	//	*UpdateScheme_Request_Audit
	//	*UpdateScheme_Request_Active
	//	*UpdateScheme_Request_Online
	//	*UpdateScheme_Request_Description
	//	*UpdateScheme_Request_Scheme
	Setting isUpdateScheme_Request_Setting `protobuf_oneof:"setting"`
}

func (x *UpdateScheme_Request) Reset() {
	*x = UpdateScheme_Request{}
	mi := &file_scheme_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheme_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheme_Request) ProtoMessage() {}

func (x *UpdateScheme_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheme_Request.ProtoReflect.Descriptor instead.
func (*UpdateScheme_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{3, 0}
}

func (x *UpdateScheme_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *UpdateScheme_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateScheme_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (m *UpdateScheme_Request) GetSetting() isUpdateScheme_Request_Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (x *UpdateScheme_Request) GetTitle() string {
	if x, ok := x.GetSetting().(*UpdateScheme_Request_Title); ok {
		return x.Title
	}
	return ""
}

func (x *UpdateScheme_Request) GetAudit() bool {
	if x, ok := x.GetSetting().(*UpdateScheme_Request_Audit); ok {
		return x.Audit
	}
	return false
}

func (x *UpdateScheme_Request) GetActive() bool {
	if x, ok := x.GetSetting().(*UpdateScheme_Request_Active); ok {
		return x.Active
	}
	return false
}

func (x *UpdateScheme_Request) GetOnline() bool {
	if x, ok := x.GetSetting().(*UpdateScheme_Request_Online); ok {
		return x.Online
	}
	return false
}

func (x *UpdateScheme_Request) GetDescription() string {
	if x, ok := x.GetSetting().(*UpdateScheme_Request_Description); ok {
		return x.Description
	}
	return ""
}

func (x *UpdateScheme_Request) GetScheme() *access.AccessScheme {
	if x, ok := x.GetSetting().(*UpdateScheme_Request_Scheme); ok {
		return x.Scheme
	}
	return nil
}

type isUpdateScheme_Request_Setting interface {
	isUpdateScheme_Request_Setting()
}

type UpdateScheme_Request_Title struct {
	Title string `protobuf:"bytes,4,opt,name=title,proto3,oneof"`
}

type UpdateScheme_Request_Audit struct {
	Audit bool `protobuf:"varint,5,opt,name=audit,proto3,oneof"`
}

type UpdateScheme_Request_Active struct {
	Active bool `protobuf:"varint,6,opt,name=active,proto3,oneof"`
}

type UpdateScheme_Request_Online struct {
	Online bool `protobuf:"varint,7,opt,name=online,proto3,oneof"`
}

type UpdateScheme_Request_Description struct {
	Description string `protobuf:"bytes,8,opt,name=description,proto3,oneof"`
}

type UpdateScheme_Request_Scheme struct {
	Scheme *access.AccessScheme `protobuf:"bytes,9,opt,name=scheme,proto3,oneof"`
}

func (*UpdateScheme_Request_Title) isUpdateScheme_Request_Setting() {}

func (*UpdateScheme_Request_Audit) isUpdateScheme_Request_Setting() {}

func (*UpdateScheme_Request_Active) isUpdateScheme_Request_Setting() {}

func (*UpdateScheme_Request_Online) isUpdateScheme_Request_Setting() {}

func (*UpdateScheme_Request_Description) isUpdateScheme_Request_Setting() {}

func (*UpdateScheme_Request_Scheme) isUpdateScheme_Request_Setting() {}

type UpdateScheme_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheme_Response) Reset() {
	*x = UpdateScheme_Response{}
	mi := &file_scheme_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheme_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheme_Response) ProtoMessage() {}

func (x *UpdateScheme_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheme_Response.ProtoReflect.Descriptor instead.
func (*UpdateScheme_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{3, 1}
}

type DeleteScheme_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
}

func (x *DeleteScheme_Request) Reset() {
	*x = DeleteScheme_Request{}
	mi := &file_scheme_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScheme_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheme_Request) ProtoMessage() {}

func (x *DeleteScheme_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheme_Request.ProtoReflect.Descriptor instead.
func (*DeleteScheme_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DeleteScheme_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *DeleteScheme_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteScheme_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

type DeleteScheme_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteScheme_Response) Reset() {
	*x = DeleteScheme_Response{}
	mi := &file_scheme_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScheme_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheme_Response) ProtoMessage() {}

func (x *DeleteScheme_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheme_Response.ProtoReflect.Descriptor instead.
func (*DeleteScheme_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{4, 1}
}

type SchemeAccess_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
	NoGhost   bool   `protobuf:"varint,99,opt,name=no_ghost,json=noGhost,proto3" json:"-"`      
}

func (x *SchemeAccess_Request) Reset() {
	*x = SchemeAccess_Request{}
	mi := &file_scheme_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeAccess_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeAccess_Request) ProtoMessage() {}

func (x *SchemeAccess_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeAccess_Request.ProtoReflect.Descriptor instead.
func (*SchemeAccess_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SchemeAccess_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *SchemeAccess_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SchemeAccess_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *SchemeAccess_Request) GetNoGhost() bool {
	if x != nil {
		return x.NoGhost
	}
	return false
}

type SchemeAccess_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme *access.AccessScheme `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
}

func (x *SchemeAccess_Response) Reset() {
	*x = SchemeAccess_Response{}
	mi := &file_scheme_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeAccess_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeAccess_Response) ProtoMessage() {}

func (x *SchemeAccess_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeAccess_Response.ProtoReflect.Descriptor instead.
func (*SchemeAccess_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SchemeAccess_Response) GetScheme() *access.AccessScheme {
	if x != nil {
		return x.Scheme
	}
	return nil
}

type SchemeActivity_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string                 `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SchemeActivity_Request) Reset() {
	*x = SchemeActivity_Request{}
	mi := &file_scheme_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeActivity_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeActivity_Request) ProtoMessage() {}

func (x *SchemeActivity_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeActivity_Request.ProtoReflect.Descriptor instead.
func (*SchemeActivity_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SchemeActivity_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *SchemeActivity_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SchemeActivity_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *SchemeActivity_Request) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SchemeActivity_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Period:
	//
	//	*SchemeActivity_Response_Hour
	//	*SchemeActivity_Response_Week
	Period isSchemeActivity_Response_Period `protobuf_oneof:"period"`
}

func (x *SchemeActivity_Response) Reset() {
	*x = SchemeActivity_Response{}
	mi := &file_scheme_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeActivity_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeActivity_Response) ProtoMessage() {}

func (x *SchemeActivity_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeActivity_Response.ProtoReflect.Descriptor instead.
func (*SchemeActivity_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{6, 1}
}

func (m *SchemeActivity_Response) GetPeriod() isSchemeActivity_Response_Period {
	if m != nil {
		return m.Period
	}
	return nil
}

func (x *SchemeActivity_Response) GetHour() bool {
	if x, ok := x.GetPeriod().(*SchemeActivity_Response_Hour); ok {
		return x.Hour
	}
	return false
}

func (x *SchemeActivity_Response) GetWeek() *SchemeActivity_Week {
	if x, ok := x.GetPeriod().(*SchemeActivity_Response_Week); ok {
		return x.Week
	}
	return nil
}

type isSchemeActivity_Response_Period interface {
	isSchemeActivity_Response_Period()
}

type SchemeActivity_Response_Hour struct {
	Hour bool `protobuf:"varint,1,opt,name=hour,proto3,oneof"`
}

type SchemeActivity_Response_Week struct {
	Week *SchemeActivity_Week `protobuf:"bytes,2,opt,name=week,proto3,oneof"`
}

func (*SchemeActivity_Response_Hour) isSchemeActivity_Response_Period() {}

func (*SchemeActivity_Response_Week) isSchemeActivity_Response_Period() {}

type SchemeActivity_Week struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mon []int32 `protobuf:"varint,1,rep,packed,name=mon,proto3" json:"mon,omitempty"`
	Tue []int32 `protobuf:"varint,2,rep,packed,name=tue,proto3" json:"tue,omitempty"`
	Wed []int32 `protobuf:"varint,3,rep,packed,name=wed,proto3" json:"wed,omitempty"`
	Thu []int32 `protobuf:"varint,4,rep,packed,name=thu,proto3" json:"thu,omitempty"`
	Fri []int32 `protobuf:"varint,5,rep,packed,name=fri,proto3" json:"fri,omitempty"`
	Sat []int32 `protobuf:"varint,6,rep,packed,name=sat,proto3" json:"sat,omitempty"`
	Sun []int32 `protobuf:"varint,7,rep,packed,name=sun,proto3" json:"sun,omitempty"`
}

func (x *SchemeActivity_Week) Reset() {
	*x = SchemeActivity_Week{}
	mi := &file_scheme_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeActivity_Week) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeActivity_Week) ProtoMessage() {}

func (x *SchemeActivity_Week) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeActivity_Week.ProtoReflect.Descriptor instead.
func (*SchemeActivity_Week) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{6, 2}
}

func (x *SchemeActivity_Week) GetMon() []int32 {
	if x != nil {
		return x.Mon
	}
	return nil
}

func (x *SchemeActivity_Week) GetTue() []int32 {
	if x != nil {
		return x.Tue
	}
	return nil
}

func (x *SchemeActivity_Week) GetWed() []int32 {
	if x != nil {
		return x.Wed
	}
	return nil
}

func (x *SchemeActivity_Week) GetThu() []int32 {
	if x != nil {
		return x.Thu
	}
	return nil
}

func (x *SchemeActivity_Week) GetFri() []int32 {
	if x != nil {
		return x.Fri
	}
	return nil
}

func (x *SchemeActivity_Week) GetSat() []int32 {
	if x != nil {
		return x.Sat
	}
	return nil
}

func (x *SchemeActivity_Week) GetSun() []int32 {
	if x != nil {
		return x.Sun
	}
	return nil
}

type UpdateSchemeActivity_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string               `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string               `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string               `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
	Activity  *SchemeActivity_Week `protobuf:"bytes,4,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *UpdateSchemeActivity_Request) Reset() {
	*x = UpdateSchemeActivity_Request{}
	mi := &file_scheme_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSchemeActivity_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemeActivity_Request) ProtoMessage() {}

func (x *UpdateSchemeActivity_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemeActivity_Request.ProtoReflect.Descriptor instead.
func (*UpdateSchemeActivity_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UpdateSchemeActivity_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *UpdateSchemeActivity_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateSchemeActivity_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *UpdateSchemeActivity_Request) GetActivity() *SchemeActivity_Week {
	if x != nil {
		return x.Activity
	}
	return nil
}

type UpdateSchemeActivity_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSchemeActivity_Response) Reset() {
	*x = UpdateSchemeActivity_Response{}
	mi := &file_scheme_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSchemeActivity_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemeActivity_Response) ProtoMessage() {}

func (x *UpdateSchemeActivity_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemeActivity_Response.ProtoReflect.Descriptor instead.
func (*UpdateSchemeActivity_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{7, 1}
}

type SchemeFirewall_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
}

func (x *SchemeFirewall_Request) Reset() {
	*x = SchemeFirewall_Request{}
	mi := &file_scheme_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeFirewall_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeFirewall_Request) ProtoMessage() {}

func (x *SchemeFirewall_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeFirewall_Request.ProtoReflect.Descriptor instead.
func (*SchemeFirewall_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SchemeFirewall_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *SchemeFirewall_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SchemeFirewall_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

type SchemeFirewall_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country *SchemeFirewall_Countries `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Network *SchemeFirewall_Networks  `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *SchemeFirewall_Response) Reset() {
	*x = SchemeFirewall_Response{}
	mi := &file_scheme_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeFirewall_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeFirewall_Response) ProtoMessage() {}

func (x *SchemeFirewall_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeFirewall_Response.ProtoReflect.Descriptor instead.
func (*SchemeFirewall_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{8, 1}
}

func (x *SchemeFirewall_Response) GetCountry() *SchemeFirewall_Countries {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *SchemeFirewall_Response) GetNetwork() *SchemeFirewall_Networks {
	if x != nil {
		return x.Network
	}
	return nil
}

type SchemeFirewall_Countries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WiteList bool                `protobuf:"varint,1,opt,name=wite_list,json=witeList,proto3" json:"wite_list,omitempty"`
	Total    int32               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List     []*firewall.Country `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SchemeFirewall_Countries) Reset() {
	*x = SchemeFirewall_Countries{}
	mi := &file_scheme_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeFirewall_Countries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeFirewall_Countries) ProtoMessage() {}

func (x *SchemeFirewall_Countries) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeFirewall_Countries.ProtoReflect.Descriptor instead.
func (*SchemeFirewall_Countries) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{8, 2}
}

func (x *SchemeFirewall_Countries) GetWiteList() bool {
	if x != nil {
		return x.WiteList
	}
	return false
}

func (x *SchemeFirewall_Countries) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SchemeFirewall_Countries) GetList() []*firewall.Country {
	if x != nil {
		return x.List
	}
	return nil
}

type SchemeFirewall_Networks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WiteList bool                `protobuf:"varint,1,opt,name=wite_list,json=witeList,proto3" json:"wite_list,omitempty"`
	Total    int32               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List     []*firewall.Network `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SchemeFirewall_Networks) Reset() {
	*x = SchemeFirewall_Networks{}
	mi := &file_scheme_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemeFirewall_Networks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeFirewall_Networks) ProtoMessage() {}

func (x *SchemeFirewall_Networks) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeFirewall_Networks.ProtoReflect.Descriptor instead.
func (*SchemeFirewall_Networks) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{8, 3}
}

func (x *SchemeFirewall_Networks) GetWiteList() bool {
	if x != nil {
		return x.WiteList
	}
	return false
}

func (x *SchemeFirewall_Networks) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SchemeFirewall_Networks) GetList() []*firewall.Network {
	if x != nil {
		return x.List
	}
	return nil
}

type AddSchemeFirewall_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
	// Types that are assignable to Record:
	//
	//	*AddSchemeFirewall_Request_Network
	//	*AddSchemeFirewall_Request_CountryCode
	Record isAddSchemeFirewall_Request_Record `protobuf_oneof:"record"`
}

func (x *AddSchemeFirewall_Request) Reset() {
	*x = AddSchemeFirewall_Request{}
	mi := &file_scheme_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSchemeFirewall_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSchemeFirewall_Request) ProtoMessage() {}

func (x *AddSchemeFirewall_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSchemeFirewall_Request.ProtoReflect.Descriptor instead.
func (*AddSchemeFirewall_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AddSchemeFirewall_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *AddSchemeFirewall_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddSchemeFirewall_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (m *AddSchemeFirewall_Request) GetRecord() isAddSchemeFirewall_Request_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (x *AddSchemeFirewall_Request) GetNetwork() string {
	if x, ok := x.GetRecord().(*AddSchemeFirewall_Request_Network); ok {
		return x.Network
	}
	return ""
}

func (x *AddSchemeFirewall_Request) GetCountryCode() string {
	if x, ok := x.GetRecord().(*AddSchemeFirewall_Request_CountryCode); ok {
		return x.CountryCode
	}
	return ""
}

type isAddSchemeFirewall_Request_Record interface {
	isAddSchemeFirewall_Request_Record()
}

type AddSchemeFirewall_Request_Network struct {
	Network string `protobuf:"bytes,4,opt,name=network,proto3,oneof"`
}

type AddSchemeFirewall_Request_CountryCode struct {
	CountryCode string `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3,oneof"`
}

func (*AddSchemeFirewall_Request_Network) isAddSchemeFirewall_Request_Record() {}

func (*AddSchemeFirewall_Request_CountryCode) isAddSchemeFirewall_Request_Record() {}

type AddSchemeFirewall_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Record:
	//
	//	*AddSchemeFirewall_Response_CountryId
	//	*AddSchemeFirewall_Response_NetworkId
	Record isAddSchemeFirewall_Response_Record `protobuf_oneof:"record"`
}

func (x *AddSchemeFirewall_Response) Reset() {
	*x = AddSchemeFirewall_Response{}
	mi := &file_scheme_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSchemeFirewall_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSchemeFirewall_Response) ProtoMessage() {}

func (x *AddSchemeFirewall_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSchemeFirewall_Response.ProtoReflect.Descriptor instead.
func (*AddSchemeFirewall_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{9, 1}
}

func (m *AddSchemeFirewall_Response) GetRecord() isAddSchemeFirewall_Response_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (x *AddSchemeFirewall_Response) GetCountryId() string {
	if x, ok := x.GetRecord().(*AddSchemeFirewall_Response_CountryId); ok {
		return x.CountryId
	}
	return ""
}

func (x *AddSchemeFirewall_Response) GetNetworkId() string {
	if x, ok := x.GetRecord().(*AddSchemeFirewall_Response_NetworkId); ok {
		return x.NetworkId
	}
	return ""
}

type isAddSchemeFirewall_Response_Record interface {
	isAddSchemeFirewall_Response_Record()
}

type AddSchemeFirewall_Response_CountryId struct {
	CountryId string `protobuf:"bytes,1,opt,name=country_id,json=countryId,proto3,oneof"`
}

type AddSchemeFirewall_Response_NetworkId struct {
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3,oneof"`
}

func (*AddSchemeFirewall_Response_CountryId) isAddSchemeFirewall_Response_Record() {}

func (*AddSchemeFirewall_Response_NetworkId) isAddSchemeFirewall_Response_Record() {}

type UpdateSchemeFirewall_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
	// Types that are assignable to Status:
	//
	//	*UpdateSchemeFirewall_Request_Country
	//	*UpdateSchemeFirewall_Request_Network
	Status isUpdateSchemeFirewall_Request_Status `protobuf_oneof:"status"`
}

func (x *UpdateSchemeFirewall_Request) Reset() {
	*x = UpdateSchemeFirewall_Request{}
	mi := &file_scheme_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSchemeFirewall_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemeFirewall_Request) ProtoMessage() {}

func (x *UpdateSchemeFirewall_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemeFirewall_Request.ProtoReflect.Descriptor instead.
func (*UpdateSchemeFirewall_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{10, 0}
}

func (x *UpdateSchemeFirewall_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *UpdateSchemeFirewall_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateSchemeFirewall_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (m *UpdateSchemeFirewall_Request) GetStatus() isUpdateSchemeFirewall_Request_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *UpdateSchemeFirewall_Request) GetCountry() bool {
	if x, ok := x.GetStatus().(*UpdateSchemeFirewall_Request_Country); ok {
		return x.Country
	}
	return false
}

func (x *UpdateSchemeFirewall_Request) GetNetwork() bool {
	if x, ok := x.GetStatus().(*UpdateSchemeFirewall_Request_Network); ok {
		return x.Network
	}
	return false
}

type isUpdateSchemeFirewall_Request_Status interface {
	isUpdateSchemeFirewall_Request_Status()
}

type UpdateSchemeFirewall_Request_Country struct {
	Country bool `protobuf:"varint,4,opt,name=country,proto3,oneof"`
}

type UpdateSchemeFirewall_Request_Network struct {
	Network bool `protobuf:"varint,5,opt,name=network,proto3,oneof"`
}

func (*UpdateSchemeFirewall_Request_Country) isUpdateSchemeFirewall_Request_Status() {}

func (*UpdateSchemeFirewall_Request_Network) isUpdateSchemeFirewall_Request_Status() {}

type UpdateSchemeFirewall_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSchemeFirewall_Response) Reset() {
	*x = UpdateSchemeFirewall_Response{}
	mi := &file_scheme_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSchemeFirewall_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemeFirewall_Response) ProtoMessage() {}

func (x *UpdateSchemeFirewall_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemeFirewall_Response.ProtoReflect.Descriptor instead.
func (*UpdateSchemeFirewall_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{10, 1}
}

type DeleteSchemeFirewall_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"-"`        
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-"`  
	SchemeId  string `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"-"`     
	// Types that are assignable to Record:
	//
	//	*DeleteSchemeFirewall_Request_CountryId
	//	*DeleteSchemeFirewall_Request_NetworkId
	Record isDeleteSchemeFirewall_Request_Record `protobuf_oneof:"record"`
}

func (x *DeleteSchemeFirewall_Request) Reset() {
	*x = DeleteSchemeFirewall_Request{}
	mi := &file_scheme_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchemeFirewall_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemeFirewall_Request) ProtoMessage() {}

func (x *DeleteSchemeFirewall_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemeFirewall_Request.ProtoReflect.Descriptor instead.
func (*DeleteSchemeFirewall_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{11, 0}
}

func (x *DeleteSchemeFirewall_Request) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *DeleteSchemeFirewall_Request) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteSchemeFirewall_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (m *DeleteSchemeFirewall_Request) GetRecord() isDeleteSchemeFirewall_Request_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (x *DeleteSchemeFirewall_Request) GetCountryId() string {
	if x, ok := x.GetRecord().(*DeleteSchemeFirewall_Request_CountryId); ok {
		return x.CountryId
	}
	return ""
}

func (x *DeleteSchemeFirewall_Request) GetNetworkId() string {
	if x, ok := x.GetRecord().(*DeleteSchemeFirewall_Request_NetworkId); ok {
		return x.NetworkId
	}
	return ""
}

type isDeleteSchemeFirewall_Request_Record interface {
	isDeleteSchemeFirewall_Request_Record()
}

type DeleteSchemeFirewall_Request_CountryId struct {
	CountryId string `protobuf:"bytes,4,opt,name=country_id,json=countryId,proto3,oneof"`
}

type DeleteSchemeFirewall_Request_NetworkId struct {
	NetworkId string `protobuf:"bytes,5,opt,name=network_id,json=networkId,proto3,oneof"`
}

func (*DeleteSchemeFirewall_Request_CountryId) isDeleteSchemeFirewall_Request_Record() {}

func (*DeleteSchemeFirewall_Request_NetworkId) isDeleteSchemeFirewall_Request_Record() {}

type DeleteSchemeFirewall_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSchemeFirewall_Response) Reset() {
	*x = DeleteSchemeFirewall_Response{}
	mi := &file_scheme_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchemeFirewall_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemeFirewall_Response) ProtoMessage() {}

func (x *DeleteSchemeFirewall_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemeFirewall_Response.ProtoReflect.Descriptor instead.
func (*DeleteSchemeFirewall_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{11, 1}
}

type ProfileSchemes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdmin    bool              `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"-"`       
	ProfileId  string            `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"-"`  
	SchemeType access.SchemeType `protobuf:"varint,3,opt,name=scheme_type,json=schemeType,proto3,enum=access.SchemeType" json:"scheme_type,omitempty"`
	Limit      int32             `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32             `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	SortBy     string            `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"-"`  
}

func (x *ProfileSchemes_Request) Reset() {
	*x = ProfileSchemes_Request{}
	mi := &file_scheme_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileSchemes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileSchemes_Request) ProtoMessage() {}

func (x *ProfileSchemes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileSchemes_Request.ProtoReflect.Descriptor instead.
func (*ProfileSchemes_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ProfileSchemes_Request) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ProfileSchemes_Request) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ProfileSchemes_Request) GetSchemeType() access.SchemeType {
	if x != nil {
		return x.SchemeType
	}
	return access.SchemeType(0)
}

func (x *ProfileSchemes_Request) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ProfileSchemes_Request) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ProfileSchemes_Request) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type ProfileSchemes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   map[int32]int32    `protobuf:"bytes,1,rep,name=total,proto3" json:"total,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Schemes []*Scheme_Response `protobuf:"bytes,2,rep,name=schemes,proto3" json:"schemes,omitempty"`
}

func (x *ProfileSchemes_Response) Reset() {
	*x = ProfileSchemes_Response{}
	mi := &file_scheme_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileSchemes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileSchemes_Response) ProtoMessage() {}

func (x *ProfileSchemes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileSchemes_Response.ProtoReflect.Descriptor instead.
func (*ProfileSchemes_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ProfileSchemes_Response) GetTotal() map[int32]int32 {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *ProfileSchemes_Response) GetSchemes() []*Scheme_Response {
	if x != nil {
		return x.Schemes
	}
	return nil
}

type SystemSchemesByAlias_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *SystemSchemesByAlias_Request) Reset() {
	*x = SystemSchemesByAlias_Request{}
	mi := &file_scheme_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemSchemesByAlias_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSchemesByAlias_Request) ProtoMessage() {}

func (x *SystemSchemesByAlias_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSchemesByAlias_Request.ProtoReflect.Descriptor instead.
func (*SystemSchemesByAlias_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SystemSchemesByAlias_Request) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type SystemSchemesByAlias_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Schemes []*Scheme_Response `protobuf:"bytes,2,rep,name=schemes,proto3" json:"schemes,omitempty"`
}

func (x *SystemSchemesByAlias_Response) Reset() {
	*x = SystemSchemesByAlias_Response{}
	mi := &file_scheme_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemSchemesByAlias_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSchemesByAlias_Response) ProtoMessage() {}

func (x *SystemSchemesByAlias_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSchemesByAlias_Response.ProtoReflect.Descriptor instead.
func (*SystemSchemesByAlias_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{13, 1}
}

func (x *SystemSchemesByAlias_Response) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SystemSchemesByAlias_Response) GetSchemes() []*Scheme_Response {
	if x != nil {
		return x.Schemes
	}
	return nil
}

type SystemSchemeAccess_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeId  string                 `protobuf:"bytes,1,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
	ClientIp  string                 `protobuf:"bytes,2,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SystemSchemeAccess_Request) Reset() {
	*x = SystemSchemeAccess_Request{}
	mi := &file_scheme_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemSchemeAccess_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSchemeAccess_Request) ProtoMessage() {}

func (x *SystemSchemeAccess_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSchemeAccess_Request.ProtoReflect.Descriptor instead.
func (*SystemSchemeAccess_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SystemSchemeAccess_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *SystemSchemeAccess_Request) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *SystemSchemeAccess_Request) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SystemSchemeAccess_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SchemeType access.SchemeType    `protobuf:"varint,2,opt,name=scheme_type,json=schemeType,proto3,enum=access.SchemeType" json:"scheme_type,omitempty"`
	Access     *access.AccessScheme `protobuf:"bytes,3,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *SystemSchemeAccess_Response) Reset() {
	*x = SystemSchemeAccess_Response{}
	mi := &file_scheme_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemSchemeAccess_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSchemeAccess_Response) ProtoMessage() {}

func (x *SystemSchemeAccess_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSchemeAccess_Response.ProtoReflect.Descriptor instead.
func (*SystemSchemeAccess_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{14, 1}
}

func (x *SystemSchemeAccess_Response) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SystemSchemeAccess_Response) GetSchemeType() access.SchemeType {
	if x != nil {
		return x.SchemeType
	}
	return access.SchemeType(0)
}

func (x *SystemSchemeAccess_Response) GetAccess() *access.AccessScheme {
	if x != nil {
		return x.Access
	}
	return nil
}

type SystemHostKey_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeId string `protobuf:"bytes,1,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
}

func (x *SystemHostKey_Request) Reset() {
	*x = SystemHostKey_Request{}
	mi := &file_scheme_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemHostKey_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemHostKey_Request) ProtoMessage() {}

func (x *SystemHostKey_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemHostKey_Request.ProtoReflect.Descriptor instead.
func (*SystemHostKey_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{15, 0}
}

func (x *SystemHostKey_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

type SystemHostKey_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostkey []byte `protobuf:"bytes,1,opt,name=hostkey,proto3" json:"hostkey,omitempty"`
}

func (x *SystemHostKey_Response) Reset() {
	*x = SystemHostKey_Response{}
	mi := &file_scheme_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemHostKey_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemHostKey_Response) ProtoMessage() {}

func (x *SystemHostKey_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemHostKey_Response.ProtoReflect.Descriptor instead.
func (*SystemHostKey_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{15, 1}
}

func (x *SystemHostKey_Response) GetHostkey() []byte {
	if x != nil {
		return x.Hostkey
	}
	return nil
}

type SystemUpdateHostKey_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeId string `protobuf:"bytes,1,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
	Hostkey  []byte `protobuf:"bytes,2,opt,name=hostkey,proto3" json:"hostkey,omitempty"`
}

func (x *SystemUpdateHostKey_Request) Reset() {
	*x = SystemUpdateHostKey_Request{}
	mi := &file_scheme_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemUpdateHostKey_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUpdateHostKey_Request) ProtoMessage() {}

func (x *SystemUpdateHostKey_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUpdateHostKey_Request.ProtoReflect.Descriptor instead.
func (*SystemUpdateHostKey_Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{16, 0}
}

func (x *SystemUpdateHostKey_Request) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *SystemUpdateHostKey_Request) GetHostkey() []byte {
	if x != nil {
		return x.Hostkey
	}
	return nil
}

type SystemUpdateHostKey_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemUpdateHostKey_Response) Reset() {
	*x = SystemUpdateHostKey_Response{}
	mi := &file_scheme_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemUpdateHostKey_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUpdateHostKey_Response) ProtoMessage() {}

func (x *SystemUpdateHostKey_Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUpdateHostKey_Response.ProtoReflect.Descriptor instead.
func (*SystemUpdateHostKey_Response) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{16, 1}
}

var File_scheme_proto protoreflect.FileDescriptor

var file_scheme_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x6b, 0x67, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x67, 0x68, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2f, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x02, 0x0a, 0x07, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x1a, 0xee, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x1a, 0x53, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0xc7, 0x06, 0x0a, 0x06, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49,
	0x64, 0x1a, 0xa0, 0x05, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x1a, 0xeb, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x1a, 0x27, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0xd4, 0x02, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72,
	0x05, 0x10, 0x05, 0x18, 0x80, 0x01, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x18, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08,
	0x01, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x7e,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x6f, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6e, 0x6f, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x22, 0xbd, 0x04, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x1a, 0xb8, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x5d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x12, 0x31, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x00, 0x52, 0x04,
	0x77, 0x65, 0x65, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x90,
	0x02, 0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x17, 0x10, 0x17,
	0x22, 0x06, 0x1a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x03, 0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x03, 0x74, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92,
	0x01, 0x0c, 0x08, 0x17, 0x10, 0x17, 0x22, 0x06, 0x1a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x03,
	0x74, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x17, 0x10, 0x17, 0x22, 0x06, 0x1a, 0x04,
	0x30, 0x00, 0x30, 0x01, 0x52, 0x03, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x68, 0x75,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x17,
	0x10, 0x17, 0x22, 0x06, 0x1a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x03, 0x74, 0x68, 0x75, 0x12,
	0x24, 0x0a, 0x03, 0x66, 0x72, 0x69, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x42, 0x12, 0xba, 0x48,
	0x0f, 0x92, 0x01, 0x0c, 0x08, 0x17, 0x10, 0x17, 0x22, 0x06, 0x1a, 0x04, 0x30, 0x00, 0x30, 0x01,
	0x52, 0x03, 0x66, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x17, 0x10, 0x17, 0x22, 0x06,
	0x1a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x03, 0x73, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x73,
	0x75, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c,
	0x08, 0x17, 0x10, 0x17, 0x22, 0x06, 0x1a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x03, 0x73, 0x75,
	0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0xbf, 0x01, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x0a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x0e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x1a, 0x7e, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x81, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a,
	0x65, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x77, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x64, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd1, 0x02, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x1a, 0xe3, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x70, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0x56, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0xec, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x1a, 0xc7, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x0f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0xba, 0x48,
	0x02, 0x08, 0x01, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8a, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x1a, 0xe5, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x42,
	0x0f, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01,
	0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x03, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x1a,
	0xc9, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x1a, 0xb9, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x1a, 0x3e, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x48, 0x1a, 0xc8,
	0x01, 0x01, 0x72, 0x15, 0x10, 0x03, 0x18, 0x2e, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x1a, 0x53, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x96, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x70,
	0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x8c, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x6f,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x33, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x24, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6b, 0x65, 0x79,
	0x22, 0x78, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x55, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x1a, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x44, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x03,
	0x2a, 0x51, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x62, 0x61,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x10, 0x04, 0x32, 0xd0, 0x0b, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x12, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x16, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x24, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x12, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x2f, 0x77, 0x65, 0x72, 0x62,
	0x6f, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheme_proto_rawDescOnce sync.Once
	file_scheme_proto_rawDescData = file_scheme_proto_rawDesc
)

func file_scheme_proto_rawDescGZIP() []byte {
	file_scheme_proto_rawDescOnce.Do(func() {
		file_scheme_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheme_proto_rawDescData)
	})
	return file_scheme_proto_rawDescData
}

var file_scheme_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_scheme_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_scheme_proto_goTypes = []any{
	(Address)(0),                          // 0: scheme.Address
	(Type)(0),                             // 1: scheme.Type
	(*Schemes)(nil),                       // 2: scheme.Schemes
	(*Scheme)(nil),                        // 3: scheme.Scheme
	(*AddScheme)(nil),                     // 4: scheme.AddScheme
	(*UpdateScheme)(nil),                  // 5: scheme.UpdateScheme
	(*DeleteScheme)(nil),                  // 6: scheme.DeleteScheme
	(*SchemeAccess)(nil),                  // 7: scheme.SchemeAccess
	(*SchemeActivity)(nil),                // 8: scheme.SchemeActivity
	(*UpdateSchemeActivity)(nil),          // 9: scheme.UpdateSchemeActivity
	(*SchemeFirewall)(nil),                // 10: scheme.SchemeFirewall
	(*AddSchemeFirewall)(nil),             // 11: scheme.AddSchemeFirewall
	(*UpdateSchemeFirewall)(nil),          // 12: scheme.UpdateSchemeFirewall
	(*DeleteSchemeFirewall)(nil),          // 13: scheme.DeleteSchemeFirewall
	(*ProfileSchemes)(nil),                // 14: scheme.ProfileSchemes
	(*SystemSchemesByAlias)(nil),          // 15: scheme.SystemSchemesByAlias
	(*SystemSchemeAccess)(nil),            // 16: scheme.SystemSchemeAccess
	(*SystemHostKey)(nil),                 // 17: scheme.SystemHostKey
	(*SystemUpdateHostKey)(nil),           // 18: scheme.SystemUpdateHostKey
	(*Schemes_Request)(nil),               // 19: scheme.Schemes.Request
	(*Schemes_Response)(nil),              // 20: scheme.Schemes.Response
	(*Scheme_Request)(nil),                // 21: scheme.Scheme.Request
	(*Scheme_Response)(nil),               // 22: scheme.Scheme.Response
	(*AddScheme_Request)(nil),             // 23: scheme.AddScheme.Request
	(*AddScheme_Response)(nil),            // 24: scheme.AddScheme.Response
	(*UpdateScheme_Request)(nil),          // 25: scheme.UpdateScheme.Request
	(*UpdateScheme_Response)(nil),         // 26: scheme.UpdateScheme.Response
	(*DeleteScheme_Request)(nil),          // 27: scheme.DeleteScheme.Request
	(*DeleteScheme_Response)(nil),         // 28: scheme.DeleteScheme.Response
	(*SchemeAccess_Request)(nil),          // 29: scheme.SchemeAccess.Request
	(*SchemeAccess_Response)(nil),         // 30: scheme.SchemeAccess.Response
	(*SchemeActivity_Request)(nil),        // 31: scheme.SchemeActivity.Request
	(*SchemeActivity_Response)(nil),       // 32: scheme.SchemeActivity.Response
	(*SchemeActivity_Week)(nil),           // 33: scheme.SchemeActivity.Week
	(*UpdateSchemeActivity_Request)(nil),  // 34: scheme.UpdateSchemeActivity.Request
	(*UpdateSchemeActivity_Response)(nil), // 35: scheme.UpdateSchemeActivity.Response
	(*SchemeFirewall_Request)(nil),        // 36: scheme.SchemeFirewall.Request
	(*SchemeFirewall_Response)(nil),       // 37: scheme.SchemeFirewall.Response
	(*SchemeFirewall_Countries)(nil),      // 38: scheme.SchemeFirewall.Countries
	(*SchemeFirewall_Networks)(nil),       // 39: scheme.SchemeFirewall.Networks
	(*AddSchemeFirewall_Request)(nil),     // 40: scheme.AddSchemeFirewall.Request
	(*AddSchemeFirewall_Response)(nil),    // 41: scheme.AddSchemeFirewall.Response
	(*UpdateSchemeFirewall_Request)(nil),  // 42: scheme.UpdateSchemeFirewall.Request
	(*UpdateSchemeFirewall_Response)(nil), // 43: scheme.UpdateSchemeFirewall.Response
	(*DeleteSchemeFirewall_Request)(nil),  // 44: scheme.DeleteSchemeFirewall.Request
	(*DeleteSchemeFirewall_Response)(nil), // 45: scheme.DeleteSchemeFirewall.Response
	(*ProfileSchemes_Request)(nil),        // 46: scheme.ProfileSchemes.Request
	(*ProfileSchemes_Response)(nil),       // 47: scheme.ProfileSchemes.Response
	nil,                                   // 48: scheme.ProfileSchemes.Response.TotalEntry
	(*SystemSchemesByAlias_Request)(nil),  // 49: scheme.SystemSchemesByAlias.Request
	(*SystemSchemesByAlias_Response)(nil), // 50: scheme.SystemSchemesByAlias.Response
	(*SystemSchemeAccess_Request)(nil),    // 51: scheme.SystemSchemeAccess.Request
	(*SystemSchemeAccess_Response)(nil),   // 52: scheme.SystemSchemeAccess.Response
	(*SystemHostKey_Request)(nil),         // 53: scheme.SystemHostKey.Request
	(*SystemHostKey_Response)(nil),        // 54: scheme.SystemHostKey.Response
	(*SystemUpdateHostKey_Request)(nil),   // 55: scheme.SystemUpdateHostKey.Request
	(*SystemUpdateHostKey_Response)(nil),  // 56: scheme.SystemUpdateHostKey.Response
	(access.SchemeType)(0),                // 57: access.SchemeType
	(auth.AuthMethod)(0),                  // 58: auth.AuthMethod
	(*timestamppb.Timestamp)(nil),         // 59: google.protobuf.Timestamp
	(*access.AccessScheme)(nil),           // 60: access.AccessScheme
	(*firewall.Country)(nil),              // 61: firewall.Country
	(*firewall.Network)(nil),              // 62: firewall.Network
}
var file_scheme_proto_depIdxs = []int32{
	57, // 0: scheme.Schemes.Request.scheme_type:type_name -> access.SchemeType
	22, // 1: scheme.Schemes.Response.schemes:type_name -> scheme.Scheme.Response
	58, // 2: scheme.Scheme.Response.auth_method:type_name -> auth.AuthMethod
	57, // 3: scheme.Scheme.Response.scheme_type:type_name -> access.SchemeType
	59, // 4: scheme.Scheme.Response.locked_at:type_name -> google.protobuf.Timestamp
	59, // 5: scheme.Scheme.Response.archived_at:type_name -> google.protobuf.Timestamp
	59, // 6: scheme.Scheme.Response.updated_at:type_name -> google.protobuf.Timestamp
	59, // 7: scheme.Scheme.Response.created_at:type_name -> google.protobuf.Timestamp
	60, // 8: scheme.AddScheme.Request.scheme:type_name -> access.AccessScheme
	60, // 9: scheme.UpdateScheme.Request.scheme:type_name -> access.AccessScheme
	60, // 10: scheme.SchemeAccess.Response.scheme:type_name -> access.AccessScheme
	59, // 11: scheme.SchemeActivity.Request.timestamp:type_name -> google.protobuf.Timestamp
	33, // 12: scheme.SchemeActivity.Response.week:type_name -> scheme.SchemeActivity.Week
	33, // 13: scheme.UpdateSchemeActivity.Request.activity:type_name -> scheme.SchemeActivity.Week
	38, // 14: scheme.SchemeFirewall.Response.country:type_name -> scheme.SchemeFirewall.Countries
	39, // 15: scheme.SchemeFirewall.Response.network:type_name -> scheme.SchemeFirewall.Networks
	61, // 16: scheme.SchemeFirewall.Countries.list:type_name -> firewall.Country
	62, // 17: scheme.SchemeFirewall.Networks.list:type_name -> firewall.Network
	57, // 18: scheme.ProfileSchemes.Request.scheme_type:type_name -> access.SchemeType
	48, // 19: scheme.ProfileSchemes.Response.total:type_name -> scheme.ProfileSchemes.Response.TotalEntry
	22, // 20: scheme.ProfileSchemes.Response.schemes:type_name -> scheme.Scheme.Response
	22, // 21: scheme.SystemSchemesByAlias.Response.schemes:type_name -> scheme.Scheme.Response
	59, // 22: scheme.SystemSchemeAccess.Request.timestamp:type_name -> google.protobuf.Timestamp
	57, // 23: scheme.SystemSchemeAccess.Response.scheme_type:type_name -> access.SchemeType
	60, // 24: scheme.SystemSchemeAccess.Response.access:type_name -> access.AccessScheme
	19, // 25: scheme.SchemeHandlers.Schemes:input_type -> scheme.Schemes.Request
	21, // 26: scheme.SchemeHandlers.Scheme:input_type -> scheme.Scheme.Request
	23, // 27: scheme.SchemeHandlers.AddScheme:input_type -> scheme.AddScheme.Request
	25, // 28: scheme.SchemeHandlers.UpdateScheme:input_type -> scheme.UpdateScheme.Request
	27, // 29: scheme.SchemeHandlers.DeleteScheme:input_type -> scheme.DeleteScheme.Request
	29, // 30: scheme.SchemeHandlers.SchemeAccess:input_type -> scheme.SchemeAccess.Request
	31, // 31: scheme.SchemeHandlers.SchemeActivity:input_type -> scheme.SchemeActivity.Request
	34, // 32: scheme.SchemeHandlers.UpdateSchemeActivity:input_type -> scheme.UpdateSchemeActivity.Request
	36, // 33: scheme.SchemeHandlers.SchemeFirewall:input_type -> scheme.SchemeFirewall.Request
	40, // 34: scheme.SchemeHandlers.AddSchemeFirewall:input_type -> scheme.AddSchemeFirewall.Request
	42, // 35: scheme.SchemeHandlers.UpdateSchemeFirewall:input_type -> scheme.UpdateSchemeFirewall.Request
	44, // 36: scheme.SchemeHandlers.DeleteSchemeFirewall:input_type -> scheme.DeleteSchemeFirewall.Request
	46, // 37: scheme.SchemeHandlers.ProfileSchemes:input_type -> scheme.ProfileSchemes.Request
	49, // 38: scheme.SchemeHandlers.SystemSchemesByAlias:input_type -> scheme.SystemSchemesByAlias.Request
	51, // 39: scheme.SchemeHandlers.SystemSchemeAccess:input_type -> scheme.SystemSchemeAccess.Request
	53, // 40: scheme.SchemeHandlers.SystemHostKey:input_type -> scheme.SystemHostKey.Request
	55, // 41: scheme.SchemeHandlers.SystemUpdateHostKey:input_type -> scheme.SystemUpdateHostKey.Request
	20, // 42: scheme.SchemeHandlers.Schemes:output_type -> scheme.Schemes.Response
	22, // 43: scheme.SchemeHandlers.Scheme:output_type -> scheme.Scheme.Response
	24, // 44: scheme.SchemeHandlers.AddScheme:output_type -> scheme.AddScheme.Response
	26, // 45: scheme.SchemeHandlers.UpdateScheme:output_type -> scheme.UpdateScheme.Response
	28, // 46: scheme.SchemeHandlers.DeleteScheme:output_type -> scheme.DeleteScheme.Response
	30, // 47: scheme.SchemeHandlers.SchemeAccess:output_type -> scheme.SchemeAccess.Response
	32, // 48: scheme.SchemeHandlers.SchemeActivity:output_type -> scheme.SchemeActivity.Response
	35, // 49: scheme.SchemeHandlers.UpdateSchemeActivity:output_type -> scheme.UpdateSchemeActivity.Response
	37, // 50: scheme.SchemeHandlers.SchemeFirewall:output_type -> scheme.SchemeFirewall.Response
	41, // 51: scheme.SchemeHandlers.AddSchemeFirewall:output_type -> scheme.AddSchemeFirewall.Response
	43, // 52: scheme.SchemeHandlers.UpdateSchemeFirewall:output_type -> scheme.UpdateSchemeFirewall.Response
	45, // 53: scheme.SchemeHandlers.DeleteSchemeFirewall:output_type -> scheme.DeleteSchemeFirewall.Response
	47, // 54: scheme.SchemeHandlers.ProfileSchemes:output_type -> scheme.ProfileSchemes.Response
	50, // 55: scheme.SchemeHandlers.SystemSchemesByAlias:output_type -> scheme.SystemSchemesByAlias.Response
	52, // 56: scheme.SchemeHandlers.SystemSchemeAccess:output_type -> scheme.SystemSchemeAccess.Response
	54, // 57: scheme.SchemeHandlers.SystemHostKey:output_type -> scheme.SystemHostKey.Response
	56, // 58: scheme.SchemeHandlers.SystemUpdateHostKey:output_type -> scheme.SystemUpdateHostKey.Response
	42, // [42:59] is the sub-list for method output_type
	25, // [25:42] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_scheme_proto_init() }
func file_scheme_proto_init() {
	if File_scheme_proto != nil {
		return
	}
	file_scheme_proto_msgTypes[23].OneofWrappers = []any{
		(*UpdateScheme_Request_Title)(nil),
		(*UpdateScheme_Request_Audit)(nil),
		(*UpdateScheme_Request_Active)(nil),
		(*UpdateScheme_Request_Online)(nil),
		(*UpdateScheme_Request_Description)(nil),
		(*UpdateScheme_Request_Scheme)(nil),
	}
	file_scheme_proto_msgTypes[30].OneofWrappers = []any{
		(*SchemeActivity_Response_Hour)(nil),
		(*SchemeActivity_Response_Week)(nil),
	}
	file_scheme_proto_msgTypes[38].OneofWrappers = []any{
		(*AddSchemeFirewall_Request_Network)(nil),
		(*AddSchemeFirewall_Request_CountryCode)(nil),
	}
	file_scheme_proto_msgTypes[39].OneofWrappers = []any{
		(*AddSchemeFirewall_Response_CountryId)(nil),
		(*AddSchemeFirewall_Response_NetworkId)(nil),
	}
	file_scheme_proto_msgTypes[40].OneofWrappers = []any{
		(*UpdateSchemeFirewall_Request_Country)(nil),
		(*UpdateSchemeFirewall_Request_Network)(nil),
	}
	file_scheme_proto_msgTypes[42].OneofWrappers = []any{
		(*DeleteSchemeFirewall_Request_CountryId)(nil),
		(*DeleteSchemeFirewall_Request_NetworkId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheme_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scheme_proto_goTypes,
		DependencyIndexes: file_scheme_proto_depIdxs,
		EnumInfos:         file_scheme_proto_enumTypes,
		MessageInfos:      file_scheme_proto_msgTypes,
	}.Build()
	File_scheme_proto = out.File
	file_scheme_proto_rawDesc = nil
	file_scheme_proto_goTypes = nil
	file_scheme_proto_depIdxs = nil
}

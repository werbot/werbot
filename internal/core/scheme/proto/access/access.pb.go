// Code generated by protoc-gen-go. DO NOT EDIT.
// source: access.proto

package access

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	auth "github.com/werbot/werbot/internal/core/scheme/proto/auth"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -----------------------------------
// scheme description section
type SchemeType int32

const (
	SchemeType_scheme_unspecified SchemeType = 0
	SchemeType_server             SchemeType = 100
	SchemeType_server_tcp         SchemeType = 101
	SchemeType_server_udp         SchemeType = 102
	SchemeType_server_ssh         SchemeType = 103
	SchemeType_server_telnet      SchemeType = 104
	SchemeType_database           SchemeType = 200
	SchemeType_database_mysql     SchemeType = 201
	SchemeType_database_postgres  SchemeType = 202
	SchemeType_database_redis     SchemeType = 203
	SchemeType_database_mongodb   SchemeType = 204
	SchemeType_database_elastic   SchemeType = 205
	SchemeType_database_dynamodb  SchemeType = 206
	SchemeType_database_cassandra SchemeType = 207
	SchemeType_database_sqlserver SchemeType = 208
	SchemeType_database_snowflake SchemeType = 209
	SchemeType_desktop            SchemeType = 300
	SchemeType_desktop_rdp        SchemeType = 301
	SchemeType_desktop_vnc        SchemeType = 302
	SchemeType_container          SchemeType = 400
	SchemeType_container_docker   SchemeType = 401
	SchemeType_container_k8s      SchemeType = 402
	SchemeType_cloud              SchemeType = 500
	SchemeType_cloud_aws          SchemeType = 501
	SchemeType_cloud_gcp          SchemeType = 502
	SchemeType_cloud_azure        SchemeType = 503
	SchemeType_cloud_do           SchemeType = 504
	SchemeType_cloud_hetzner      SchemeType = 505
	SchemeType_application        SchemeType = 600
	SchemeType_application_site   SchemeType = 601
)

// Enum value maps for SchemeType.
var (
	SchemeType_name = map[int32]string{
		0:   "scheme_unspecified",
		100: "server",
		101: "server_tcp",
		102: "server_udp",
		103: "server_ssh",
		104: "server_telnet",
		200: "database",
		201: "database_mysql",
		202: "database_postgres",
		203: "database_redis",
		204: "database_mongodb",
		205: "database_elastic",
		206: "database_dynamodb",
		207: "database_cassandra",
		208: "database_sqlserver",
		209: "database_snowflake",
		300: "desktop",
		301: "desktop_rdp",
		302: "desktop_vnc",
		400: "container",
		401: "container_docker",
		402: "container_k8s",
		500: "cloud",
		501: "cloud_aws",
		502: "cloud_gcp",
		503: "cloud_azure",
		504: "cloud_do",
		505: "cloud_hetzner",
		600: "application",
		601: "application_site",
	}
	SchemeType_value = map[string]int32{
		"scheme_unspecified": 0,
		"server":             100,
		"server_tcp":         101,
		"server_udp":         102,
		"server_ssh":         103,
		"server_telnet":      104,
		"database":           200,
		"database_mysql":     201,
		"database_postgres":  202,
		"database_redis":     203,
		"database_mongodb":   204,
		"database_elastic":   205,
		"database_dynamodb":  206,
		"database_cassandra": 207,
		"database_sqlserver": 208,
		"database_snowflake": 209,
		"desktop":            300,
		"desktop_rdp":        301,
		"desktop_vnc":        302,
		"container":          400,
		"container_docker":   401,
		"container_k8s":      402,
		"cloud":              500,
		"cloud_aws":          501,
		"cloud_gcp":          502,
		"cloud_azure":        503,
		"cloud_do":           504,
		"cloud_hetzner":      505,
		"application":        600,
		"application_site":   601,
	}
)

func (x SchemeType) Enum() *SchemeType {
	p := new(SchemeType)
	*p = x
	return p
}

func (x SchemeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemeType) Descriptor() protoreflect.EnumDescriptor {
	return file_access_proto_enumTypes[0].Descriptor()
}

func (SchemeType) Type() protoreflect.EnumType {
	return &file_access_proto_enumTypes[0]
}

func (x SchemeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemeType.Descriptor instead.
func (SchemeType) EnumDescriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0}
}

// -----------------------------------
type AccessScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Access:
	//
	//	*AccessScheme_ServerTcp
	//	*AccessScheme_ServerUdp
	//	*AccessScheme_ServerSsh
	//	*AccessScheme_ServerTelnet
	//	*AccessScheme_DatabaseMysql
	//	*AccessScheme_DatabasePostgres
	//	*AccessScheme_DatabaseRedis
	//	*AccessScheme_DatabaseMongodb
	//	*AccessScheme_DatabaseElastic
	//	*AccessScheme_DatabaseDynamodb
	//	*AccessScheme_DatabaseCassandra
	//	*AccessScheme_DatabaseSqlserver
	//	*AccessScheme_DatabaseSnowflake
	//	*AccessScheme_DesktopRdp
	//	*AccessScheme_DesktopVnc
	//	*AccessScheme_ContainerDocker
	//	*AccessScheme_ContainerK8S
	//	*AccessScheme_CloudAws
	//	*AccessScheme_CloudGcp
	//	*AccessScheme_CloudAzure
	//	*AccessScheme_CloudDo
	//	*AccessScheme_CloudHetzner
	//	*AccessScheme_ApplicationSite
	Access isAccessScheme_Access `protobuf_oneof:"access"`
}

func (x *AccessScheme) Reset() {
	*x = AccessScheme{}
	mi := &file_access_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme) ProtoMessage() {}

func (x *AccessScheme) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme.ProtoReflect.Descriptor instead.
func (*AccessScheme) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0}
}

func (m *AccessScheme) GetAccess() isAccessScheme_Access {
	if m != nil {
		return m.Access
	}
	return nil
}

func (x *AccessScheme) GetServerTcp() *AccessScheme_Server_TCP {
	if x, ok := x.GetAccess().(*AccessScheme_ServerTcp); ok {
		return x.ServerTcp
	}
	return nil
}

func (x *AccessScheme) GetServerUdp() *AccessScheme_Server_UDP {
	if x, ok := x.GetAccess().(*AccessScheme_ServerUdp); ok {
		return x.ServerUdp
	}
	return nil
}

func (x *AccessScheme) GetServerSsh() *AccessScheme_Server_SSH {
	if x, ok := x.GetAccess().(*AccessScheme_ServerSsh); ok {
		return x.ServerSsh
	}
	return nil
}

func (x *AccessScheme) GetServerTelnet() *AccessScheme_Server_Telnet {
	if x, ok := x.GetAccess().(*AccessScheme_ServerTelnet); ok {
		return x.ServerTelnet
	}
	return nil
}

func (x *AccessScheme) GetDatabaseMysql() *AccessScheme_Database_MySQL {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseMysql); ok {
		return x.DatabaseMysql
	}
	return nil
}

func (x *AccessScheme) GetDatabasePostgres() *AccessScheme_Database_Postgres {
	if x, ok := x.GetAccess().(*AccessScheme_DatabasePostgres); ok {
		return x.DatabasePostgres
	}
	return nil
}

func (x *AccessScheme) GetDatabaseRedis() *AccessScheme_Database_Redis {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseRedis); ok {
		return x.DatabaseRedis
	}
	return nil
}

func (x *AccessScheme) GetDatabaseMongodb() *AccessScheme_Database_MongoDB {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseMongodb); ok {
		return x.DatabaseMongodb
	}
	return nil
}

func (x *AccessScheme) GetDatabaseElastic() *AccessScheme_Database_Elastic {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseElastic); ok {
		return x.DatabaseElastic
	}
	return nil
}

func (x *AccessScheme) GetDatabaseDynamodb() *AccessScheme_Database_DynamoDB {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseDynamodb); ok {
		return x.DatabaseDynamodb
	}
	return nil
}

func (x *AccessScheme) GetDatabaseCassandra() *AccessScheme_Database_Cassandra {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseCassandra); ok {
		return x.DatabaseCassandra
	}
	return nil
}

func (x *AccessScheme) GetDatabaseSqlserver() *AccessScheme_Database_SQLServer {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseSqlserver); ok {
		return x.DatabaseSqlserver
	}
	return nil
}

func (x *AccessScheme) GetDatabaseSnowflake() *AccessScheme_Database_Snowflake {
	if x, ok := x.GetAccess().(*AccessScheme_DatabaseSnowflake); ok {
		return x.DatabaseSnowflake
	}
	return nil
}

func (x *AccessScheme) GetDesktopRdp() *AccessScheme_Desktop_RDP {
	if x, ok := x.GetAccess().(*AccessScheme_DesktopRdp); ok {
		return x.DesktopRdp
	}
	return nil
}

func (x *AccessScheme) GetDesktopVnc() *AccessScheme_Desktop_VNC {
	if x, ok := x.GetAccess().(*AccessScheme_DesktopVnc); ok {
		return x.DesktopVnc
	}
	return nil
}

func (x *AccessScheme) GetContainerDocker() *AccessScheme_Container_Docker {
	if x, ok := x.GetAccess().(*AccessScheme_ContainerDocker); ok {
		return x.ContainerDocker
	}
	return nil
}

func (x *AccessScheme) GetContainerK8S() *AccessScheme_Container_K8S {
	if x, ok := x.GetAccess().(*AccessScheme_ContainerK8S); ok {
		return x.ContainerK8S
	}
	return nil
}

func (x *AccessScheme) GetCloudAws() *AccessScheme_Cloud_AWS {
	if x, ok := x.GetAccess().(*AccessScheme_CloudAws); ok {
		return x.CloudAws
	}
	return nil
}

func (x *AccessScheme) GetCloudGcp() *AccessScheme_Cloud_GCP {
	if x, ok := x.GetAccess().(*AccessScheme_CloudGcp); ok {
		return x.CloudGcp
	}
	return nil
}

func (x *AccessScheme) GetCloudAzure() *AccessScheme_Cloud_Azure {
	if x, ok := x.GetAccess().(*AccessScheme_CloudAzure); ok {
		return x.CloudAzure
	}
	return nil
}

func (x *AccessScheme) GetCloudDo() *AccessScheme_Cloud_DO {
	if x, ok := x.GetAccess().(*AccessScheme_CloudDo); ok {
		return x.CloudDo
	}
	return nil
}

func (x *AccessScheme) GetCloudHetzner() *AccessScheme_Cloud_Hetzner {
	if x, ok := x.GetAccess().(*AccessScheme_CloudHetzner); ok {
		return x.CloudHetzner
	}
	return nil
}

func (x *AccessScheme) GetApplicationSite() *AccessScheme_Application_Site {
	if x, ok := x.GetAccess().(*AccessScheme_ApplicationSite); ok {
		return x.ApplicationSite
	}
	return nil
}

type isAccessScheme_Access interface {
	isAccessScheme_Access()
}

type AccessScheme_ServerTcp struct {
	ServerTcp *AccessScheme_Server_TCP `protobuf:"bytes,100,opt,name=server_tcp,json=serverTcp,proto3,oneof"`
}

type AccessScheme_ServerUdp struct {
	ServerUdp *AccessScheme_Server_UDP `protobuf:"bytes,101,opt,name=server_udp,json=serverUdp,proto3,oneof"`
}

type AccessScheme_ServerSsh struct {
	ServerSsh *AccessScheme_Server_SSH `protobuf:"bytes,102,opt,name=server_ssh,json=serverSsh,proto3,oneof"`
}

type AccessScheme_ServerTelnet struct {
	ServerTelnet *AccessScheme_Server_Telnet `protobuf:"bytes,103,opt,name=server_telnet,json=serverTelnet,proto3,oneof"`
}

type AccessScheme_DatabaseMysql struct {
	DatabaseMysql *AccessScheme_Database_MySQL `protobuf:"bytes,110,opt,name=database_mysql,json=databaseMysql,proto3,oneof"`
}

type AccessScheme_DatabasePostgres struct {
	DatabasePostgres *AccessScheme_Database_Postgres `protobuf:"bytes,111,opt,name=database_postgres,json=databasePostgres,proto3,oneof"`
}

type AccessScheme_DatabaseRedis struct {
	DatabaseRedis *AccessScheme_Database_Redis `protobuf:"bytes,112,opt,name=database_redis,json=databaseRedis,proto3,oneof"`
}

type AccessScheme_DatabaseMongodb struct {
	DatabaseMongodb *AccessScheme_Database_MongoDB `protobuf:"bytes,113,opt,name=database_mongodb,json=databaseMongodb,proto3,oneof"`
}

type AccessScheme_DatabaseElastic struct {
	DatabaseElastic *AccessScheme_Database_Elastic `protobuf:"bytes,114,opt,name=database_elastic,json=databaseElastic,proto3,oneof"`
}

type AccessScheme_DatabaseDynamodb struct {
	DatabaseDynamodb *AccessScheme_Database_DynamoDB `protobuf:"bytes,115,opt,name=database_dynamodb,json=databaseDynamodb,proto3,oneof"`
}

type AccessScheme_DatabaseCassandra struct {
	DatabaseCassandra *AccessScheme_Database_Cassandra `protobuf:"bytes,116,opt,name=database_cassandra,json=databaseCassandra,proto3,oneof"`
}

type AccessScheme_DatabaseSqlserver struct {
	DatabaseSqlserver *AccessScheme_Database_SQLServer `protobuf:"bytes,117,opt,name=database_sqlserver,json=databaseSqlserver,proto3,oneof"`
}

type AccessScheme_DatabaseSnowflake struct {
	DatabaseSnowflake *AccessScheme_Database_Snowflake `protobuf:"bytes,118,opt,name=database_snowflake,json=databaseSnowflake,proto3,oneof"`
}

type AccessScheme_DesktopRdp struct {
	DesktopRdp *AccessScheme_Desktop_RDP `protobuf:"bytes,130,opt,name=desktop_rdp,json=desktopRdp,proto3,oneof"`
}

type AccessScheme_DesktopVnc struct {
	DesktopVnc *AccessScheme_Desktop_VNC `protobuf:"bytes,131,opt,name=desktop_vnc,json=desktopVnc,proto3,oneof"`
}

type AccessScheme_ContainerDocker struct {
	ContainerDocker *AccessScheme_Container_Docker `protobuf:"bytes,140,opt,name=container_docker,json=containerDocker,proto3,oneof"`
}

type AccessScheme_ContainerK8S struct {
	ContainerK8S *AccessScheme_Container_K8S `protobuf:"bytes,141,opt,name=container_k8s,json=containerK8s,proto3,oneof"`
}

type AccessScheme_CloudAws struct {
	CloudAws *AccessScheme_Cloud_AWS `protobuf:"bytes,150,opt,name=cloud_aws,json=cloudAws,proto3,oneof"`
}

type AccessScheme_CloudGcp struct {
	CloudGcp *AccessScheme_Cloud_GCP `protobuf:"bytes,151,opt,name=cloud_gcp,json=cloudGcp,proto3,oneof"`
}

type AccessScheme_CloudAzure struct {
	CloudAzure *AccessScheme_Cloud_Azure `protobuf:"bytes,152,opt,name=cloud_azure,json=cloudAzure,proto3,oneof"`
}

type AccessScheme_CloudDo struct {
	CloudDo *AccessScheme_Cloud_DO `protobuf:"bytes,153,opt,name=cloud_do,json=cloudDo,proto3,oneof"`
}

type AccessScheme_CloudHetzner struct {
	CloudHetzner *AccessScheme_Cloud_Hetzner `protobuf:"bytes,154,opt,name=cloud_hetzner,json=cloudHetzner,proto3,oneof"`
}

type AccessScheme_ApplicationSite struct {
	ApplicationSite *AccessScheme_Application_Site `protobuf:"bytes,170,opt,name=application_site,json=applicationSite,proto3,oneof"`
}

func (*AccessScheme_ServerTcp) isAccessScheme_Access() {}

func (*AccessScheme_ServerUdp) isAccessScheme_Access() {}

func (*AccessScheme_ServerSsh) isAccessScheme_Access() {}

func (*AccessScheme_ServerTelnet) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseMysql) isAccessScheme_Access() {}

func (*AccessScheme_DatabasePostgres) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseRedis) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseMongodb) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseElastic) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseDynamodb) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseCassandra) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseSqlserver) isAccessScheme_Access() {}

func (*AccessScheme_DatabaseSnowflake) isAccessScheme_Access() {}

func (*AccessScheme_DesktopRdp) isAccessScheme_Access() {}

func (*AccessScheme_DesktopVnc) isAccessScheme_Access() {}

func (*AccessScheme_ContainerDocker) isAccessScheme_Access() {}

func (*AccessScheme_ContainerK8S) isAccessScheme_Access() {}

func (*AccessScheme_CloudAws) isAccessScheme_Access() {}

func (*AccessScheme_CloudGcp) isAccessScheme_Access() {}

func (*AccessScheme_CloudAzure) isAccessScheme_Access() {}

func (*AccessScheme_CloudDo) isAccessScheme_Access() {}

func (*AccessScheme_CloudHetzner) isAccessScheme_Access() {}

func (*AccessScheme_ApplicationSite) isAccessScheme_Access() {}

type AccessScheme_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessScheme_Server) Reset() {
	*x = AccessScheme_Server{}
	mi := &file_access_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Server) ProtoMessage() {}

func (x *AccessScheme_Server) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Server.ProtoReflect.Descriptor instead.
func (*AccessScheme_Server) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 0}
}

type AccessScheme_Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessScheme_Database) Reset() {
	*x = AccessScheme_Database{}
	mi := &file_access_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database) ProtoMessage() {}

func (x *AccessScheme_Database) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1}
}

type AccessScheme_Desktop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessScheme_Desktop) Reset() {
	*x = AccessScheme_Desktop{}
	mi := &file_access_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Desktop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Desktop) ProtoMessage() {}

func (x *AccessScheme_Desktop) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Desktop.ProtoReflect.Descriptor instead.
func (*AccessScheme_Desktop) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 2}
}

type AccessScheme_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessScheme_Container) Reset() {
	*x = AccessScheme_Container{}
	mi := &file_access_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Container) ProtoMessage() {}

func (x *AccessScheme_Container) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Container.ProtoReflect.Descriptor instead.
func (*AccessScheme_Container) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 3}
}

type AccessScheme_Cloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessScheme_Cloud) Reset() {
	*x = AccessScheme_Cloud{}
	mi := &file_access_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Cloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Cloud) ProtoMessage() {}

func (x *AccessScheme_Cloud) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Cloud.ProtoReflect.Descriptor instead.
func (*AccessScheme_Cloud) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4}
}

type AccessScheme_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessScheme_Application) Reset() {
	*x = AccessScheme_Application{}
	mi := &file_access_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Application) ProtoMessage() {}

func (x *AccessScheme_Application) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Application.ProtoReflect.Descriptor instead.
func (*AccessScheme_Application) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 5}
}

type AccessScheme_Server_TCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *AccessScheme_Server_TCP) Reset() {
	*x = AccessScheme_Server_TCP{}
	mi := &file_access_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Server_TCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Server_TCP) ProtoMessage() {}

func (x *AccessScheme_Server_TCP) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Server_TCP.ProtoReflect.Descriptor instead.
func (*AccessScheme_Server_TCP) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AccessScheme_Server_TCP) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Server_TCP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Server_TCP) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type AccessScheme_Server_UDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *AccessScheme_Server_UDP) Reset() {
	*x = AccessScheme_Server_UDP{}
	mi := &file_access_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Server_UDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Server_UDP) ProtoMessage() {}

func (x *AccessScheme_Server_UDP) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Server_UDP.ProtoReflect.Descriptor instead.
func (*AccessScheme_Server_UDP) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *AccessScheme_Server_UDP) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Server_UDP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Server_UDP) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type AccessScheme_Server_SSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are assignable to Access:
	//
	//	*AccessScheme_Server_SSH_Password
	//	*AccessScheme_Server_SSH_Key
	//	*AccessScheme_Server_SSH_Agent
	Access isAccessScheme_Server_SSH_Access `protobuf_oneof:"access"`
}

func (x *AccessScheme_Server_SSH) Reset() {
	*x = AccessScheme_Server_SSH{}
	mi := &file_access_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Server_SSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Server_SSH) ProtoMessage() {}

func (x *AccessScheme_Server_SSH) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Server_SSH.ProtoReflect.Descriptor instead.
func (*AccessScheme_Server_SSH) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *AccessScheme_Server_SSH) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Server_SSH) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Server_SSH) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (m *AccessScheme_Server_SSH) GetAccess() isAccessScheme_Server_SSH_Access {
	if m != nil {
		return m.Access
	}
	return nil
}

func (x *AccessScheme_Server_SSH) GetPassword() *auth.Auth_Password {
	if x, ok := x.GetAccess().(*AccessScheme_Server_SSH_Password); ok {
		return x.Password
	}
	return nil
}

func (x *AccessScheme_Server_SSH) GetKey() *auth.Auth_Key {
	if x, ok := x.GetAccess().(*AccessScheme_Server_SSH_Key); ok {
		return x.Key
	}
	return nil
}

func (x *AccessScheme_Server_SSH) GetAgent() *auth.Auth_Agent {
	if x, ok := x.GetAccess().(*AccessScheme_Server_SSH_Agent); ok {
		return x.Agent
	}
	return nil
}

type isAccessScheme_Server_SSH_Access interface {
	isAccessScheme_Server_SSH_Access()
}

type AccessScheme_Server_SSH_Password struct {
	Password *auth.Auth_Password `protobuf:"bytes,4,opt,name=password,proto3,oneof"`
}

type AccessScheme_Server_SSH_Key struct {
	Key *auth.Auth_Key `protobuf:"bytes,5,opt,name=key,proto3,oneof"`
}

type AccessScheme_Server_SSH_Agent struct {
	Agent *auth.Auth_Agent `protobuf:"bytes,6,opt,name=agent,proto3,oneof"`
}

func (*AccessScheme_Server_SSH_Password) isAccessScheme_Server_SSH_Access() {}

func (*AccessScheme_Server_SSH_Key) isAccessScheme_Server_SSH_Access() {}

func (*AccessScheme_Server_SSH_Agent) isAccessScheme_Server_SSH_Access() {}

type AccessScheme_Server_Telnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Access  *auth.Auth_Password `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *AccessScheme_Server_Telnet) Reset() {
	*x = AccessScheme_Server_Telnet{}
	mi := &file_access_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Server_Telnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Server_Telnet) ProtoMessage() {}

func (x *AccessScheme_Server_Telnet) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Server_Telnet.ProtoReflect.Descriptor instead.
func (*AccessScheme_Server_Telnet) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *AccessScheme_Server_Telnet) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Server_Telnet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Server_Telnet) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Server_Telnet) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

type AccessScheme_Database_MySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias        string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address      string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port         int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DatabaseName string              `protobuf:"bytes,4,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Access       *auth.Auth_Password `protobuf:"bytes,5,opt,name=access,proto3" json:"access,omitempty"`
	Mtls         *auth.Auth_MTLS     `protobuf:"bytes,6,opt,name=mtls,proto3" json:"mtls,omitempty"`
}

func (x *AccessScheme_Database_MySQL) Reset() {
	*x = AccessScheme_Database_MySQL{}
	mi := &file_access_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_MySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_MySQL) ProtoMessage() {}

func (x *AccessScheme_Database_MySQL) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_MySQL.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_MySQL) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *AccessScheme_Database_MySQL) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_MySQL) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Database_MySQL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Database_MySQL) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *AccessScheme_Database_MySQL) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_MySQL) GetMtls() *auth.Auth_MTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

type AccessScheme_Database_Postgres struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias          string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address        string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port           int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DatabaseName   string              `protobuf:"bytes,4,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Access         *auth.Auth_Password `protobuf:"bytes,5,opt,name=access,proto3" json:"access,omitempty"`
	Mtls           *auth.Auth_MTLS     `protobuf:"bytes,6,opt,name=mtls,proto3" json:"mtls,omitempty"`
	ServerNameMtls string              `protobuf:"bytes,7,opt,name=server_name_mtls,json=serverNameMtls,proto3" json:"server_name_mtls,omitempty"`
}

func (x *AccessScheme_Database_Postgres) Reset() {
	*x = AccessScheme_Database_Postgres{}
	mi := &file_access_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_Postgres) ProtoMessage() {}

func (x *AccessScheme_Database_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_Postgres.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_Postgres) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *AccessScheme_Database_Postgres) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_Postgres) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Database_Postgres) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Database_Postgres) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *AccessScheme_Database_Postgres) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_Postgres) GetMtls() *auth.Auth_MTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *AccessScheme_Database_Postgres) GetServerNameMtls() string {
	if x != nil {
		return x.ServerNameMtls
	}
	return ""
}

type AccessScheme_Database_Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address     string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port        int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Access      *auth.Auth_Password `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
	TlsRequired bool                `protobuf:"varint,5,opt,name=tls_required,json=tlsRequired,proto3" json:"tls_required,omitempty"`
}

func (x *AccessScheme_Database_Redis) Reset() {
	*x = AccessScheme_Database_Redis{}
	mi := &file_access_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_Redis) ProtoMessage() {}

func (x *AccessScheme_Database_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_Redis.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_Redis) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *AccessScheme_Database_Redis) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_Redis) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Database_Redis) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Database_Redis) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_Redis) GetTlsRequired() bool {
	if x != nil {
		return x.TlsRequired
	}
	return false
}

type AccessScheme_Database_MongoDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias          string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address        string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port           int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DatabaseName   string              `protobuf:"bytes,4,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Access         *auth.Auth_Password `protobuf:"bytes,5,opt,name=access,proto3" json:"access,omitempty"`
	TlsRequired    bool                `protobuf:"varint,6,opt,name=tls_required,json=tlsRequired,proto3" json:"tls_required,omitempty"`
	ReplicaConnect bool                `protobuf:"varint,7,opt,name=replica_connect,json=replicaConnect,proto3" json:"replica_connect,omitempty"`
}

func (x *AccessScheme_Database_MongoDB) Reset() {
	*x = AccessScheme_Database_MongoDB{}
	mi := &file_access_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_MongoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_MongoDB) ProtoMessage() {}

func (x *AccessScheme_Database_MongoDB) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_MongoDB.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_MongoDB) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *AccessScheme_Database_MongoDB) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_MongoDB) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Database_MongoDB) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Database_MongoDB) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *AccessScheme_Database_MongoDB) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_MongoDB) GetTlsRequired() bool {
	if x != nil {
		return x.TlsRequired
	}
	return false
}

func (x *AccessScheme_Database_MongoDB) GetReplicaConnect() bool {
	if x != nil {
		return x.ReplicaConnect
	}
	return false
}

type AccessScheme_Database_Elastic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address     string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port        int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Access      *auth.Auth_Password `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
	TlsRequired bool                `protobuf:"varint,5,opt,name=tls_required,json=tlsRequired,proto3" json:"tls_required,omitempty"`
}

func (x *AccessScheme_Database_Elastic) Reset() {
	*x = AccessScheme_Database_Elastic{}
	mi := &file_access_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_Elastic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_Elastic) ProtoMessage() {}

func (x *AccessScheme_Database_Elastic) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_Elastic.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_Elastic) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *AccessScheme_Database_Elastic) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_Elastic) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Database_Elastic) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Database_Elastic) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_Elastic) GetTlsRequired() bool {
	if x != nil {
		return x.TlsRequired
	}
	return false
}

type AccessScheme_Database_DynamoDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	// string address = 2 [(buf.validate.field).string.address = true, (buf.validate.field).ignore_empty = true];
	// int32 port = 3 [(buf.validate.field).int32 = { gte: 1 lt: 65536 }, (buf.validate.field).ignore_empty = true];
	Region string         `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Api    *auth.Auth_API `protobuf:"bytes,5,opt,name=api,proto3" json:"api,omitempty"`
}

func (x *AccessScheme_Database_DynamoDB) Reset() {
	*x = AccessScheme_Database_DynamoDB{}
	mi := &file_access_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_DynamoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_DynamoDB) ProtoMessage() {}

func (x *AccessScheme_Database_DynamoDB) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_DynamoDB.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_DynamoDB) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (x *AccessScheme_Database_DynamoDB) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_DynamoDB) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AccessScheme_Database_DynamoDB) GetApi() *auth.Auth_API {
	if x != nil {
		return x.Api
	}
	return nil
}

type AccessScheme_Database_Cassandra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address     string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port        int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Access      *auth.Auth_Password `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
	TlsRequired bool                `protobuf:"varint,5,opt,name=tls_required,json=tlsRequired,proto3" json:"tls_required,omitempty"`
}

func (x *AccessScheme_Database_Cassandra) Reset() {
	*x = AccessScheme_Database_Cassandra{}
	mi := &file_access_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_Cassandra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_Cassandra) ProtoMessage() {}

func (x *AccessScheme_Database_Cassandra) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_Cassandra.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_Cassandra) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 6}
}

func (x *AccessScheme_Database_Cassandra) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_Cassandra) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Database_Cassandra) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Database_Cassandra) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_Cassandra) GetTlsRequired() bool {
	if x != nil {
		return x.TlsRequired
	}
	return false
}

type AccessScheme_Database_SQLServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias           string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address         string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port            int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Access          *auth.Auth_Password `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
	Schema          string              `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	DefaultDatabase bool                `protobuf:"varint,6,opt,name=default_database,json=defaultDatabase,proto3" json:"default_database,omitempty"`
}

func (x *AccessScheme_Database_SQLServer) Reset() {
	*x = AccessScheme_Database_SQLServer{}
	mi := &file_access_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_SQLServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_SQLServer) ProtoMessage() {}

func (x *AccessScheme_Database_SQLServer) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_SQLServer.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_SQLServer) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 7}
}

func (x *AccessScheme_Database_SQLServer) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_SQLServer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Database_SQLServer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Database_SQLServer) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_SQLServer) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *AccessScheme_Database_SQLServer) GetDefaultDatabase() bool {
	if x != nil {
		return x.DefaultDatabase
	}
	return false
}

type AccessScheme_Database_Snowflake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias  string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Region string              `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Access *auth.Auth_Password `protobuf:"bytes,3,opt,name=access,proto3" json:"access,omitempty"`
	Schema string              `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *AccessScheme_Database_Snowflake) Reset() {
	*x = AccessScheme_Database_Snowflake{}
	mi := &file_access_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Database_Snowflake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Database_Snowflake) ProtoMessage() {}

func (x *AccessScheme_Database_Snowflake) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Database_Snowflake.ProtoReflect.Descriptor instead.
func (*AccessScheme_Database_Snowflake) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1, 8}
}

func (x *AccessScheme_Database_Snowflake) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Database_Snowflake) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AccessScheme_Database_Snowflake) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Database_Snowflake) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type AccessScheme_Desktop_RDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Access  *auth.Auth_Password `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *AccessScheme_Desktop_RDP) Reset() {
	*x = AccessScheme_Desktop_RDP{}
	mi := &file_access_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Desktop_RDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Desktop_RDP) ProtoMessage() {}

func (x *AccessScheme_Desktop_RDP) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Desktop_RDP.ProtoReflect.Descriptor instead.
func (*AccessScheme_Desktop_RDP) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *AccessScheme_Desktop_RDP) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Desktop_RDP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Desktop_RDP) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Desktop_RDP) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

type AccessScheme_Desktop_VNC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string              `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Access  *auth.Auth_Password `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *AccessScheme_Desktop_VNC) Reset() {
	*x = AccessScheme_Desktop_VNC{}
	mi := &file_access_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Desktop_VNC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Desktop_VNC) ProtoMessage() {}

func (x *AccessScheme_Desktop_VNC) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Desktop_VNC.ProtoReflect.Descriptor instead.
func (*AccessScheme_Desktop_VNC) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *AccessScheme_Desktop_VNC) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Desktop_VNC) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Desktop_VNC) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Desktop_VNC) GetAccess() *auth.Auth_Password {
	if x != nil {
		return x.Access
	}
	return nil
}

type AccessScheme_Container_Docker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string          `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32           `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Mtls    *auth.Auth_MTLS `protobuf:"bytes,4,opt,name=mtls,proto3" json:"mtls,omitempty"`
}

func (x *AccessScheme_Container_Docker) Reset() {
	*x = AccessScheme_Container_Docker{}
	mi := &file_access_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Container_Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Container_Docker) ProtoMessage() {}

func (x *AccessScheme_Container_Docker) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Container_Docker.ProtoReflect.Descriptor instead.
func (*AccessScheme_Container_Docker) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *AccessScheme_Container_Docker) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Container_Docker) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Container_Docker) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Container_Docker) GetMtls() *auth.Auth_MTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

type AccessScheme_Container_K8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias                string          `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Address              string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port                 int32           `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Mtls                 *auth.Auth_MTLS `protobuf:"bytes,4,opt,name=mtls,proto3" json:"mtls,omitempty"`
	HealthcheckNamespace string          `protobuf:"bytes,5,opt,name=healthcheck_namespace,json=healthcheckNamespace,proto3" json:"healthcheck_namespace,omitempty"`
}

func (x *AccessScheme_Container_K8S) Reset() {
	*x = AccessScheme_Container_K8S{}
	mi := &file_access_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Container_K8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Container_K8S) ProtoMessage() {}

func (x *AccessScheme_Container_K8S) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Container_K8S.ProtoReflect.Descriptor instead.
func (*AccessScheme_Container_K8S) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *AccessScheme_Container_K8S) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Container_K8S) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessScheme_Container_K8S) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessScheme_Container_K8S) GetMtls() *auth.Auth_MTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *AccessScheme_Container_K8S) GetHealthcheckNamespace() string {
	if x != nil {
		return x.HealthcheckNamespace
	}
	return ""
}

type AccessScheme_Cloud_AWS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias             string         `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Access            *auth.Auth_API `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
	HealthcheckRegion string         `protobuf:"bytes,3,opt,name=healthcheck_region,json=healthcheckRegion,proto3" json:"healthcheck_region,omitempty"`
}

func (x *AccessScheme_Cloud_AWS) Reset() {
	*x = AccessScheme_Cloud_AWS{}
	mi := &file_access_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Cloud_AWS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Cloud_AWS) ProtoMessage() {}

func (x *AccessScheme_Cloud_AWS) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Cloud_AWS.ProtoReflect.Descriptor instead.
func (*AccessScheme_Cloud_AWS) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *AccessScheme_Cloud_AWS) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Cloud_AWS) GetAccess() *auth.Auth_API {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *AccessScheme_Cloud_AWS) GetHealthcheckRegion() string {
	if x != nil {
		return x.HealthcheckRegion
	}
	return ""
}

type AccessScheme_Cloud_GCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias                 string `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	ServiceAccountKeyfile string `protobuf:"bytes,2,opt,name=service_account_keyfile,json=serviceAccountKeyfile,proto3" json:"service_account_keyfile,omitempty"`
	Scopes                string `protobuf:"bytes,3,opt,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *AccessScheme_Cloud_GCP) Reset() {
	*x = AccessScheme_Cloud_GCP{}
	mi := &file_access_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Cloud_GCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Cloud_GCP) ProtoMessage() {}

func (x *AccessScheme_Cloud_GCP) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Cloud_GCP.ProtoReflect.Descriptor instead.
func (*AccessScheme_Cloud_GCP) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *AccessScheme_Cloud_GCP) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Cloud_GCP) GetServiceAccountKeyfile() string {
	if x != nil {
		return x.ServiceAccountKeyfile
	}
	return ""
}

func (x *AccessScheme_Cloud_GCP) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

type AccessScheme_Cloud_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       string `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	AppId       string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Tenant      string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Password    string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Certificate string `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *AccessScheme_Cloud_Azure) Reset() {
	*x = AccessScheme_Cloud_Azure{}
	mi := &file_access_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Cloud_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Cloud_Azure) ProtoMessage() {}

func (x *AccessScheme_Cloud_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Cloud_Azure.ProtoReflect.Descriptor instead.
func (*AccessScheme_Cloud_Azure) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *AccessScheme_Cloud_Azure) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Cloud_Azure) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AccessScheme_Cloud_Azure) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *AccessScheme_Cloud_Azure) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccessScheme_Cloud_Azure) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

type AccessScheme_Cloud_DO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias  string         `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Access *auth.Auth_API `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *AccessScheme_Cloud_DO) Reset() {
	*x = AccessScheme_Cloud_DO{}
	mi := &file_access_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Cloud_DO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Cloud_DO) ProtoMessage() {}

func (x *AccessScheme_Cloud_DO) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Cloud_DO.ProtoReflect.Descriptor instead.
func (*AccessScheme_Cloud_DO) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4, 3}
}

func (x *AccessScheme_Cloud_DO) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Cloud_DO) GetAccess() *auth.Auth_API {
	if x != nil {
		return x.Access
	}
	return nil
}

type AccessScheme_Cloud_Hetzner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias  string         `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
	Access *auth.Auth_API `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *AccessScheme_Cloud_Hetzner) Reset() {
	*x = AccessScheme_Cloud_Hetzner{}
	mi := &file_access_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Cloud_Hetzner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Cloud_Hetzner) ProtoMessage() {}

func (x *AccessScheme_Cloud_Hetzner) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Cloud_Hetzner.ProtoReflect.Descriptor instead.
func (*AccessScheme_Cloud_Hetzner) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4, 4}
}

func (x *AccessScheme_Cloud_Hetzner) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AccessScheme_Cloud_Hetzner) GetAccess() *auth.Auth_API {
	if x != nil {
		return x.Access
	}
	return nil
}

type AccessScheme_Application_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"-"`  
}

func (x *AccessScheme_Application_Site) Reset() {
	*x = AccessScheme_Application_Site{}
	mi := &file_access_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessScheme_Application_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessScheme_Application_Site) ProtoMessage() {}

func (x *AccessScheme_Application_Site) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessScheme_Application_Site.ProtoReflect.Descriptor instead.
func (*AccessScheme_Application_Site) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *AccessScheme_Application_Site) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

var File_access_proto protoreflect.FileDescriptor

var file_access_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x2a, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x63, 0x70, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x43, 0x50, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x63, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x64, 0x70,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x44, 0x50, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x64, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x73, 0x68, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x73, 0x68, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x6e, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e, 0x65,
	0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x48, 0x00,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x12,
	0x55, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x44, 0x42, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x12, 0x52, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x12, 0x55, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x48,
	0x00, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x64, 0x62, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43,
	0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x48, 0x00, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x12, 0x58, 0x0a,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x71,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x64, 0x70,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x52, 0x44, 0x50, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x52, 0x64, 0x70, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x5f, 0x76, 0x6e, 0x63, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x56, 0x4e, 0x43, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x56, 0x6e, 0x63, 0x12, 0x53, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6b, 0x38, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4b, 0x38, 0x53, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4b, 0x38, 0x73, 0x12, 0x3e,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x77, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41,
	0x57, 0x53, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x77, 0x73, 0x12, 0x3e,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x67, 0x63, 0x70, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47,
	0x43, 0x50, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x63, 0x70, 0x12, 0x44,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x98, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x6f,
	0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x44, 0x4f, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44,
	0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x68, 0x65, 0x74, 0x7a, 0x6e,
	0x65, 0x72, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x48, 0x65, 0x74, 0x7a, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x48, 0x65, 0x74, 0x7a, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x74, 0x65, 0x1a, 0xe5, 0x04, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x66, 0x0a,
	0x03, 0x54, 0x43, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x66, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a,
	0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xf1, 0x01,
	0x0a, 0x03, 0x53, 0x53, 0x48, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48,
	0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x1a, 0x96, 0x01, 0x0a, 0x06, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a,
	0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0xf8, 0x0d, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0xdf, 0x01, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01,
	0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48,
	0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x4d,
	0x54, 0x4c, 0x53, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x1a, 0x8c, 0x02, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba,
	0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28,
	0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x74, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x74,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x74, 0x6c, 0x73, 0x1a, 0xb8, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01,
	0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba,
	0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x1a, 0x88, 0x02, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03,
	0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0,
	0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0xba,
	0x01, 0x0a, 0x07, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10,
	0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x74, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x5a, 0x0a, 0x08, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x50, 0x49, 0x52, 0x03, 0x61, 0x70, 0x69, 0x1a, 0xbc, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x73,
	0x61, 0x6e, 0x64, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48,
	0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0xdc, 0x01, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x7e, 0x0a, 0x09, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0xb5, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x1a, 0x93, 0x01, 0x0a, 0x03, 0x52, 0x44, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80,
	0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x03, 0x56, 0x4e, 0x43, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03,
	0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0,
	0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0xdf, 0x02,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x8e, 0x01, 0x0a, 0x06,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba,
	0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28,
	0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x1a, 0xc0, 0x01, 0x0a,
	0x03, 0x4b, 0x38, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xd0, 0x01, 0x01, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0xd0, 0x01, 0x01, 0x1a, 0x06, 0x10, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e,
	0x4d, 0x54, 0x4c, 0x53, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a,
	0x8d, 0x04, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x72, 0x0a, 0x03, 0x41, 0x57, 0x53,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x6b, 0x0a,
	0x03, 0x47, 0x43, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x05, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x72, 0x04, 0x10, 0x08, 0x18, 0x20, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x1a, 0x42, 0x0a, 0x02, 0x44, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26,
	0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x47, 0x0a, 0x07, 0x48, 0x65, 0x74, 0x7a, 0x6e, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a,
	0x2b, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c,
	0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0f, 0x0a, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x2a, 0xcc, 0x04,
	0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x64,
	0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x63, 0x70, 0x10, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x64, 0x70, 0x10, 0x66,
	0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x73, 0x68, 0x10, 0x67,
	0x12, 0x11, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x65,
	0x74, 0x10, 0x68, 0x12, 0x0d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x10,
	0xc8, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x10, 0xc9, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x10, 0xca, 0x01, 0x12,
	0x13, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x10, 0xcb, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x10, 0xcc, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x10,
	0xcd, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x10, 0xce, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61,
	0x10, 0xcf, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xd0, 0x01, 0x12, 0x17, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x10, 0xd1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x10, 0xac, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x72,
	0x64, 0x70, 0x10, 0xad, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x5f, 0x76, 0x6e, 0x63, 0x10, 0xae, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x10, 0x90, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x91, 0x03, 0x12, 0x12,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x38, 0x73, 0x10,
	0x92, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x10, 0xf4, 0x03, 0x12, 0x0e,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x77, 0x73, 0x10, 0xf5, 0x03, 0x12, 0x0e,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x67, 0x63, 0x70, 0x10, 0xf6, 0x03, 0x12, 0x10,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x10, 0xf7, 0x03,
	0x12, 0x0d, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x6f, 0x10, 0xf8, 0x03, 0x12,
	0x12, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x68, 0x65, 0x74, 0x7a, 0x6e, 0x65, 0x72,
	0x10, 0xf9, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xd8, 0x04, 0x12, 0x15, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x10, 0xd9, 0x04, 0x42, 0x3c, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x72, 0x62, 0x6f,
	0x74, 0x2f, 0x77, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_access_proto_rawDescOnce sync.Once
	file_access_proto_rawDescData = file_access_proto_rawDesc
)

func file_access_proto_rawDescGZIP() []byte {
	file_access_proto_rawDescOnce.Do(func() {
		file_access_proto_rawDescData = protoimpl.X.CompressGZIP(file_access_proto_rawDescData)
	})
	return file_access_proto_rawDescData
}

var file_access_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_access_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_access_proto_goTypes = []any{
	(SchemeType)(0),                         // 0: access.SchemeType
	(*AccessScheme)(nil),                    // 1: access.AccessScheme
	(*AccessScheme_Server)(nil),             // 2: access.AccessScheme.Server
	(*AccessScheme_Database)(nil),           // 3: access.AccessScheme.Database
	(*AccessScheme_Desktop)(nil),            // 4: access.AccessScheme.Desktop
	(*AccessScheme_Container)(nil),          // 5: access.AccessScheme.Container
	(*AccessScheme_Cloud)(nil),              // 6: access.AccessScheme.Cloud
	(*AccessScheme_Application)(nil),        // 7: access.AccessScheme.Application
	(*AccessScheme_Server_TCP)(nil),         // 8: access.AccessScheme.Server.TCP
	(*AccessScheme_Server_UDP)(nil),         // 9: access.AccessScheme.Server.UDP
	(*AccessScheme_Server_SSH)(nil),         // 10: access.AccessScheme.Server.SSH
	(*AccessScheme_Server_Telnet)(nil),      // 11: access.AccessScheme.Server.Telnet
	(*AccessScheme_Database_MySQL)(nil),     // 12: access.AccessScheme.Database.MySQL
	(*AccessScheme_Database_Postgres)(nil),  // 13: access.AccessScheme.Database.Postgres
	(*AccessScheme_Database_Redis)(nil),     // 14: access.AccessScheme.Database.Redis
	(*AccessScheme_Database_MongoDB)(nil),   // 15: access.AccessScheme.Database.MongoDB
	(*AccessScheme_Database_Elastic)(nil),   // 16: access.AccessScheme.Database.Elastic
	(*AccessScheme_Database_DynamoDB)(nil),  // 17: access.AccessScheme.Database.DynamoDB
	(*AccessScheme_Database_Cassandra)(nil), // 18: access.AccessScheme.Database.Cassandra
	(*AccessScheme_Database_SQLServer)(nil), // 19: access.AccessScheme.Database.SQLServer
	(*AccessScheme_Database_Snowflake)(nil), // 20: access.AccessScheme.Database.Snowflake
	(*AccessScheme_Desktop_RDP)(nil),        // 21: access.AccessScheme.Desktop.RDP
	(*AccessScheme_Desktop_VNC)(nil),        // 22: access.AccessScheme.Desktop.VNC
	(*AccessScheme_Container_Docker)(nil),   // 23: access.AccessScheme.Container.Docker
	(*AccessScheme_Container_K8S)(nil),      // 24: access.AccessScheme.Container.K8S
	(*AccessScheme_Cloud_AWS)(nil),          // 25: access.AccessScheme.Cloud.AWS
	(*AccessScheme_Cloud_GCP)(nil),          // 26: access.AccessScheme.Cloud.GCP
	(*AccessScheme_Cloud_Azure)(nil),        // 27: access.AccessScheme.Cloud.Azure
	(*AccessScheme_Cloud_DO)(nil),           // 28: access.AccessScheme.Cloud.DO
	(*AccessScheme_Cloud_Hetzner)(nil),      // 29: access.AccessScheme.Cloud.Hetzner
	(*AccessScheme_Application_Site)(nil),   // 30: access.AccessScheme.Application.Site
	(*auth.Auth_Password)(nil),              // 31: auth.Auth.Password
	(*auth.Auth_Key)(nil),                   // 32: auth.Auth.Key
	(*auth.Auth_Agent)(nil),                 // 33: auth.Auth.Agent
	(*auth.Auth_MTLS)(nil),                  // 34: auth.Auth.MTLS
	(*auth.Auth_API)(nil),                   // 35: auth.Auth.API
}
var file_access_proto_depIdxs = []int32{
	8,  // 0: access.AccessScheme.server_tcp:type_name -> access.AccessScheme.Server.TCP
	9,  // 1: access.AccessScheme.server_udp:type_name -> access.AccessScheme.Server.UDP
	10, // 2: access.AccessScheme.server_ssh:type_name -> access.AccessScheme.Server.SSH
	11, // 3: access.AccessScheme.server_telnet:type_name -> access.AccessScheme.Server.Telnet
	12, // 4: access.AccessScheme.database_mysql:type_name -> access.AccessScheme.Database.MySQL
	13, // 5: access.AccessScheme.database_postgres:type_name -> access.AccessScheme.Database.Postgres
	14, // 6: access.AccessScheme.database_redis:type_name -> access.AccessScheme.Database.Redis
	15, // 7: access.AccessScheme.database_mongodb:type_name -> access.AccessScheme.Database.MongoDB
	16, // 8: access.AccessScheme.database_elastic:type_name -> access.AccessScheme.Database.Elastic
	17, // 9: access.AccessScheme.database_dynamodb:type_name -> access.AccessScheme.Database.DynamoDB
	18, // 10: access.AccessScheme.database_cassandra:type_name -> access.AccessScheme.Database.Cassandra
	19, // 11: access.AccessScheme.database_sqlserver:type_name -> access.AccessScheme.Database.SQLServer
	20, // 12: access.AccessScheme.database_snowflake:type_name -> access.AccessScheme.Database.Snowflake
	21, // 13: access.AccessScheme.desktop_rdp:type_name -> access.AccessScheme.Desktop.RDP
	22, // 14: access.AccessScheme.desktop_vnc:type_name -> access.AccessScheme.Desktop.VNC
	23, // 15: access.AccessScheme.container_docker:type_name -> access.AccessScheme.Container.Docker
	24, // 16: access.AccessScheme.container_k8s:type_name -> access.AccessScheme.Container.K8S
	25, // 17: access.AccessScheme.cloud_aws:type_name -> access.AccessScheme.Cloud.AWS
	26, // 18: access.AccessScheme.cloud_gcp:type_name -> access.AccessScheme.Cloud.GCP
	27, // 19: access.AccessScheme.cloud_azure:type_name -> access.AccessScheme.Cloud.Azure
	28, // 20: access.AccessScheme.cloud_do:type_name -> access.AccessScheme.Cloud.DO
	29, // 21: access.AccessScheme.cloud_hetzner:type_name -> access.AccessScheme.Cloud.Hetzner
	30, // 22: access.AccessScheme.application_site:type_name -> access.AccessScheme.Application.Site
	31, // 23: access.AccessScheme.Server.SSH.password:type_name -> auth.Auth.Password
	32, // 24: access.AccessScheme.Server.SSH.key:type_name -> auth.Auth.Key
	33, // 25: access.AccessScheme.Server.SSH.agent:type_name -> auth.Auth.Agent
	31, // 26: access.AccessScheme.Server.Telnet.access:type_name -> auth.Auth.Password
	31, // 27: access.AccessScheme.Database.MySQL.access:type_name -> auth.Auth.Password
	34, // 28: access.AccessScheme.Database.MySQL.mtls:type_name -> auth.Auth.MTLS
	31, // 29: access.AccessScheme.Database.Postgres.access:type_name -> auth.Auth.Password
	34, // 30: access.AccessScheme.Database.Postgres.mtls:type_name -> auth.Auth.MTLS
	31, // 31: access.AccessScheme.Database.Redis.access:type_name -> auth.Auth.Password
	31, // 32: access.AccessScheme.Database.MongoDB.access:type_name -> auth.Auth.Password
	31, // 33: access.AccessScheme.Database.Elastic.access:type_name -> auth.Auth.Password
	35, // 34: access.AccessScheme.Database.DynamoDB.api:type_name -> auth.Auth.API
	31, // 35: access.AccessScheme.Database.Cassandra.access:type_name -> auth.Auth.Password
	31, // 36: access.AccessScheme.Database.SQLServer.access:type_name -> auth.Auth.Password
	31, // 37: access.AccessScheme.Database.Snowflake.access:type_name -> auth.Auth.Password
	31, // 38: access.AccessScheme.Desktop.RDP.access:type_name -> auth.Auth.Password
	31, // 39: access.AccessScheme.Desktop.VNC.access:type_name -> auth.Auth.Password
	34, // 40: access.AccessScheme.Container.Docker.mtls:type_name -> auth.Auth.MTLS
	34, // 41: access.AccessScheme.Container.K8S.mtls:type_name -> auth.Auth.MTLS
	35, // 42: access.AccessScheme.Cloud.AWS.access:type_name -> auth.Auth.API
	35, // 43: access.AccessScheme.Cloud.DO.access:type_name -> auth.Auth.API
	35, // 44: access.AccessScheme.Cloud.Hetzner.access:type_name -> auth.Auth.API
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_access_proto_init() }
func file_access_proto_init() {
	if File_access_proto != nil {
		return
	}
	file_access_proto_msgTypes[0].OneofWrappers = []any{
		(*AccessScheme_ServerTcp)(nil),
		(*AccessScheme_ServerUdp)(nil),
		(*AccessScheme_ServerSsh)(nil),
		(*AccessScheme_ServerTelnet)(nil),
		(*AccessScheme_DatabaseMysql)(nil),
		(*AccessScheme_DatabasePostgres)(nil),
		(*AccessScheme_DatabaseRedis)(nil),
		(*AccessScheme_DatabaseMongodb)(nil),
		(*AccessScheme_DatabaseElastic)(nil),
		(*AccessScheme_DatabaseDynamodb)(nil),
		(*AccessScheme_DatabaseCassandra)(nil),
		(*AccessScheme_DatabaseSqlserver)(nil),
		(*AccessScheme_DatabaseSnowflake)(nil),
		(*AccessScheme_DesktopRdp)(nil),
		(*AccessScheme_DesktopVnc)(nil),
		(*AccessScheme_ContainerDocker)(nil),
		(*AccessScheme_ContainerK8S)(nil),
		(*AccessScheme_CloudAws)(nil),
		(*AccessScheme_CloudGcp)(nil),
		(*AccessScheme_CloudAzure)(nil),
		(*AccessScheme_CloudDo)(nil),
		(*AccessScheme_CloudHetzner)(nil),
		(*AccessScheme_ApplicationSite)(nil),
	}
	file_access_proto_msgTypes[9].OneofWrappers = []any{
		(*AccessScheme_Server_SSH_Password)(nil),
		(*AccessScheme_Server_SSH_Key)(nil),
		(*AccessScheme_Server_SSH_Agent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_access_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_access_proto_goTypes,
		DependencyIndexes: file_access_proto_depIdxs,
		EnumInfos:         file_access_proto_enumTypes,
		MessageInfos:      file_access_proto_msgTypes,
	}.Build()
	File_access_proto = out.File
	file_access_proto_rawDesc = nil
	file_access_proto_goTypes = nil
	file_access_proto_depIdxs = nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: audit.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _audit_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListAudits with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAudits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAudits with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAuditsMultiError, or
// nil if none found.
func (m *ListAudits) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAudits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuditsMultiError(errors)
	}

	return nil
}

// ListAuditsMultiError is an error wrapping multiple validation errors
// returned by ListAudits.ValidateAll() if the designated constraints aren't met.
type ListAuditsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditsMultiError) AllErrors() []error { return m }

// ListAuditsValidationError is the validation error returned by
// ListAudits.Validate if the designated constraints aren't met.
type ListAuditsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditsValidationError) ErrorName() string { return "ListAuditsValidationError" }

// Error satisfies the builtin error interface
func (e ListAuditsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAudits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditsValidationError{}

// Validate checks the field values on Audit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Audit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Audit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuditMultiError, or nil if none found.
func (m *Audit) ValidateAll() error {
	return m.validate(true)
}

func (m *Audit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditMultiError(errors)
	}

	return nil
}

// AuditMultiError is an error wrapping multiple validation errors returned by
// Audit.ValidateAll() if the designated constraints aren't met.
type AuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditMultiError) AllErrors() []error { return m }

// AuditValidationError is the validation error returned by Audit.Validate if
// the designated constraints aren't met.
type AuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditValidationError) ErrorName() string { return "AuditValidationError" }

// Error satisfies the builtin error interface
func (e AuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditValidationError{}

// Validate checks the field values on AddAudit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddAudit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddAuditMultiError, or nil
// if none found.
func (m *AddAudit) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAudit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAuditMultiError(errors)
	}

	return nil
}

// AddAuditMultiError is an error wrapping multiple validation errors returned
// by AddAudit.ValidateAll() if the designated constraints aren't met.
type AddAuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAuditMultiError) AllErrors() []error { return m }

// AddAuditValidationError is the validation error returned by
// AddAudit.Validate if the designated constraints aren't met.
type AddAuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAuditValidationError) ErrorName() string { return "AddAuditValidationError" }

// Error satisfies the builtin error interface
func (e AddAuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAudit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAuditValidationError{}

// Validate checks the field values on UpdateAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateAudit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateAuditMultiError, or
// nil if none found.
func (m *UpdateAudit) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAudit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAuditMultiError(errors)
	}

	return nil
}

// UpdateAuditMultiError is an error wrapping multiple validation errors
// returned by UpdateAudit.ValidateAll() if the designated constraints aren't met.
type UpdateAuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuditMultiError) AllErrors() []error { return m }

// UpdateAuditValidationError is the validation error returned by
// UpdateAudit.Validate if the designated constraints aren't met.
type UpdateAuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuditValidationError) ErrorName() string { return "UpdateAuditValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAudit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuditValidationError{}

// Validate checks the field values on DeleteAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteAudit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAudit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteAuditMultiError, or
// nil if none found.
func (m *DeleteAudit) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAudit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAuditMultiError(errors)
	}

	return nil
}

// DeleteAuditMultiError is an error wrapping multiple validation errors
// returned by DeleteAudit.ValidateAll() if the designated constraints aren't met.
type DeleteAuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuditMultiError) AllErrors() []error { return m }

// DeleteAuditValidationError is the validation error returned by
// DeleteAudit.Validate if the designated constraints aren't met.
type DeleteAuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuditValidationError) ErrorName() string { return "DeleteAuditValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAudit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuditValidationError{}

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Audit

	// no validation rules for Duration

	// no validation rules for Screen

	// no validation rules for Type

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on ListRecords with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecords with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRecordsMultiError, or
// nil if none found.
func (m *ListRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRecordsMultiError(errors)
	}

	return nil
}

// ListRecordsMultiError is an error wrapping multiple validation errors
// returned by ListRecords.ValidateAll() if the designated constraints aren't met.
type ListRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecordsMultiError) AllErrors() []error { return m }

// ListRecordsValidationError is the validation error returned by
// ListRecords.Validate if the designated constraints aren't met.
type ListRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecordsValidationError) ErrorName() string { return "ListRecordsValidationError" }

// Error satisfies the builtin error interface
func (e ListRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecordsValidationError{}

// Validate checks the field values on AddRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRecordMultiError, or nil
// if none found.
func (m *AddRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRecordMultiError(errors)
	}

	return nil
}

// AddRecordMultiError is an error wrapping multiple validation errors returned
// by AddRecord.ValidateAll() if the designated constraints aren't met.
type AddRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRecordMultiError) AllErrors() []error { return m }

// AddRecordValidationError is the validation error returned by
// AddRecord.Validate if the designated constraints aren't met.
type AddRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRecordValidationError) ErrorName() string { return "AddRecordValidationError" }

// Error satisfies the builtin error interface
func (e AddRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRecordValidationError{}

// Validate checks the field values on ListAudits_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAudits_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAudits_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAudits_RequestMultiError, or nil if none found.
func (m *ListAudits_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAudits_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = ListAudits_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAudits_RequestMultiError(errors)
	}

	return nil
}

func (m *ListAudits_Request) _validateUuid(uuid string) error {
	if matched := _audit_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListAudits_RequestMultiError is an error wrapping multiple validation errors
// returned by ListAudits_Request.ValidateAll() if the designated constraints
// aren't met.
type ListAudits_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAudits_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAudits_RequestMultiError) AllErrors() []error { return m }

// ListAudits_RequestValidationError is the validation error returned by
// ListAudits_Request.Validate if the designated constraints aren't met.
type ListAudits_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAudits_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAudits_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAudits_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAudits_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAudits_RequestValidationError) ErrorName() string {
	return "ListAudits_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAudits_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAudits_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAudits_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAudits_RequestValidationError{}

// Validate checks the field values on ListAudits_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAudits_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAudits_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAudits_ResponseMultiError, or nil if none found.
func (m *ListAudits_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAudits_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAudits_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAudits_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAudits_ResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAudits_ResponseMultiError(errors)
	}

	return nil
}

// ListAudits_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListAudits_Response.ValidateAll() if the designated
// constraints aren't met.
type ListAudits_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAudits_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAudits_ResponseMultiError) AllErrors() []error { return m }

// ListAudits_ResponseValidationError is the validation error returned by
// ListAudits_Response.Validate if the designated constraints aren't met.
type ListAudits_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAudits_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAudits_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAudits_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAudits_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAudits_ResponseValidationError) ErrorName() string {
	return "ListAudits_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAudits_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAudits_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAudits_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAudits_ResponseValidationError{}

// Validate checks the field values on Audit_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Audit_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Audit_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Audit_RequestMultiError, or
// nil if none found.
func (m *Audit_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Audit_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAuditId()); err != nil {
		err = Audit_RequestValidationError{
			field:  "AuditId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Audit_RequestMultiError(errors)
	}

	return nil
}

func (m *Audit_Request) _validateUuid(uuid string) error {
	if matched := _audit_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Audit_RequestMultiError is an error wrapping multiple validation errors
// returned by Audit_Request.ValidateAll() if the designated constraints
// aren't met.
type Audit_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Audit_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Audit_RequestMultiError) AllErrors() []error { return m }

// Audit_RequestValidationError is the validation error returned by
// Audit_Request.Validate if the designated constraints aren't met.
type Audit_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Audit_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Audit_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Audit_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Audit_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Audit_RequestValidationError) ErrorName() string { return "Audit_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Audit_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudit_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Audit_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Audit_RequestValidationError{}

// Validate checks the field values on Audit_Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Audit_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Audit_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Audit_ResponseMultiError,
// or nil if none found.
func (m *Audit_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Audit_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Audit_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Audit_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Audit_ResponseValidationError{
				field:  "LastUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Audit_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Audit_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Audit_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Audit_ResponseMultiError(errors)
	}

	return nil
}

// Audit_ResponseMultiError is an error wrapping multiple validation errors
// returned by Audit_Response.ValidateAll() if the designated constraints
// aren't met.
type Audit_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Audit_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Audit_ResponseMultiError) AllErrors() []error { return m }

// Audit_ResponseValidationError is the validation error returned by
// Audit_Response.Validate if the designated constraints aren't met.
type Audit_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Audit_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Audit_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Audit_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Audit_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Audit_ResponseValidationError) ErrorName() string { return "Audit_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Audit_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudit_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Audit_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Audit_ResponseValidationError{}

// Validate checks the field values on AddAudit_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAudit_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAudit_RequestMultiError, or nil if none found.
func (m *AddAudit_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAudit_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetServerId()); err != nil {
		err = AddAudit_RequestValidationError{
			field:  "ServerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = AddAudit_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddAudit_RequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddAudit_RequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAudit_RequestValidationError{
				field:  "TimeStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for Session

	// no validation rules for ClientIp

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Command

	// no validation rules for Title

	// no validation rules for EnvTerm

	// no validation rules for EnvShell

	if len(errors) > 0 {
		return AddAudit_RequestMultiError(errors)
	}

	return nil
}

func (m *AddAudit_Request) _validateUuid(uuid string) error {
	if matched := _audit_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddAudit_RequestMultiError is an error wrapping multiple validation errors
// returned by AddAudit_Request.ValidateAll() if the designated constraints
// aren't met.
type AddAudit_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAudit_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAudit_RequestMultiError) AllErrors() []error { return m }

// AddAudit_RequestValidationError is the validation error returned by
// AddAudit_Request.Validate if the designated constraints aren't met.
type AddAudit_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAudit_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAudit_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAudit_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAudit_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAudit_RequestValidationError) ErrorName() string { return "AddAudit_RequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAudit_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAudit_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAudit_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAudit_RequestValidationError{}

// Validate checks the field values on AddAudit_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAudit_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAudit_ResponseMultiError, or nil if none found.
func (m *AddAudit_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAudit_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	if len(errors) > 0 {
		return AddAudit_ResponseMultiError(errors)
	}

	return nil
}

// AddAudit_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddAudit_Response.ValidateAll() if the designated constraints
// aren't met.
type AddAudit_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAudit_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAudit_ResponseMultiError) AllErrors() []error { return m }

// AddAudit_ResponseValidationError is the validation error returned by
// AddAudit_Response.Validate if the designated constraints aren't met.
type AddAudit_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAudit_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAudit_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAudit_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAudit_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAudit_ResponseValidationError) ErrorName() string {
	return "AddAudit_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAudit_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAudit_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAudit_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAudit_ResponseValidationError{}

// Validate checks the field values on UpdateAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAudit_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAudit_RequestMultiError, or nil if none found.
func (m *UpdateAudit_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAudit_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for EnvTerm

	// no validation rules for Duration

	if all {
		switch v := interface{}(m.GetTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAudit_RequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAudit_RequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAudit_RequestValidationError{
				field:  "TimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAudit_RequestMultiError(errors)
	}

	return nil
}

// UpdateAudit_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAudit_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateAudit_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAudit_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAudit_RequestMultiError) AllErrors() []error { return m }

// UpdateAudit_RequestValidationError is the validation error returned by
// UpdateAudit_Request.Validate if the designated constraints aren't met.
type UpdateAudit_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAudit_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAudit_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAudit_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAudit_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAudit_RequestValidationError) ErrorName() string {
	return "UpdateAudit_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAudit_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAudit_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAudit_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAudit_RequestValidationError{}

// Validate checks the field values on UpdateAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAudit_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAudit_ResponseMultiError, or nil if none found.
func (m *UpdateAudit_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAudit_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAudit_ResponseMultiError(errors)
	}

	return nil
}

// UpdateAudit_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAudit_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateAudit_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAudit_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAudit_ResponseMultiError) AllErrors() []error { return m }

// UpdateAudit_ResponseValidationError is the validation error returned by
// UpdateAudit_Response.Validate if the designated constraints aren't met.
type UpdateAudit_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAudit_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAudit_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAudit_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAudit_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAudit_ResponseValidationError) ErrorName() string {
	return "UpdateAudit_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAudit_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAudit_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAudit_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAudit_ResponseValidationError{}

// Validate checks the field values on DeleteAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAudit_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAudit_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAudit_RequestMultiError, or nil if none found.
func (m *DeleteAudit_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAudit_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAuditId()); err != nil {
		err = DeleteAudit_RequestValidationError{
			field:  "AuditId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAudit_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteAudit_Request) _validateUuid(uuid string) error {
	if matched := _audit_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAudit_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAudit_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteAudit_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAudit_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAudit_RequestMultiError) AllErrors() []error { return m }

// DeleteAudit_RequestValidationError is the validation error returned by
// DeleteAudit_Request.Validate if the designated constraints aren't met.
type DeleteAudit_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAudit_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAudit_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAudit_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAudit_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAudit_RequestValidationError) ErrorName() string {
	return "DeleteAudit_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAudit_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAudit_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAudit_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAudit_RequestValidationError{}

// Validate checks the field values on DeleteAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAudit_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAudit_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAudit_ResponseMultiError, or nil if none found.
func (m *DeleteAudit_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAudit_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAudit_ResponseMultiError(errors)
	}

	return nil
}

// DeleteAudit_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAudit_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteAudit_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAudit_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAudit_ResponseMultiError) AllErrors() []error { return m }

// DeleteAudit_ResponseValidationError is the validation error returned by
// DeleteAudit_Response.Validate if the designated constraints aren't met.
type DeleteAudit_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAudit_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAudit_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAudit_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAudit_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAudit_ResponseValidationError) ErrorName() string {
	return "DeleteAudit_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAudit_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAudit_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAudit_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAudit_ResponseValidationError{}

// Validate checks the field values on ListRecords_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecords_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecords_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecords_RequestMultiError, or nil if none found.
func (m *ListRecords_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecords_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAuditId()); err != nil {
		err = ListRecords_RequestValidationError{
			field:  "AuditId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRecords_RequestMultiError(errors)
	}

	return nil
}

func (m *ListRecords_Request) _validateUuid(uuid string) error {
	if matched := _audit_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListRecords_RequestMultiError is an error wrapping multiple validation
// errors returned by ListRecords_Request.ValidateAll() if the designated
// constraints aren't met.
type ListRecords_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecords_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecords_RequestMultiError) AllErrors() []error { return m }

// ListRecords_RequestValidationError is the validation error returned by
// ListRecords_Request.Validate if the designated constraints aren't met.
type ListRecords_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecords_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecords_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecords_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecords_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecords_RequestValidationError) ErrorName() string {
	return "ListRecords_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecords_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecords_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecords_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecords_RequestValidationError{}

// Validate checks the field values on ListRecords_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecords_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecords_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecords_ResponseMultiError, or nil if none found.
func (m *ListRecords_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecords_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRecords_ResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRecords_ResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRecords_ResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRecords_ResponseMultiError(errors)
	}

	return nil
}

// ListRecords_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListRecords_Response.ValidateAll() if the designated
// constraints aren't met.
type ListRecords_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecords_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecords_ResponseMultiError) AllErrors() []error { return m }

// ListRecords_ResponseValidationError is the validation error returned by
// ListRecords_Response.Validate if the designated constraints aren't met.
type ListRecords_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecords_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecords_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecords_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecords_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecords_ResponseValidationError) ErrorName() string {
	return "ListRecords_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecords_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecords_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecords_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecords_ResponseValidationError{}

// Validate checks the field values on AddRecord_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRecord_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRecord_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRecord_RequestMultiError, or nil if none found.
func (m *AddRecord_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRecord_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAuditId()); err != nil {
		err = AddRecord_RequestValidationError{
			field:  "AuditId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddRecord_RequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddRecord_RequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddRecord_RequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddRecord_RequestMultiError(errors)
	}

	return nil
}

func (m *AddRecord_Request) _validateUuid(uuid string) error {
	if matched := _audit_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddRecord_RequestMultiError is an error wrapping multiple validation errors
// returned by AddRecord_Request.ValidateAll() if the designated constraints
// aren't met.
type AddRecord_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRecord_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRecord_RequestMultiError) AllErrors() []error { return m }

// AddRecord_RequestValidationError is the validation error returned by
// AddRecord_Request.Validate if the designated constraints aren't met.
type AddRecord_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRecord_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRecord_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRecord_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRecord_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRecord_RequestValidationError) ErrorName() string {
	return "AddRecord_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRecord_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRecord_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRecord_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRecord_RequestValidationError{}

// Validate checks the field values on AddRecord_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRecord_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRecord_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRecord_ResponseMultiError, or nil if none found.
func (m *AddRecord_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRecord_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRecord_ResponseMultiError(errors)
	}

	return nil
}

// AddRecord_ResponseMultiError is an error wrapping multiple validation errors
// returned by AddRecord_Response.ValidateAll() if the designated constraints
// aren't met.
type AddRecord_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRecord_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRecord_ResponseMultiError) AllErrors() []error { return m }

// AddRecord_ResponseValidationError is the validation error returned by
// AddRecord_Response.Validate if the designated constraints aren't met.
type AddRecord_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRecord_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRecord_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRecord_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRecord_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRecord_ResponseValidationError) ErrorName() string {
	return "AddRecord_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRecord_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRecord_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRecord_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRecord_ResponseValidationError{}

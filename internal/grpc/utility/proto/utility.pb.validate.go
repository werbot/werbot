// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: utility.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Countries with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Countries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Countries with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CountriesMultiError, or nil
// if none found.
func (m *Countries) ValidateAll() error {
	return m.validate(true)
}

func (m *Countries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountriesMultiError(errors)
	}

	return nil
}

// CountriesMultiError is an error wrapping multiple validation errors returned
// by Countries.ValidateAll() if the designated constraints aren't met.
type CountriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountriesMultiError) AllErrors() []error { return m }

// CountriesValidationError is the validation error returned by
// Countries.Validate if the designated constraints aren't met.
type CountriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountriesValidationError) ErrorName() string { return "CountriesValidationError" }

// Error satisfies the builtin error interface
func (e CountriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountriesValidationError{}

// Validate checks the field values on CountryByIP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CountryByIP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryByIP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CountryByIPMultiError, or
// nil if none found.
func (m *CountryByIP) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryByIP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountryByIPMultiError(errors)
	}

	return nil
}

// CountryByIPMultiError is an error wrapping multiple validation errors
// returned by CountryByIP.ValidateAll() if the designated constraints aren't met.
type CountryByIPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryByIPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryByIPMultiError) AllErrors() []error { return m }

// CountryByIPValidationError is the validation error returned by
// CountryByIP.Validate if the designated constraints aren't met.
type CountryByIPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryByIPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryByIPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryByIPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryByIPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryByIPValidationError) ErrorName() string { return "CountryByIPValidationError" }

// Error satisfies the builtin error interface
func (e CountryByIPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryByIP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryByIPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryByIPValidationError{}

// Validate checks the field values on Countries_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Countries_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Countries_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Countries_RequestMultiError, or nil if none found.
func (m *Countries_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Countries_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := Countries_RequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Countries_RequestMultiError(errors)
	}

	return nil
}

// Countries_RequestMultiError is an error wrapping multiple validation errors
// returned by Countries_Request.ValidateAll() if the designated constraints
// aren't met.
type Countries_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Countries_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Countries_RequestMultiError) AllErrors() []error { return m }

// Countries_RequestValidationError is the validation error returned by
// Countries_Request.Validate if the designated constraints aren't met.
type Countries_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Countries_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Countries_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Countries_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Countries_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Countries_RequestValidationError) ErrorName() string {
	return "Countries_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e Countries_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountries_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Countries_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Countries_RequestValidationError{}

// Validate checks the field values on Countries_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Countries_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Countries_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Countries_ResponseMultiError, or nil if none found.
func (m *Countries_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Countries_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCountries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Countries_ResponseValidationError{
						field:  fmt.Sprintf("Countries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Countries_ResponseValidationError{
						field:  fmt.Sprintf("Countries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Countries_ResponseValidationError{
					field:  fmt.Sprintf("Countries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Countries_ResponseMultiError(errors)
	}

	return nil
}

// Countries_ResponseMultiError is an error wrapping multiple validation errors
// returned by Countries_Response.ValidateAll() if the designated constraints
// aren't met.
type Countries_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Countries_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Countries_ResponseMultiError) AllErrors() []error { return m }

// Countries_ResponseValidationError is the validation error returned by
// Countries_Response.Validate if the designated constraints aren't met.
type Countries_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Countries_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Countries_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Countries_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Countries_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Countries_ResponseValidationError) ErrorName() string {
	return "Countries_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Countries_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountries_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Countries_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Countries_ResponseValidationError{}

// Validate checks the field values on Countries_Country with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Countries_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Countries_Country with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Countries_CountryMultiError, or nil if none found.
func (m *Countries_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *Countries_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Name

	if len(errors) > 0 {
		return Countries_CountryMultiError(errors)
	}

	return nil
}

// Countries_CountryMultiError is an error wrapping multiple validation errors
// returned by Countries_Country.ValidateAll() if the designated constraints
// aren't met.
type Countries_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Countries_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Countries_CountryMultiError) AllErrors() []error { return m }

// Countries_CountryValidationError is the validation error returned by
// Countries_Country.Validate if the designated constraints aren't met.
type Countries_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Countries_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Countries_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Countries_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Countries_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Countries_CountryValidationError) ErrorName() string {
	return "Countries_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e Countries_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountries_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Countries_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Countries_CountryValidationError{}

// Validate checks the field values on CountryByIP_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountryByIP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryByIP_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountryByIP_RequestMultiError, or nil if none found.
func (m *CountryByIP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryByIP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := CountryByIP_RequestValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CountryByIP_RequestMultiError(errors)
	}

	return nil
}

// CountryByIP_RequestMultiError is an error wrapping multiple validation
// errors returned by CountryByIP_Request.ValidateAll() if the designated
// constraints aren't met.
type CountryByIP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryByIP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryByIP_RequestMultiError) AllErrors() []error { return m }

// CountryByIP_RequestValidationError is the validation error returned by
// CountryByIP_Request.Validate if the designated constraints aren't met.
type CountryByIP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryByIP_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryByIP_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryByIP_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryByIP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryByIP_RequestValidationError) ErrorName() string {
	return "CountryByIP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountryByIP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryByIP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryByIP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryByIP_RequestValidationError{}

// Validate checks the field values on CountryByIP_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountryByIP_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryByIP_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountryByIP_ResponseMultiError, or nil if none found.
func (m *CountryByIP_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryByIP_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Code

	if len(errors) > 0 {
		return CountryByIP_ResponseMultiError(errors)
	}

	return nil
}

// CountryByIP_ResponseMultiError is an error wrapping multiple validation
// errors returned by CountryByIP_Response.ValidateAll() if the designated
// constraints aren't met.
type CountryByIP_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryByIP_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryByIP_ResponseMultiError) AllErrors() []error { return m }

// CountryByIP_ResponseValidationError is the validation error returned by
// CountryByIP_Response.Validate if the designated constraints aren't met.
type CountryByIP_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryByIP_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryByIP_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryByIP_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryByIP_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryByIP_ResponseValidationError) ErrorName() string {
	return "CountryByIP_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountryByIP_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryByIP_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryByIP_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryByIP_ResponseValidationError{}

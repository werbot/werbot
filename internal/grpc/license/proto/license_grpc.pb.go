// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: license.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LicenseHandlers_License_FullMethodName = "/license.LicenseHandlers/License"
)

// LicenseHandlersClient is the client API for LicenseHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LicenseHandlersClient interface {
	License(ctx context.Context, in *License_Request, opts ...grpc.CallOption) (*License_Response, error)
}

type licenseHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseHandlersClient(cc grpc.ClientConnInterface) LicenseHandlersClient {
	return &licenseHandlersClient{cc}
}

func (c *licenseHandlersClient) License(ctx context.Context, in *License_Request, opts ...grpc.CallOption) (*License_Response, error) {
	out := new(License_Response)
	err := c.cc.Invoke(ctx, LicenseHandlers_License_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseHandlersServer is the server API for LicenseHandlers service.
// All implementations must embed UnimplementedLicenseHandlersServer
// for forward compatibility
type LicenseHandlersServer interface {
	License(context.Context, *License_Request) (*License_Response, error)
	mustEmbedUnimplementedLicenseHandlersServer()
}

// UnimplementedLicenseHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedLicenseHandlersServer struct {
}

func (UnimplementedLicenseHandlersServer) License(context.Context, *License_Request) (*License_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method License not implemented")
}
func (UnimplementedLicenseHandlersServer) mustEmbedUnimplementedLicenseHandlersServer() {}

// UnsafeLicenseHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LicenseHandlersServer will
// result in compilation errors.
type UnsafeLicenseHandlersServer interface {
	mustEmbedUnimplementedLicenseHandlersServer()
}

func RegisterLicenseHandlersServer(s grpc.ServiceRegistrar, srv LicenseHandlersServer) {
	s.RegisterService(&LicenseHandlers_ServiceDesc, srv)
}

func _LicenseHandlers_License_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseHandlersServer).License(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseHandlers_License_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseHandlersServer).License(ctx, req.(*License_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// LicenseHandlers_ServiceDesc is the grpc.ServiceDesc for LicenseHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LicenseHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "license.LicenseHandlers",
	HandlerType: (*LicenseHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "License",
			Handler:    _LicenseHandlers_License_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "license.proto",
}

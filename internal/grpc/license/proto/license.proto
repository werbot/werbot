syntax = "proto3";

package license;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/werbot/werbot/internal/grpc/license/proto";

service LicenseHandlers {
  rpc License(License.Request) returns (License.Response) {}
}

// rpc License
message License {
  message Request {
    // string license = 1 [(buf.validate.field).string.pattern = '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$']; // @gotags: query:"license" params:"license"
    bytes license = 1;
  }

  message Response {
    int32 version = 1;
    string issued = 2;
    string customer = 3;
    string subscriber = 4;
    string type = 5;
    repeated string ip = 6;
    google.protobuf.Timestamp issued_at = 7;
    google.protobuf.Timestamp expires_at = 8;
    map<string, int32> limits = 9;
    repeated string modules = 10;
    bool expired = 11;
  }
}
// -----------------------------------------------------

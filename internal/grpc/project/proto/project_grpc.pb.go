// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: project.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectHandlers_ListProjects_FullMethodName  = "/project.ProjectHandlers/ListProjects"
	ProjectHandlers_Project_FullMethodName       = "/project.ProjectHandlers/Project"
	ProjectHandlers_AddProject_FullMethodName    = "/project.ProjectHandlers/AddProject"
	ProjectHandlers_UpdateProject_FullMethodName = "/project.ProjectHandlers/UpdateProject"
	ProjectHandlers_DeleteProject_FullMethodName = "/project.ProjectHandlers/DeleteProject"
	ProjectHandlers_Key_FullMethodName           = "/project.ProjectHandlers/Key"
	ProjectHandlers_AddKey_FullMethodName        = "/project.ProjectHandlers/AddKey"
	ProjectHandlers_UpdateKey_FullMethodName     = "/project.ProjectHandlers/UpdateKey"
	ProjectHandlers_DeleteKey_FullMethodName     = "/project.ProjectHandlers/DeleteKey"
)

// ProjectHandlersClient is the client API for ProjectHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectHandlersClient interface {
	ListProjects(ctx context.Context, in *ListProjects_Request, opts ...grpc.CallOption) (*ListProjects_Response, error)
	Project(ctx context.Context, in *Project_Request, opts ...grpc.CallOption) (*Project_Response, error)
	AddProject(ctx context.Context, in *AddProject_Request, opts ...grpc.CallOption) (*AddProject_Response, error)
	UpdateProject(ctx context.Context, in *UpdateProject_Request, opts ...grpc.CallOption) (*UpdateProject_Response, error)
	DeleteProject(ctx context.Context, in *DeleteProject_Request, opts ...grpc.CallOption) (*DeleteProject_Response, error)
	// API key section
	Key(ctx context.Context, in *Key_Request, opts ...grpc.CallOption) (*Key_Response, error)
	AddKey(ctx context.Context, in *AddKey_Request, opts ...grpc.CallOption) (*AddKey_Response, error)
	UpdateKey(ctx context.Context, in *UpdateKey_Request, opts ...grpc.CallOption) (*UpdateKey_Response, error)
	DeleteKey(ctx context.Context, in *DeleteKey_Request, opts ...grpc.CallOption) (*DeleteKey_Response, error)
}

type projectHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectHandlersClient(cc grpc.ClientConnInterface) ProjectHandlersClient {
	return &projectHandlersClient{cc}
}

func (c *projectHandlersClient) ListProjects(ctx context.Context, in *ListProjects_Request, opts ...grpc.CallOption) (*ListProjects_Response, error) {
	out := new(ListProjects_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) Project(ctx context.Context, in *Project_Request, opts ...grpc.CallOption) (*Project_Response, error) {
	out := new(Project_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_Project_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) AddProject(ctx context.Context, in *AddProject_Request, opts ...grpc.CallOption) (*AddProject_Response, error) {
	out := new(AddProject_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_AddProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) UpdateProject(ctx context.Context, in *UpdateProject_Request, opts ...grpc.CallOption) (*UpdateProject_Response, error) {
	out := new(UpdateProject_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) DeleteProject(ctx context.Context, in *DeleteProject_Request, opts ...grpc.CallOption) (*DeleteProject_Response, error) {
	out := new(DeleteProject_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) Key(ctx context.Context, in *Key_Request, opts ...grpc.CallOption) (*Key_Response, error) {
	out := new(Key_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_Key_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) AddKey(ctx context.Context, in *AddKey_Request, opts ...grpc.CallOption) (*AddKey_Response, error) {
	out := new(AddKey_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_AddKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) UpdateKey(ctx context.Context, in *UpdateKey_Request, opts ...grpc.CallOption) (*UpdateKey_Response, error) {
	out := new(UpdateKey_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_UpdateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHandlersClient) DeleteKey(ctx context.Context, in *DeleteKey_Request, opts ...grpc.CallOption) (*DeleteKey_Response, error) {
	out := new(DeleteKey_Response)
	err := c.cc.Invoke(ctx, ProjectHandlers_DeleteKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectHandlersServer is the server API for ProjectHandlers service.
// All implementations must embed UnimplementedProjectHandlersServer
// for forward compatibility
type ProjectHandlersServer interface {
	ListProjects(context.Context, *ListProjects_Request) (*ListProjects_Response, error)
	Project(context.Context, *Project_Request) (*Project_Response, error)
	AddProject(context.Context, *AddProject_Request) (*AddProject_Response, error)
	UpdateProject(context.Context, *UpdateProject_Request) (*UpdateProject_Response, error)
	DeleteProject(context.Context, *DeleteProject_Request) (*DeleteProject_Response, error)
	// API key section
	Key(context.Context, *Key_Request) (*Key_Response, error)
	AddKey(context.Context, *AddKey_Request) (*AddKey_Response, error)
	UpdateKey(context.Context, *UpdateKey_Request) (*UpdateKey_Response, error)
	DeleteKey(context.Context, *DeleteKey_Request) (*DeleteKey_Response, error)
	mustEmbedUnimplementedProjectHandlersServer()
}

// UnimplementedProjectHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedProjectHandlersServer struct {
}

func (UnimplementedProjectHandlersServer) ListProjects(context.Context, *ListProjects_Request) (*ListProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectHandlersServer) Project(context.Context, *Project_Request) (*Project_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Project not implemented")
}
func (UnimplementedProjectHandlersServer) AddProject(context.Context, *AddProject_Request) (*AddProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProject not implemented")
}
func (UnimplementedProjectHandlersServer) UpdateProject(context.Context, *UpdateProject_Request) (*UpdateProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectHandlersServer) DeleteProject(context.Context, *DeleteProject_Request) (*DeleteProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectHandlersServer) Key(context.Context, *Key_Request) (*Key_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Key not implemented")
}
func (UnimplementedProjectHandlersServer) AddKey(context.Context, *AddKey_Request) (*AddKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (UnimplementedProjectHandlersServer) UpdateKey(context.Context, *UpdateKey_Request) (*UpdateKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedProjectHandlersServer) DeleteKey(context.Context, *DeleteKey_Request) (*DeleteKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedProjectHandlersServer) mustEmbedUnimplementedProjectHandlersServer() {}

// UnsafeProjectHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectHandlersServer will
// result in compilation errors.
type UnsafeProjectHandlersServer interface {
	mustEmbedUnimplementedProjectHandlersServer()
}

func RegisterProjectHandlersServer(s grpc.ServiceRegistrar, srv ProjectHandlersServer) {
	s.RegisterService(&ProjectHandlers_ServiceDesc, srv)
}

func _ProjectHandlers_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjects_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).ListProjects(ctx, req.(*ListProjects_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_Project_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).Project(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_Project_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).Project(ctx, req.(*Project_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProject_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_AddProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).AddProject(ctx, req.(*AddProject_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProject_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).UpdateProject(ctx, req.(*UpdateProject_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProject_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).DeleteProject(ctx, req.(*DeleteProject_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_Key_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).Key(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_Key_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).Key(ctx, req.(*Key_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_AddKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).AddKey(ctx, req.(*AddKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_UpdateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).UpdateKey(ctx, req.(*UpdateKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectHandlers_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectHandlersServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectHandlers_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectHandlersServer).DeleteKey(ctx, req.(*DeleteKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectHandlers_ServiceDesc is the grpc.ServiceDesc for ProjectHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectHandlers",
	HandlerType: (*ProjectHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _ProjectHandlers_ListProjects_Handler,
		},
		{
			MethodName: "Project",
			Handler:    _ProjectHandlers_Project_Handler,
		},
		{
			MethodName: "AddProject",
			Handler:    _ProjectHandlers_AddProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectHandlers_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectHandlers_DeleteProject_Handler,
		},
		{
			MethodName: "Key",
			Handler:    _ProjectHandlers_Key_Handler,
		},
		{
			MethodName: "AddKey",
			Handler:    _ProjectHandlers_AddKey_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _ProjectHandlers_UpdateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _ProjectHandlers_DeleteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}

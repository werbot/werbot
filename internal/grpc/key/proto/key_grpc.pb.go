// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: key.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyHandlers_ListKeys_FullMethodName       = "/key.KeyHandlers/ListKeys"
	KeyHandlers_Key_FullMethodName            = "/key.KeyHandlers/Key"
	KeyHandlers_AddKey_FullMethodName         = "/key.KeyHandlers/AddKey"
	KeyHandlers_UpdateKey_FullMethodName      = "/key.KeyHandlers/UpdateKey"
	KeyHandlers_DeleteKey_FullMethodName      = "/key.KeyHandlers/DeleteKey"
	KeyHandlers_GenerateSSHKey_FullMethodName = "/key.KeyHandlers/GenerateSSHKey"
)

// KeyHandlersClient is the client API for KeyHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyHandlersClient interface {
	// Key section
	ListKeys(ctx context.Context, in *ListKeys_Request, opts ...grpc.CallOption) (*ListKeys_Response, error)
	Key(ctx context.Context, in *Key_Request, opts ...grpc.CallOption) (*Key_Response, error)
	AddKey(ctx context.Context, in *AddKey_Request, opts ...grpc.CallOption) (*AddKey_Response, error)
	UpdateKey(ctx context.Context, in *UpdateKey_Request, opts ...grpc.CallOption) (*UpdateKey_Response, error)
	DeleteKey(ctx context.Context, in *DeleteKey_Request, opts ...grpc.CallOption) (*DeleteKey_Response, error)
	// Generate key section
	GenerateSSHKey(ctx context.Context, in *GenerateSSHKey_Request, opts ...grpc.CallOption) (*GenerateSSHKey_Response, error)
}

type keyHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyHandlersClient(cc grpc.ClientConnInterface) KeyHandlersClient {
	return &keyHandlersClient{cc}
}

func (c *keyHandlersClient) ListKeys(ctx context.Context, in *ListKeys_Request, opts ...grpc.CallOption) (*ListKeys_Response, error) {
	out := new(ListKeys_Response)
	err := c.cc.Invoke(ctx, KeyHandlers_ListKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyHandlersClient) Key(ctx context.Context, in *Key_Request, opts ...grpc.CallOption) (*Key_Response, error) {
	out := new(Key_Response)
	err := c.cc.Invoke(ctx, KeyHandlers_Key_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyHandlersClient) AddKey(ctx context.Context, in *AddKey_Request, opts ...grpc.CallOption) (*AddKey_Response, error) {
	out := new(AddKey_Response)
	err := c.cc.Invoke(ctx, KeyHandlers_AddKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyHandlersClient) UpdateKey(ctx context.Context, in *UpdateKey_Request, opts ...grpc.CallOption) (*UpdateKey_Response, error) {
	out := new(UpdateKey_Response)
	err := c.cc.Invoke(ctx, KeyHandlers_UpdateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyHandlersClient) DeleteKey(ctx context.Context, in *DeleteKey_Request, opts ...grpc.CallOption) (*DeleteKey_Response, error) {
	out := new(DeleteKey_Response)
	err := c.cc.Invoke(ctx, KeyHandlers_DeleteKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyHandlersClient) GenerateSSHKey(ctx context.Context, in *GenerateSSHKey_Request, opts ...grpc.CallOption) (*GenerateSSHKey_Response, error) {
	out := new(GenerateSSHKey_Response)
	err := c.cc.Invoke(ctx, KeyHandlers_GenerateSSHKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyHandlersServer is the server API for KeyHandlers service.
// All implementations must embed UnimplementedKeyHandlersServer
// for forward compatibility
type KeyHandlersServer interface {
	// Key section
	ListKeys(context.Context, *ListKeys_Request) (*ListKeys_Response, error)
	Key(context.Context, *Key_Request) (*Key_Response, error)
	AddKey(context.Context, *AddKey_Request) (*AddKey_Response, error)
	UpdateKey(context.Context, *UpdateKey_Request) (*UpdateKey_Response, error)
	DeleteKey(context.Context, *DeleteKey_Request) (*DeleteKey_Response, error)
	// Generate key section
	GenerateSSHKey(context.Context, *GenerateSSHKey_Request) (*GenerateSSHKey_Response, error)
	mustEmbedUnimplementedKeyHandlersServer()
}

// UnimplementedKeyHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedKeyHandlersServer struct {
}

func (UnimplementedKeyHandlersServer) ListKeys(context.Context, *ListKeys_Request) (*ListKeys_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKeyHandlersServer) Key(context.Context, *Key_Request) (*Key_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Key not implemented")
}
func (UnimplementedKeyHandlersServer) AddKey(context.Context, *AddKey_Request) (*AddKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (UnimplementedKeyHandlersServer) UpdateKey(context.Context, *UpdateKey_Request) (*UpdateKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedKeyHandlersServer) DeleteKey(context.Context, *DeleteKey_Request) (*DeleteKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKeyHandlersServer) GenerateSSHKey(context.Context, *GenerateSSHKey_Request) (*GenerateSSHKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSSHKey not implemented")
}
func (UnimplementedKeyHandlersServer) mustEmbedUnimplementedKeyHandlersServer() {}

// UnsafeKeyHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyHandlersServer will
// result in compilation errors.
type UnsafeKeyHandlersServer interface {
	mustEmbedUnimplementedKeyHandlersServer()
}

func RegisterKeyHandlersServer(s grpc.ServiceRegistrar, srv KeyHandlersServer) {
	s.RegisterService(&KeyHandlers_ServiceDesc, srv)
}

func _KeyHandlers_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeys_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyHandlersServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyHandlers_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyHandlersServer).ListKeys(ctx, req.(*ListKeys_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyHandlers_Key_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyHandlersServer).Key(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyHandlers_Key_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyHandlersServer).Key(ctx, req.(*Key_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyHandlers_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyHandlersServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyHandlers_AddKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyHandlersServer).AddKey(ctx, req.(*AddKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyHandlers_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyHandlersServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyHandlers_UpdateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyHandlersServer).UpdateKey(ctx, req.(*UpdateKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyHandlers_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyHandlersServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyHandlers_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyHandlersServer).DeleteKey(ctx, req.(*DeleteKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyHandlers_GenerateSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSSHKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyHandlersServer).GenerateSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyHandlers_GenerateSSHKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyHandlersServer).GenerateSSHKey(ctx, req.(*GenerateSSHKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyHandlers_ServiceDesc is the grpc.ServiceDesc for KeyHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "key.KeyHandlers",
	HandlerType: (*KeyHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKeys",
			Handler:    _KeyHandlers_ListKeys_Handler,
		},
		{
			MethodName: "Key",
			Handler:    _KeyHandlers_Key_Handler,
		},
		{
			MethodName: "AddKey",
			Handler:    _KeyHandlers_AddKey_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _KeyHandlers_UpdateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeyHandlers_DeleteKey_Handler,
		},
		{
			MethodName: "GenerateSSHKey",
			Handler:    _KeyHandlers_GenerateSSHKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key.proto",
}

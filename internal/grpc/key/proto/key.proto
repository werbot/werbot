syntax = "proto3";

package key;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/werbot/werbot/internal/grpc/key/proto";

service KeyHandlers {
  // Key section
  rpc ListKeys(ListKeys.Request) returns (ListKeys.Response) {}
  rpc Key(Key.Request) returns (Key.Response) {}
  rpc AddKey(AddKey.Request) returns (AddKey.Response) {}
  rpc UpdateKey(UpdateKey.Request) returns (UpdateKey.Response) {}
  rpc DeleteKey(DeleteKey.Request) returns (DeleteKey.Response) {}

  // Generate key section
  rpc GenerateSSHKey(GenerateSSHKey.Request) returns (GenerateSSHKey.Response) {}
}

enum KeyType {
  unspecified = 0;
  ed25519 = 1;
  ecdsa = 2;
  rsa = 3;
}

// rpc ListKeys
message ListKeys {
  message Request {
    string user_id = 1;
    int32 limit = 2;
    int32 offset = 3;
    string sort_by = 4;
  }

  message Response {
    int32 total = 1;
    repeated Key.Response public_keys = 3;
  }
}
// -----------------------------------------------------

// rpc Key
message Key {
  message Request {
    string key_id = 1 [
      (buf.validate.field).string.uuid = true,
      (buf.validate.field).ignore_empty = true
    ]; // @gotags: query:"key_id"
    string user_id = 2 [
      (buf.validate.field).string.uuid = true,
      (buf.validate.field).ignore_empty = true
    ]; // @gotags: query:"user_id"
  }

  message Response {
    string key_id = 1;
    string user_id = 2;
    string user_login = 3;
    string title = 4;
    string key = 5;
    string fingerprint = 6;
    google.protobuf.Timestamp locked_at = 7;
    google.protobuf.Timestamp archived_at = 8;
    google.protobuf.Timestamp updated_at = 9;
    google.protobuf.Timestamp created_at = 10;
  }
}
// -----------------------------------------------------

// rpc AddKey
message AddKey {
  message Request {
    string user_id = 1 [
      (buf.validate.field).string.uuid = true,
      (buf.validate.field).ignore_empty = true
    ];
    string title = 2 [(buf.validate.field).string = {
      min_len: 3,
      max_len: 128
    }];
    string key = 3 [(buf.validate.field).string = {min_len: 70}];
  }

  message Response {
    string key_id = 1;
  }
}
// -----------------------------------------------------

// rpc UpdateKey
message UpdateKey {
  message Request {
    string key_id = 1 [(buf.validate.field).string.uuid = true]; // @gotags: query:"key_id"
    string user_id = 2 [
      (buf.validate.field).string.uuid = true,
      (buf.validate.field).ignore_empty = true
    ]; // @gotags: query:"user_id"
    string title = 3 [(buf.validate.field).string = {
      min_len: 3,
      max_len: 128
    }]; // @gotags: query:"title"
    string key = 4 [(buf.validate.field).string = {min_len: 128}]; // @gotags: query:"key"
  }

  message Response {}
}
// -----------------------------------------------------

// rpc DeleteKey
message DeleteKey {
  message Request {
    string user_id = 1 [
      (buf.validate.field).string.uuid = true,
      (buf.validate.field).ignore_empty = true
    ]; // @gotags: query:"user_id"
    string key_id = 2 [(buf.validate.field).string.uuid = true]; // @gotags: query:"key_id"
  }

  message Response {}
}
// -----------------------------------------------------

// rpc GenerateSSHKey
message GenerateSSHKey {
  message Request {
    KeyType key_type = 1;
  }

  message Response {
    KeyType key_type = 1;
    string uuid = 2;
    string passphrase = 3;
    //bytes private = 3;
    bytes public = 4;
    string finger_print = 5;
  }

  message Key {
    string public = 1;
    string private = 2;
    string password = 3;
  }
}
// -----------------------------------------------------

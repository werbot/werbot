syntax = "proto3";

package user;

option go_package = "github.com/werbot/werbot/internal/grpc/user/proto";;

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service UserHandlers {
  // User section
  rpc ListUsers(ListUsers.Request) returns (ListUsers.Response) {}
  rpc User(User.Request) returns (User.Response) {}
  rpc AddUser(AddUser.Request) returns (AddUser.Response) {}
  rpc UpdateUser(UpdateUser.Request) returns (UpdateUser.Response) {}
  rpc DeleteUser(DeleteUser.Request) returns (DeleteUser.Response) {}

  rpc UpdatePassword(UpdatePassword.Request) returns (UpdatePassword.Response) {}
}

enum Role {
  role_unspecified = 0;
  user = 1;
  manager = 2;
  admin = 3;
}


// rpc ListUsers
message ListUsers {
  message Request {
    int32 limit = 1;
    int32 offset = 2;
    string sort_by = 3;
    string query = 4;
  }

  message Response {
    message UserInfo{
      int32 servers_count = 1;
      int32 projects_count = 2;
      int32 keys_count = 3;
      User.Response user = 4;
    }
    int32 total = 1;
    repeated UserInfo users = 2;
  }
}

// rpc User
message User {
  message Request {
    string user_id = 1 [(validate.rules).string = {ignore_empty: true, uuid: true}]; // @gotags: query:"user_id" params:"user_id"
  }

  message Response {
    string user_id = 1;
    string login = 2;
    string name = 3;
    string surname = 4;
    string email = 5;
    bool enabled = 6;
    bool confirmed = 7;
    Role role = 8;
    string password = 9;
    google.protobuf.Timestamp last_update = 10;
    google.protobuf.Timestamp created = 11;
  }
}
// -----------------------------------------------------


// rpc AddUser
message AddUser {
  message Request {
    string login = 1    [(validate.rules).string = {pattern: '^[a-z0-9]+$', min_len: 3, max_len: 20}];
    string email = 2    [(validate.rules).string.email = true];
    string name = 3     [(validate.rules).string = {min_len: 3, max_len: 128}];
    string surname = 4  [(validate.rules).string = {min_len: 3, max_len: 128}];
    bool enabled = 5;
    bool confirmed = 6;
    string password = 7 [(validate.rules).string = { min_len: 8, max_len: 32 }];
  }

  message Response {
    string user_id = 1;
  }
}
// -----------------------------------------------------


// rpc UpdateUser
message UpdateUser {
  message Request {
    string user_id = 1 [(validate.rules).string = {ignore_empty: true, uuid: true}];
    oneof request {
      Info info = 2;
      bool enabled = 3;
      bool confirmed = 4;
    }
  }

  message Response{}

  message Info {
    string login = 1    [(validate.rules).string = {ignore_empty: true, pattern: '^[a-z0-9]+$', min_len: 3, max_len: 20}];
    string email = 2    [(validate.rules).string.email = true];
    string name = 3     [(validate.rules).string = {min_len: 3, max_len: 128}];
    string surname = 4  [(validate.rules).string = {min_len: 3, max_len: 128}];
  }
}

// -----------------------------------------------------

// rpc DeleteUser
message DeleteUser{
  message Request {
    string user_id = 1      [(validate.rules).string.uuid = true];
    oneof request {
      string password = 2 [(validate.rules).string = {min_len: 8, max_len: 32}];
      string token = 3    [(validate.rules).string = {ignore_empty: true, uuid: true}];
    }
  }

  message Response {
    string login = 1;
    string email = 2;
    string token = 3;
  }
}
// -----------------------------------------------------


// rpc UpdatePassword
message UpdatePassword {
  message Request {
    string user_id = 1      [(validate.rules).string.uuid = true];
    string old_password = 2 [(validate.rules).string = {min_len: 8, max_len: 32}];
    string new_password = 3 [(validate.rules).string = {min_len: 8, max_len: 32}];
  }

  message Response{
    string message = 1;
  }
}
// -----------------------------------------------------

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// source: member.proto

package member

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MemberHandlers_ProjectMembers_FullMethodName       = "/member.MemberHandlers/ProjectMembers"
	MemberHandlers_ProjectMember_FullMethodName        = "/member.MemberHandlers/ProjectMember"
	MemberHandlers_AddProjectMember_FullMethodName     = "/member.MemberHandlers/AddProjectMember"
	MemberHandlers_UpdateProjectMember_FullMethodName  = "/member.MemberHandlers/UpdateProjectMember"
	MemberHandlers_DeleteProjectMember_FullMethodName  = "/member.MemberHandlers/DeleteProjectMember"
	MemberHandlers_UsersWithoutProject_FullMethodName  = "/member.MemberHandlers/UsersWithoutProject"
	MemberHandlers_MembersInvite_FullMethodName        = "/member.MemberHandlers/MembersInvite"
	MemberHandlers_AddMemberInvite_FullMethodName      = "/member.MemberHandlers/AddMemberInvite"
	MemberHandlers_DeleteMemberInvite_FullMethodName   = "/member.MemberHandlers/DeleteMemberInvite"
	MemberHandlers_MemberInviteActivate_FullMethodName = "/member.MemberHandlers/MemberInviteActivate"
	MemberHandlers_SchemeMembers_FullMethodName        = "/member.MemberHandlers/SchemeMembers"
	MemberHandlers_SchemeMember_FullMethodName         = "/member.MemberHandlers/SchemeMember"
	MemberHandlers_AddSchemeMember_FullMethodName      = "/member.MemberHandlers/AddSchemeMember"
	MemberHandlers_UpdateSchemeMember_FullMethodName   = "/member.MemberHandlers/UpdateSchemeMember"
	MemberHandlers_DeleteSchemeMember_FullMethodName   = "/member.MemberHandlers/DeleteSchemeMember"
	MemberHandlers_MembersWithoutScheme_FullMethodName = "/member.MemberHandlers/MembersWithoutScheme"
)

// MemberHandlersClient is the client API for MemberHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberHandlersClient interface {
	// Project section
	ProjectMembers(ctx context.Context, in *ProjectMembers_Request, opts ...grpc.CallOption) (*ProjectMembers_Response, error)
	ProjectMember(ctx context.Context, in *ProjectMember_Request, opts ...grpc.CallOption) (*ProjectMember_Response, error)
	AddProjectMember(ctx context.Context, in *AddProjectMember_Request, opts ...grpc.CallOption) (*AddProjectMember_Response, error)
	UpdateProjectMember(ctx context.Context, in *UpdateProjectMember_Request, opts ...grpc.CallOption) (*UpdateProjectMember_Response, error)
	DeleteProjectMember(ctx context.Context, in *DeleteProjectMember_Request, opts ...grpc.CallOption) (*DeleteProjectMember_Response, error)
	// Used in finding and adding a new member to the project
	UsersWithoutProject(ctx context.Context, in *UsersWithoutProject_Request, opts ...grpc.CallOption) (*UsersWithoutProject_Response, error)
	// Invite section
	// TODO migrate to new invite component
	MembersInvite(ctx context.Context, in *MembersInvite_Request, opts ...grpc.CallOption) (*MembersInvite_Response, error)
	AddMemberInvite(ctx context.Context, in *AddMemberInvite_Request, opts ...grpc.CallOption) (*AddMemberInvite_Response, error)
	DeleteMemberInvite(ctx context.Context, in *DeleteMemberInvite_Request, opts ...grpc.CallOption) (*DeleteMemberInvite_Response, error)
	MemberInviteActivate(ctx context.Context, in *MemberInviteActivate_Request, opts ...grpc.CallOption) (*MemberInviteActivate_Response, error)
	// Scheme section
	SchemeMembers(ctx context.Context, in *SchemeMembers_Request, opts ...grpc.CallOption) (*SchemeMembers_Response, error)
	SchemeMember(ctx context.Context, in *SchemeMember_Request, opts ...grpc.CallOption) (*SchemeMember_Response, error)
	AddSchemeMember(ctx context.Context, in *AddSchemeMember_Request, opts ...grpc.CallOption) (*AddSchemeMember_Response, error)
	UpdateSchemeMember(ctx context.Context, in *UpdateSchemeMember_Request, opts ...grpc.CallOption) (*UpdateSchemeMember_Response, error)
	DeleteSchemeMember(ctx context.Context, in *DeleteSchemeMember_Request, opts ...grpc.CallOption) (*DeleteSchemeMember_Response, error)
	// Used in finding and adding a new member to the scheme
	MembersWithoutScheme(ctx context.Context, in *MembersWithoutScheme_Request, opts ...grpc.CallOption) (*MembersWithoutScheme_Response, error)
}

type memberHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberHandlersClient(cc grpc.ClientConnInterface) MemberHandlersClient {
	return &memberHandlersClient{cc}
}

func (c *memberHandlersClient) ProjectMembers(ctx context.Context, in *ProjectMembers_Request, opts ...grpc.CallOption) (*ProjectMembers_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectMembers_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_ProjectMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) ProjectMember(ctx context.Context, in *ProjectMember_Request, opts ...grpc.CallOption) (*ProjectMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_ProjectMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) AddProjectMember(ctx context.Context, in *AddProjectMember_Request, opts ...grpc.CallOption) (*AddProjectMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProjectMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_AddProjectMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UpdateProjectMember(ctx context.Context, in *UpdateProjectMember_Request, opts ...grpc.CallOption) (*UpdateProjectMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_UpdateProjectMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) DeleteProjectMember(ctx context.Context, in *DeleteProjectMember_Request, opts ...grpc.CallOption) (*DeleteProjectMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProjectMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_DeleteProjectMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UsersWithoutProject(ctx context.Context, in *UsersWithoutProject_Request, opts ...grpc.CallOption) (*UsersWithoutProject_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersWithoutProject_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_UsersWithoutProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) MembersInvite(ctx context.Context, in *MembersInvite_Request, opts ...grpc.CallOption) (*MembersInvite_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MembersInvite_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_MembersInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) AddMemberInvite(ctx context.Context, in *AddMemberInvite_Request, opts ...grpc.CallOption) (*AddMemberInvite_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberInvite_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_AddMemberInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) DeleteMemberInvite(ctx context.Context, in *DeleteMemberInvite_Request, opts ...grpc.CallOption) (*DeleteMemberInvite_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemberInvite_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_DeleteMemberInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) MemberInviteActivate(ctx context.Context, in *MemberInviteActivate_Request, opts ...grpc.CallOption) (*MemberInviteActivate_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberInviteActivate_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_MemberInviteActivate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) SchemeMembers(ctx context.Context, in *SchemeMembers_Request, opts ...grpc.CallOption) (*SchemeMembers_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchemeMembers_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_SchemeMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) SchemeMember(ctx context.Context, in *SchemeMember_Request, opts ...grpc.CallOption) (*SchemeMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchemeMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_SchemeMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) AddSchemeMember(ctx context.Context, in *AddSchemeMember_Request, opts ...grpc.CallOption) (*AddSchemeMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSchemeMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_AddSchemeMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) UpdateSchemeMember(ctx context.Context, in *UpdateSchemeMember_Request, opts ...grpc.CallOption) (*UpdateSchemeMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSchemeMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_UpdateSchemeMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) DeleteSchemeMember(ctx context.Context, in *DeleteSchemeMember_Request, opts ...grpc.CallOption) (*DeleteSchemeMember_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSchemeMember_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_DeleteSchemeMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberHandlersClient) MembersWithoutScheme(ctx context.Context, in *MembersWithoutScheme_Request, opts ...grpc.CallOption) (*MembersWithoutScheme_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MembersWithoutScheme_Response)
	err := c.cc.Invoke(ctx, MemberHandlers_MembersWithoutScheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberHandlersServer is the server API for MemberHandlers service.
// All implementations must embed UnimplementedMemberHandlersServer
// for forward compatibility.
type MemberHandlersServer interface {
	// Project section
	ProjectMembers(context.Context, *ProjectMembers_Request) (*ProjectMembers_Response, error)
	ProjectMember(context.Context, *ProjectMember_Request) (*ProjectMember_Response, error)
	AddProjectMember(context.Context, *AddProjectMember_Request) (*AddProjectMember_Response, error)
	UpdateProjectMember(context.Context, *UpdateProjectMember_Request) (*UpdateProjectMember_Response, error)
	DeleteProjectMember(context.Context, *DeleteProjectMember_Request) (*DeleteProjectMember_Response, error)
	// Used in finding and adding a new member to the project
	UsersWithoutProject(context.Context, *UsersWithoutProject_Request) (*UsersWithoutProject_Response, error)
	// Invite section
	// TODO migrate to new invite component
	MembersInvite(context.Context, *MembersInvite_Request) (*MembersInvite_Response, error)
	AddMemberInvite(context.Context, *AddMemberInvite_Request) (*AddMemberInvite_Response, error)
	DeleteMemberInvite(context.Context, *DeleteMemberInvite_Request) (*DeleteMemberInvite_Response, error)
	MemberInviteActivate(context.Context, *MemberInviteActivate_Request) (*MemberInviteActivate_Response, error)
	// Scheme section
	SchemeMembers(context.Context, *SchemeMembers_Request) (*SchemeMembers_Response, error)
	SchemeMember(context.Context, *SchemeMember_Request) (*SchemeMember_Response, error)
	AddSchemeMember(context.Context, *AddSchemeMember_Request) (*AddSchemeMember_Response, error)
	UpdateSchemeMember(context.Context, *UpdateSchemeMember_Request) (*UpdateSchemeMember_Response, error)
	DeleteSchemeMember(context.Context, *DeleteSchemeMember_Request) (*DeleteSchemeMember_Response, error)
	// Used in finding and adding a new member to the scheme
	MembersWithoutScheme(context.Context, *MembersWithoutScheme_Request) (*MembersWithoutScheme_Response, error)
	mustEmbedUnimplementedMemberHandlersServer()
}

// UnimplementedMemberHandlersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemberHandlersServer struct{}

func (UnimplementedMemberHandlersServer) ProjectMembers(context.Context, *ProjectMembers_Request) (*ProjectMembers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectMembers not implemented")
}
func (UnimplementedMemberHandlersServer) ProjectMember(context.Context, *ProjectMember_Request) (*ProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) AddProjectMember(context.Context, *AddProjectMember_Request) (*AddProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) UpdateProjectMember(context.Context, *UpdateProjectMember_Request) (*UpdateProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) DeleteProjectMember(context.Context, *DeleteProjectMember_Request) (*DeleteProjectMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectMember not implemented")
}
func (UnimplementedMemberHandlersServer) UsersWithoutProject(context.Context, *UsersWithoutProject_Request) (*UsersWithoutProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersWithoutProject not implemented")
}
func (UnimplementedMemberHandlersServer) MembersInvite(context.Context, *MembersInvite_Request) (*MembersInvite_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembersInvite not implemented")
}
func (UnimplementedMemberHandlersServer) AddMemberInvite(context.Context, *AddMemberInvite_Request) (*AddMemberInvite_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberInvite not implemented")
}
func (UnimplementedMemberHandlersServer) DeleteMemberInvite(context.Context, *DeleteMemberInvite_Request) (*DeleteMemberInvite_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberInvite not implemented")
}
func (UnimplementedMemberHandlersServer) MemberInviteActivate(context.Context, *MemberInviteActivate_Request) (*MemberInviteActivate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberInviteActivate not implemented")
}
func (UnimplementedMemberHandlersServer) SchemeMembers(context.Context, *SchemeMembers_Request) (*SchemeMembers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemeMembers not implemented")
}
func (UnimplementedMemberHandlersServer) SchemeMember(context.Context, *SchemeMember_Request) (*SchemeMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemeMember not implemented")
}
func (UnimplementedMemberHandlersServer) AddSchemeMember(context.Context, *AddSchemeMember_Request) (*AddSchemeMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchemeMember not implemented")
}
func (UnimplementedMemberHandlersServer) UpdateSchemeMember(context.Context, *UpdateSchemeMember_Request) (*UpdateSchemeMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemeMember not implemented")
}
func (UnimplementedMemberHandlersServer) DeleteSchemeMember(context.Context, *DeleteSchemeMember_Request) (*DeleteSchemeMember_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemeMember not implemented")
}
func (UnimplementedMemberHandlersServer) MembersWithoutScheme(context.Context, *MembersWithoutScheme_Request) (*MembersWithoutScheme_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembersWithoutScheme not implemented")
}
func (UnimplementedMemberHandlersServer) mustEmbedUnimplementedMemberHandlersServer() {}
func (UnimplementedMemberHandlersServer) testEmbeddedByValue()                        {}

// UnsafeMemberHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberHandlersServer will
// result in compilation errors.
type UnsafeMemberHandlersServer interface {
	mustEmbedUnimplementedMemberHandlersServer()
}

func RegisterMemberHandlersServer(s grpc.ServiceRegistrar, srv MemberHandlersServer) {
	// If the following call pancis, it indicates UnimplementedMemberHandlersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemberHandlers_ServiceDesc, srv)
}

func _MemberHandlers_ProjectMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMembers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ProjectMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_ProjectMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ProjectMembers(ctx, req.(*ProjectMembers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_ProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).ProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_ProjectMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).ProjectMember(ctx, req.(*ProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_AddProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).AddProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_AddProjectMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).AddProjectMember(ctx, req.(*AddProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UpdateProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UpdateProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_UpdateProjectMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UpdateProjectMember(ctx, req.(*UpdateProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_DeleteProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).DeleteProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_DeleteProjectMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).DeleteProjectMember(ctx, req.(*DeleteProjectMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UsersWithoutProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersWithoutProject_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UsersWithoutProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_UsersWithoutProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UsersWithoutProject(ctx, req.(*UsersWithoutProject_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_MembersInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersInvite_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).MembersInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_MembersInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).MembersInvite(ctx, req.(*MembersInvite_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_AddMemberInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberInvite_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).AddMemberInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_AddMemberInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).AddMemberInvite(ctx, req.(*AddMemberInvite_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_DeleteMemberInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberInvite_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).DeleteMemberInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_DeleteMemberInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).DeleteMemberInvite(ctx, req.(*DeleteMemberInvite_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_MemberInviteActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberInviteActivate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).MemberInviteActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_MemberInviteActivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).MemberInviteActivate(ctx, req.(*MemberInviteActivate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_SchemeMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemeMembers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).SchemeMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_SchemeMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).SchemeMembers(ctx, req.(*SchemeMembers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_SchemeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemeMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).SchemeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_SchemeMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).SchemeMember(ctx, req.(*SchemeMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_AddSchemeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSchemeMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).AddSchemeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_AddSchemeMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).AddSchemeMember(ctx, req.(*AddSchemeMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_UpdateSchemeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemeMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).UpdateSchemeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_UpdateSchemeMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).UpdateSchemeMember(ctx, req.(*UpdateSchemeMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_DeleteSchemeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemeMember_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).DeleteSchemeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_DeleteSchemeMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).DeleteSchemeMember(ctx, req.(*DeleteSchemeMember_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberHandlers_MembersWithoutScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersWithoutScheme_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberHandlersServer).MembersWithoutScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberHandlers_MembersWithoutScheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberHandlersServer).MembersWithoutScheme(ctx, req.(*MembersWithoutScheme_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberHandlers_ServiceDesc is the grpc.ServiceDesc for MemberHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "member.MemberHandlers",
	HandlerType: (*MemberHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProjectMembers",
			Handler:    _MemberHandlers_ProjectMembers_Handler,
		},
		{
			MethodName: "ProjectMember",
			Handler:    _MemberHandlers_ProjectMember_Handler,
		},
		{
			MethodName: "AddProjectMember",
			Handler:    _MemberHandlers_AddProjectMember_Handler,
		},
		{
			MethodName: "UpdateProjectMember",
			Handler:    _MemberHandlers_UpdateProjectMember_Handler,
		},
		{
			MethodName: "DeleteProjectMember",
			Handler:    _MemberHandlers_DeleteProjectMember_Handler,
		},
		{
			MethodName: "UsersWithoutProject",
			Handler:    _MemberHandlers_UsersWithoutProject_Handler,
		},
		{
			MethodName: "MembersInvite",
			Handler:    _MemberHandlers_MembersInvite_Handler,
		},
		{
			MethodName: "AddMemberInvite",
			Handler:    _MemberHandlers_AddMemberInvite_Handler,
		},
		{
			MethodName: "DeleteMemberInvite",
			Handler:    _MemberHandlers_DeleteMemberInvite_Handler,
		},
		{
			MethodName: "MemberInviteActivate",
			Handler:    _MemberHandlers_MemberInviteActivate_Handler,
		},
		{
			MethodName: "SchemeMembers",
			Handler:    _MemberHandlers_SchemeMembers_Handler,
		},
		{
			MethodName: "SchemeMember",
			Handler:    _MemberHandlers_SchemeMember_Handler,
		},
		{
			MethodName: "AddSchemeMember",
			Handler:    _MemberHandlers_AddSchemeMember_Handler,
		},
		{
			MethodName: "UpdateSchemeMember",
			Handler:    _MemberHandlers_UpdateSchemeMember_Handler,
		},
		{
			MethodName: "DeleteSchemeMember",
			Handler:    _MemberHandlers_DeleteSchemeMember_Handler,
		},
		{
			MethodName: "MembersWithoutScheme",
			Handler:    _MemberHandlers_MembersWithoutScheme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member.proto",
}

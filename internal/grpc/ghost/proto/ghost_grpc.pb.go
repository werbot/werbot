// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// source: ghost.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GhostHandlers_Containers_FullMethodName = "/ghost.GhostHandlers/Containers"
)

// GhostHandlersClient is the client API for GhostHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GhostHandlersClient interface {
	Containers(ctx context.Context, in *Containers_Request, opts ...grpc.CallOption) (*Containers_Response, error)
}

type ghostHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewGhostHandlersClient(cc grpc.ClientConnInterface) GhostHandlersClient {
	return &ghostHandlersClient{cc}
}

func (c *ghostHandlersClient) Containers(ctx context.Context, in *Containers_Request, opts ...grpc.CallOption) (*Containers_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Containers_Response)
	err := c.cc.Invoke(ctx, GhostHandlers_Containers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GhostHandlersServer is the server API for GhostHandlers service.
// All implementations must embed UnimplementedGhostHandlersServer
// for forward compatibility
type GhostHandlersServer interface {
	Containers(context.Context, *Containers_Request) (*Containers_Response, error)
	mustEmbedUnimplementedGhostHandlersServer()
}

// UnimplementedGhostHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedGhostHandlersServer struct {
}

func (UnimplementedGhostHandlersServer) Containers(context.Context, *Containers_Request) (*Containers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Containers not implemented")
}
func (UnimplementedGhostHandlersServer) mustEmbedUnimplementedGhostHandlersServer() {}

// UnsafeGhostHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GhostHandlersServer will
// result in compilation errors.
type UnsafeGhostHandlersServer interface {
	mustEmbedUnimplementedGhostHandlersServer()
}

func RegisterGhostHandlersServer(s grpc.ServiceRegistrar, srv GhostHandlersServer) {
	s.RegisterService(&GhostHandlers_ServiceDesc, srv)
}

func _GhostHandlers_Containers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Containers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhostHandlersServer).Containers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GhostHandlers_Containers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhostHandlersServer).Containers(ctx, req.(*Containers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GhostHandlers_ServiceDesc is the grpc.ServiceDesc for GhostHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GhostHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ghost.GhostHandlers",
	HandlerType: (*GhostHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Containers",
			Handler:    _GhostHandlers_Containers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ghost.proto",
}

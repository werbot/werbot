// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	proto "github.com/werbot/werbot/internal/grpc/user/proto"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = proto.Role(0)
)

// define the regex for a UUID once up-front
var _account_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SignIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SignInMultiError, or nil if none found.
func (m *SignIn) ValidateAll() error {
	return m.validate(true)
}

func (m *SignIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignInMultiError(errors)
	}

	return nil
}

// SignInMultiError is an error wrapping multiple validation errors returned by
// SignIn.ValidateAll() if the designated constraints aren't met.
type SignInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInMultiError) AllErrors() []error { return m }

// SignInValidationError is the validation error returned by SignIn.Validate if
// the designated constraints aren't met.
type SignInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInValidationError) ErrorName() string { return "SignInValidationError" }

// Error satisfies the builtin error interface
func (e SignInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInValidationError{}

// Validate checks the field values on ResetPassword with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetPassword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPassword with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetPasswordMultiError, or
// nil if none found.
func (m *ResetPassword) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPassword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordMultiError(errors)
	}

	return nil
}

// ResetPasswordMultiError is an error wrapping multiple validation errors
// returned by ResetPassword.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordMultiError) AllErrors() []error { return m }

// ResetPasswordValidationError is the validation error returned by
// ResetPassword.Validate if the designated constraints aren't met.
type ResetPasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordValidationError) ErrorName() string { return "ResetPasswordValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRefreshToken()); err != nil {
		err = RefreshTokenRequestValidationError{
			field:  "RefreshToken",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

func (m *RefreshTokenRequest) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on UserParameters with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserParameters with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserParametersMultiError,
// or nil if none found.
func (m *UserParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *UserParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for UserId

	// no validation rules for Roles

	// no validation rules for Sub

	if len(errors) > 0 {
		return UserParametersMultiError(errors)
	}

	return nil
}

// UserParametersMultiError is an error wrapping multiple validation errors
// returned by UserParameters.ValidateAll() if the designated constraints
// aren't met.
type UserParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserParametersMultiError) AllErrors() []error { return m }

// UserParametersValidationError is the validation error returned by
// UserParameters.Validate if the designated constraints aren't met.
type UserParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserParametersValidationError) ErrorName() string { return "UserParametersValidationError" }

// Error satisfies the builtin error interface
func (e UserParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserParametersValidationError{}

// Validate checks the field values on ListAccounts with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccounts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccounts with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccountsMultiError, or
// nil if none found.
func (m *ListAccounts) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccounts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAccountsMultiError(errors)
	}

	return nil
}

// ListAccountsMultiError is an error wrapping multiple validation errors
// returned by ListAccounts.ValidateAll() if the designated constraints aren't met.
type ListAccountsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsMultiError) AllErrors() []error { return m }

// ListAccountsValidationError is the validation error returned by
// ListAccounts.Validate if the designated constraints aren't met.
type ListAccountsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsValidationError) ErrorName() string { return "ListAccountsValidationError" }

// Error satisfies the builtin error interface
func (e ListAccountsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccounts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on AddAccount with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddAccountMultiError, or
// nil if none found.
func (m *AddAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAccountMultiError(errors)
	}

	return nil
}

// AddAccountMultiError is an error wrapping multiple validation errors
// returned by AddAccount.ValidateAll() if the designated constraints aren't met.
type AddAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccountMultiError) AllErrors() []error { return m }

// AddAccountValidationError is the validation error returned by
// AddAccount.Validate if the designated constraints aren't met.
type AddAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccountValidationError) ErrorName() string { return "AddAccountValidationError" }

// Error satisfies the builtin error interface
func (e AddAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccountValidationError{}

// Validate checks the field values on UpdateAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateAccountMultiError, or
// nil if none found.
func (m *UpdateAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccountMultiError(errors)
	}

	return nil
}

// UpdateAccountMultiError is an error wrapping multiple validation errors
// returned by UpdateAccount.ValidateAll() if the designated constraints
// aren't met.
type UpdateAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountMultiError) AllErrors() []error { return m }

// UpdateAccountValidationError is the validation error returned by
// UpdateAccount.Validate if the designated constraints aren't met.
type UpdateAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountValidationError) ErrorName() string { return "UpdateAccountValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountValidationError{}

// Validate checks the field values on DeleteAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteAccountMultiError, or
// nil if none found.
func (m *DeleteAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAccountMultiError(errors)
	}

	return nil
}

// DeleteAccountMultiError is an error wrapping multiple validation errors
// returned by DeleteAccount.ValidateAll() if the designated constraints
// aren't met.
type DeleteAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountMultiError) AllErrors() []error { return m }

// DeleteAccountValidationError is the validation error returned by
// DeleteAccount.Validate if the designated constraints aren't met.
type DeleteAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountValidationError) ErrorName() string { return "DeleteAccountValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountValidationError{}

// Validate checks the field values on AccountIDByLogin with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccountIDByLogin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountIDByLogin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountIDByLoginMultiError, or nil if none found.
func (m *AccountIDByLogin) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountIDByLogin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountIDByLoginMultiError(errors)
	}

	return nil
}

// AccountIDByLoginMultiError is an error wrapping multiple validation errors
// returned by AccountIDByLogin.ValidateAll() if the designated constraints
// aren't met.
type AccountIDByLoginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountIDByLoginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountIDByLoginMultiError) AllErrors() []error { return m }

// AccountIDByLoginValidationError is the validation error returned by
// AccountIDByLogin.Validate if the designated constraints aren't met.
type AccountIDByLoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIDByLoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIDByLoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIDByLoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIDByLoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIDByLoginValidationError) ErrorName() string { return "AccountIDByLoginValidationError" }

// Error satisfies the builtin error interface
func (e AccountIDByLoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountIDByLogin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIDByLoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIDByLoginValidationError{}

// Validate checks the field values on UpdateStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateStatusMultiError, or
// nil if none found.
func (m *UpdateStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStatusMultiError(errors)
	}

	return nil
}

// UpdateStatusMultiError is an error wrapping multiple validation errors
// returned by UpdateStatus.ValidateAll() if the designated constraints aren't met.
type UpdateStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusMultiError) AllErrors() []error { return m }

// UpdateStatusValidationError is the validation error returned by
// UpdateStatus.Validate if the designated constraints aren't met.
type UpdateStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusValidationError) ErrorName() string { return "UpdateStatusValidationError" }

// Error satisfies the builtin error interface
func (e UpdateStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusValidationError{}

// Validate checks the field values on SessionAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SessionAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SessionAccountMultiError,
// or nil if none found.
func (m *SessionAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SessionAccountMultiError(errors)
	}

	return nil
}

// SessionAccountMultiError is an error wrapping multiple validation errors
// returned by SessionAccount.ValidateAll() if the designated constraints
// aren't met.
type SessionAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionAccountMultiError) AllErrors() []error { return m }

// SessionAccountValidationError is the validation error returned by
// SessionAccount.Validate if the designated constraints aren't met.
type SessionAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionAccountValidationError) ErrorName() string { return "SessionAccountValidationError" }

// Error satisfies the builtin error interface
func (e SessionAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionAccountValidationError{}

// Validate checks the field values on FindByTokenAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByTokenAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByTokenAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByTokenAccountMultiError, or nil if none found.
func (m *FindByTokenAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTokenAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindByTokenAccountMultiError(errors)
	}

	return nil
}

// FindByTokenAccountMultiError is an error wrapping multiple validation errors
// returned by FindByTokenAccount.ValidateAll() if the designated constraints
// aren't met.
type FindByTokenAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTokenAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTokenAccountMultiError) AllErrors() []error { return m }

// FindByTokenAccountValidationError is the validation error returned by
// FindByTokenAccount.Validate if the designated constraints aren't met.
type FindByTokenAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTokenAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTokenAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTokenAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTokenAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTokenAccountValidationError) ErrorName() string {
	return "FindByTokenAccountValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTokenAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTokenAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTokenAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTokenAccountValidationError{}

// Validate checks the field values on SignIn_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignIn_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignIn_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignIn_RequestMultiError,
// or nil if none found.
func (m *SignIn_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SignIn_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SignIn_RequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
		err := SignIn_RequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignIn_RequestMultiError(errors)
	}

	return nil
}

func (m *SignIn_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignIn_Request) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignIn_RequestMultiError is an error wrapping multiple validation errors
// returned by SignIn_Request.ValidateAll() if the designated constraints
// aren't met.
type SignIn_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignIn_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignIn_RequestMultiError) AllErrors() []error { return m }

// SignIn_RequestValidationError is the validation error returned by
// SignIn_Request.Validate if the designated constraints aren't met.
type SignIn_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignIn_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignIn_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignIn_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignIn_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignIn_RequestValidationError) ErrorName() string { return "SignIn_RequestValidationError" }

// Error satisfies the builtin error interface
func (e SignIn_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignIn_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignIn_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignIn_RequestValidationError{}

// Validate checks the field values on SignIn_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignIn_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignIn_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignIn_ResponseMultiError, or nil if none found.
func (m *SignIn_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *SignIn_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for UserRole

	if len(errors) > 0 {
		return SignIn_ResponseMultiError(errors)
	}

	return nil
}

// SignIn_ResponseMultiError is an error wrapping multiple validation errors
// returned by SignIn_Response.ValidateAll() if the designated constraints
// aren't met.
type SignIn_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignIn_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignIn_ResponseMultiError) AllErrors() []error { return m }

// SignIn_ResponseValidationError is the validation error returned by
// SignIn_Response.Validate if the designated constraints aren't met.
type SignIn_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignIn_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignIn_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignIn_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignIn_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignIn_ResponseValidationError) ErrorName() string { return "SignIn_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignIn_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignIn_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignIn_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignIn_ResponseValidationError{}

// Validate checks the field values on ResetPassword_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPassword_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPassword_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPassword_RequestMultiError, or nil if none found.
func (m *ResetPassword_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPassword_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToken() != "" {

		if err := m._validateUuid(m.GetToken()); err != nil {
			err = ResetPassword_RequestValidationError{
				field:  "Token",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	switch v := m.Request.(type) {
	case *ResetPassword_Request_Email:
		if v == nil {
			err := ResetPassword_RequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = ResetPassword_RequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ResetPassword_Request_Password:
		if v == nil {
			err := ResetPassword_RequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
			err := ResetPassword_RequestValidationError{
				field:  "Password",
				reason: "value length must be between 8 and 32 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ResetPassword_RequestMultiError(errors)
	}

	return nil
}

func (m *ResetPassword_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ResetPassword_Request) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *ResetPassword_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ResetPassword_RequestMultiError is an error wrapping multiple validation
// errors returned by ResetPassword_Request.ValidateAll() if the designated
// constraints aren't met.
type ResetPassword_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPassword_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPassword_RequestMultiError) AllErrors() []error { return m }

// ResetPassword_RequestValidationError is the validation error returned by
// ResetPassword_Request.Validate if the designated constraints aren't met.
type ResetPassword_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPassword_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPassword_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPassword_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPassword_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPassword_RequestValidationError) ErrorName() string {
	return "ResetPassword_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPassword_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPassword_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPassword_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPassword_RequestValidationError{}

// Validate checks the field values on ResetPassword_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPassword_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPassword_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPassword_ResponseMultiError, or nil if none found.
func (m *ResetPassword_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPassword_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Token

	if len(errors) > 0 {
		return ResetPassword_ResponseMultiError(errors)
	}

	return nil
}

// ResetPassword_ResponseMultiError is an error wrapping multiple validation
// errors returned by ResetPassword_Response.ValidateAll() if the designated
// constraints aren't met.
type ResetPassword_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPassword_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPassword_ResponseMultiError) AllErrors() []error { return m }

// ResetPassword_ResponseValidationError is the validation error returned by
// ResetPassword_Response.Validate if the designated constraints aren't met.
type ResetPassword_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPassword_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPassword_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPassword_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPassword_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPassword_ResponseValidationError) ErrorName() string {
	return "ResetPassword_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPassword_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPassword_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPassword_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPassword_ResponseValidationError{}

// Validate checks the field values on ListAccounts_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccounts_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccounts_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccounts_RequestMultiError, or nil if none found.
func (m *ListAccounts_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccounts_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for SortBy

	// no validation rules for Query

	if len(errors) > 0 {
		return ListAccounts_RequestMultiError(errors)
	}

	return nil
}

// ListAccounts_RequestMultiError is an error wrapping multiple validation
// errors returned by ListAccounts_Request.ValidateAll() if the designated
// constraints aren't met.
type ListAccounts_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccounts_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccounts_RequestMultiError) AllErrors() []error { return m }

// ListAccounts_RequestValidationError is the validation error returned by
// ListAccounts_Request.Validate if the designated constraints aren't met.
type ListAccounts_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccounts_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccounts_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccounts_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccounts_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccounts_RequestValidationError) ErrorName() string {
	return "ListAccounts_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccounts_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccounts_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccounts_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccounts_RequestValidationError{}

// Validate checks the field values on ListAccounts_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccounts_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccounts_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccounts_ResponseMultiError, or nil if none found.
func (m *ListAccounts_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccounts_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccounts_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccounts_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccounts_ResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccounts_ResponseMultiError(errors)
	}

	return nil
}

// ListAccounts_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListAccounts_Response.ValidateAll() if the designated
// constraints aren't met.
type ListAccounts_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccounts_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccounts_ResponseMultiError) AllErrors() []error { return m }

// ListAccounts_ResponseValidationError is the validation error returned by
// ListAccounts_Response.Validate if the designated constraints aren't met.
type ListAccounts_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccounts_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccounts_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccounts_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccounts_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccounts_ResponseValidationError) ErrorName() string {
	return "ListAccounts_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccounts_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccounts_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccounts_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccounts_ResponseValidationError{}

// Validate checks the field values on Account_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Account_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Account_RequestMultiError, or nil if none found.
func (m *Account_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Account_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = Account_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Account_RequestMultiError(errors)
	}

	return nil
}

func (m *Account_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// Account_RequestMultiError is an error wrapping multiple validation errors
// returned by Account_Request.ValidateAll() if the designated constraints
// aren't met.
type Account_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Account_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Account_RequestMultiError) AllErrors() []error { return m }

// Account_RequestValidationError is the validation error returned by
// Account_Request.Validate if the designated constraints aren't met.
type Account_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Account_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Account_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Account_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Account_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Account_RequestValidationError) ErrorName() string { return "Account_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Account_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Account_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Account_RequestValidationError{}

// Validate checks the field values on Account_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Account_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Account_ResponseMultiError, or nil if none found.
func (m *Account_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Account_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Online

	// no validation rules for Active

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for ConnectionLogin

	if all {
		switch v := interface{}(m.GetLastUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Account_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Account_ResponseValidationError{
					field:  "LastUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Account_ResponseValidationError{
				field:  "LastUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Account_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Account_ResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Account_ResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Account_ResponseMultiError(errors)
	}

	return nil
}

// Account_ResponseMultiError is an error wrapping multiple validation errors
// returned by Account_Response.ValidateAll() if the designated constraints
// aren't met.
type Account_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Account_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Account_ResponseMultiError) AllErrors() []error { return m }

// Account_ResponseValidationError is the validation error returned by
// Account_Response.Validate if the designated constraints aren't met.
type Account_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Account_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Account_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Account_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Account_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Account_ResponseValidationError) ErrorName() string { return "Account_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Account_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Account_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Account_ResponseValidationError{}

// Validate checks the field values on AddAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccount_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccount_RequestMultiError, or nil if none found.
func (m *AddAccount_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccount_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = AddAccount_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddAccount_RequestMultiError(errors)
	}

	return nil
}

func (m *AddAccount_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddAccount_RequestMultiError is an error wrapping multiple validation errors
// returned by AddAccount_Request.ValidateAll() if the designated constraints
// aren't met.
type AddAccount_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccount_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccount_RequestMultiError) AllErrors() []error { return m }

// AddAccount_RequestValidationError is the validation error returned by
// AddAccount_Request.Validate if the designated constraints aren't met.
type AddAccount_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccount_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccount_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccount_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccount_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccount_RequestValidationError) ErrorName() string {
	return "AddAccount_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccount_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccount_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccount_RequestValidationError{}

// Validate checks the field values on AddAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccount_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccount_ResponseMultiError, or nil if none found.
func (m *AddAccount_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccount_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAccount_ResponseMultiError(errors)
	}

	return nil
}

// AddAccount_ResponseMultiError is an error wrapping multiple validation
// errors returned by AddAccount_Response.ValidateAll() if the designated
// constraints aren't met.
type AddAccount_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccount_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccount_ResponseMultiError) AllErrors() []error { return m }

// AddAccount_ResponseValidationError is the validation error returned by
// AddAccount_Response.Validate if the designated constraints aren't met.
type AddAccount_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccount_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccount_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccount_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccount_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccount_ResponseValidationError) ErrorName() string {
	return "AddAccount_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccount_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccount_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccount_ResponseValidationError{}

// Validate checks the field values on UpdateAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccount_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccount_RequestMultiError, or nil if none found.
func (m *UpdateAccount_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccount_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = UpdateAccount_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAccount_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateAccount_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateAccount_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccount_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccount_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccount_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccount_RequestMultiError) AllErrors() []error { return m }

// UpdateAccount_RequestValidationError is the validation error returned by
// UpdateAccount_Request.Validate if the designated constraints aren't met.
type UpdateAccount_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccount_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccount_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccount_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccount_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccount_RequestValidationError) ErrorName() string {
	return "UpdateAccount_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccount_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccount_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccount_RequestValidationError{}

// Validate checks the field values on UpdateAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccount_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccount_ResponseMultiError, or nil if none found.
func (m *UpdateAccount_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccount_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccount_ResponseMultiError(errors)
	}

	return nil
}

// UpdateAccount_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccount_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccount_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccount_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccount_ResponseMultiError) AllErrors() []error { return m }

// UpdateAccount_ResponseValidationError is the validation error returned by
// UpdateAccount_Response.Validate if the designated constraints aren't met.
type UpdateAccount_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccount_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccount_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccount_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccount_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccount_ResponseValidationError) ErrorName() string {
	return "UpdateAccount_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccount_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccount_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccount_ResponseValidationError{}

// Validate checks the field values on DeleteAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccount_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccount_RequestMultiError, or nil if none found.
func (m *DeleteAccount_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccount_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = DeleteAccount_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAccount_RequestMultiError(errors)
	}

	return nil
}

func (m *DeleteAccount_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAccount_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccount_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccount_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccount_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccount_RequestMultiError) AllErrors() []error { return m }

// DeleteAccount_RequestValidationError is the validation error returned by
// DeleteAccount_Request.Validate if the designated constraints aren't met.
type DeleteAccount_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccount_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccount_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccount_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccount_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccount_RequestValidationError) ErrorName() string {
	return "DeleteAccount_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccount_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccount_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccount_RequestValidationError{}

// Validate checks the field values on DeleteAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccount_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccount_ResponseMultiError, or nil if none found.
func (m *DeleteAccount_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccount_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAccount_ResponseMultiError(errors)
	}

	return nil
}

// DeleteAccount_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAccount_Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccount_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccount_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccount_ResponseMultiError) AllErrors() []error { return m }

// DeleteAccount_ResponseValidationError is the validation error returned by
// DeleteAccount_Response.Validate if the designated constraints aren't met.
type DeleteAccount_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccount_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccount_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccount_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccount_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccount_ResponseValidationError) ErrorName() string {
	return "DeleteAccount_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccount_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccount_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccount_ResponseValidationError{}

// Validate checks the field values on AccountIDByLogin_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountIDByLogin_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountIDByLogin_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountIDByLogin_RequestMultiError, or nil if none found.
func (m *AccountIDByLogin_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountIDByLogin_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Fingerprint

	if ip := net.ParseIP(m.GetClientIp()); ip == nil {
		err := AccountIDByLogin_RequestValidationError{
			field:  "ClientIp",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccountIDByLogin_RequestMultiError(errors)
	}

	return nil
}

// AccountIDByLogin_RequestMultiError is an error wrapping multiple validation
// errors returned by AccountIDByLogin_Request.ValidateAll() if the designated
// constraints aren't met.
type AccountIDByLogin_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountIDByLogin_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountIDByLogin_RequestMultiError) AllErrors() []error { return m }

// AccountIDByLogin_RequestValidationError is the validation error returned by
// AccountIDByLogin_Request.Validate if the designated constraints aren't met.
type AccountIDByLogin_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIDByLogin_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIDByLogin_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIDByLogin_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIDByLogin_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIDByLogin_RequestValidationError) ErrorName() string {
	return "AccountIDByLogin_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountIDByLogin_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountIDByLogin_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIDByLogin_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIDByLogin_RequestValidationError{}

// Validate checks the field values on AccountIDByLogin_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountIDByLogin_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountIDByLogin_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountIDByLogin_ResponseMultiError, or nil if none found.
func (m *AccountIDByLogin_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountIDByLogin_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return AccountIDByLogin_ResponseMultiError(errors)
	}

	return nil
}

// AccountIDByLogin_ResponseMultiError is an error wrapping multiple validation
// errors returned by AccountIDByLogin_Response.ValidateAll() if the
// designated constraints aren't met.
type AccountIDByLogin_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountIDByLogin_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountIDByLogin_ResponseMultiError) AllErrors() []error { return m }

// AccountIDByLogin_ResponseValidationError is the validation error returned by
// AccountIDByLogin_Response.Validate if the designated constraints aren't met.
type AccountIDByLogin_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIDByLogin_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIDByLogin_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIDByLogin_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIDByLogin_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIDByLogin_ResponseValidationError) ErrorName() string {
	return "AccountIDByLogin_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountIDByLogin_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountIDByLogin_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIDByLogin_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIDByLogin_ResponseValidationError{}

// Validate checks the field values on UpdateStatus_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatus_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatus_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatus_RequestMultiError, or nil if none found.
func (m *UpdateStatus_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatus_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = UpdateStatus_RequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateStatus_RequestMultiError(errors)
	}

	return nil
}

func (m *UpdateStatus_Request) _validateUuid(uuid string) error {
	if matched := _account_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateStatus_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStatus_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatus_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatus_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatus_RequestMultiError) AllErrors() []error { return m }

// UpdateStatus_RequestValidationError is the validation error returned by
// UpdateStatus_Request.Validate if the designated constraints aren't met.
type UpdateStatus_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatus_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatus_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatus_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatus_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatus_RequestValidationError) ErrorName() string {
	return "UpdateStatus_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatus_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatus_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatus_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatus_RequestValidationError{}

// Validate checks the field values on UpdateStatus_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatus_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatus_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatus_ResponseMultiError, or nil if none found.
func (m *UpdateStatus_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatus_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateStatus_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateStatus_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateStatus_ResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateStatus_ResponseMultiError(errors)
	}

	return nil
}

// UpdateStatus_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStatus_Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatus_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatus_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatus_ResponseMultiError) AllErrors() []error { return m }

// UpdateStatus_ResponseValidationError is the validation error returned by
// UpdateStatus_Response.Validate if the designated constraints aren't met.
type UpdateStatus_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatus_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatus_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatus_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatus_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatus_ResponseValidationError) ErrorName() string {
	return "UpdateStatus_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatus_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatus_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatus_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatus_ResponseValidationError{}

// Validate checks the field values on SessionAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionAccount_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionAccount_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionAccount_RequestMultiError, or nil if none found.
func (m *SessionAccount_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionAccount_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return SessionAccount_RequestMultiError(errors)
	}

	return nil
}

// SessionAccount_RequestMultiError is an error wrapping multiple validation
// errors returned by SessionAccount_Request.ValidateAll() if the designated
// constraints aren't met.
type SessionAccount_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionAccount_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionAccount_RequestMultiError) AllErrors() []error { return m }

// SessionAccount_RequestValidationError is the validation error returned by
// SessionAccount_Request.Validate if the designated constraints aren't met.
type SessionAccount_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionAccount_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionAccount_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionAccount_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionAccount_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionAccount_RequestValidationError) ErrorName() string {
	return "SessionAccount_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SessionAccount_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionAccount_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionAccount_RequestValidationError{}

// Validate checks the field values on SessionAccount_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionAccount_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionAccount_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionAccount_ResponseMultiError, or nil if none found.
func (m *SessionAccount_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionAccount_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionAccount_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionAccount_ResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionAccount_ResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SessionAccount_ResponseMultiError(errors)
	}

	return nil
}

// SessionAccount_ResponseMultiError is an error wrapping multiple validation
// errors returned by SessionAccount_Response.ValidateAll() if the designated
// constraints aren't met.
type SessionAccount_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionAccount_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionAccount_ResponseMultiError) AllErrors() []error { return m }

// SessionAccount_ResponseValidationError is the validation error returned by
// SessionAccount_Response.Validate if the designated constraints aren't met.
type SessionAccount_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionAccount_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionAccount_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionAccount_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionAccount_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionAccount_ResponseValidationError) ErrorName() string {
	return "SessionAccount_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SessionAccount_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionAccount_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionAccount_ResponseValidationError{}

// Validate checks the field values on FindByTokenAccount_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByTokenAccount_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByTokenAccount_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByTokenAccount_RequestMultiError, or nil if none found.
func (m *FindByTokenAccount_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTokenAccount_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return FindByTokenAccount_RequestMultiError(errors)
	}

	return nil
}

// FindByTokenAccount_RequestMultiError is an error wrapping multiple
// validation errors returned by FindByTokenAccount_Request.ValidateAll() if
// the designated constraints aren't met.
type FindByTokenAccount_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTokenAccount_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTokenAccount_RequestMultiError) AllErrors() []error { return m }

// FindByTokenAccount_RequestValidationError is the validation error returned
// by FindByTokenAccount_Request.Validate if the designated constraints aren't met.
type FindByTokenAccount_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTokenAccount_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTokenAccount_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTokenAccount_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTokenAccount_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTokenAccount_RequestValidationError) ErrorName() string {
	return "FindByTokenAccount_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTokenAccount_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTokenAccount_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTokenAccount_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTokenAccount_RequestValidationError{}

// Validate checks the field values on FindByTokenAccount_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByTokenAccount_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByTokenAccount_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByTokenAccount_ResponseMultiError, or nil if none found.
func (m *FindByTokenAccount_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTokenAccount_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindByTokenAccount_ResponseMultiError(errors)
	}

	return nil
}

// FindByTokenAccount_ResponseMultiError is an error wrapping multiple
// validation errors returned by FindByTokenAccount_Response.ValidateAll() if
// the designated constraints aren't met.
type FindByTokenAccount_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTokenAccount_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTokenAccount_ResponseMultiError) AllErrors() []error { return m }

// FindByTokenAccount_ResponseValidationError is the validation error returned
// by FindByTokenAccount_Response.Validate if the designated constraints
// aren't met.
type FindByTokenAccount_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTokenAccount_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTokenAccount_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTokenAccount_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTokenAccount_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTokenAccount_ResponseValidationError) ErrorName() string {
	return "FindByTokenAccount_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTokenAccount_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTokenAccount_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTokenAccount_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTokenAccount_ResponseValidationError{}
